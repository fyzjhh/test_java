package com.test.spark;

import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.examples.streaming.StreamingExamples;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import scala.Tuple2;

import com.google.common.collect.Lists;

public class Test_Spark {

	public Test_Spark() {
		super();
	}

	public static void main(String[] args) throws Exception {

		test_spark_streaming(args);
	}

	private static void test_exec(String[] args) throws Exception {
		//
		// DateFormat datetimeformat = new
		// SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// String r = null;
		//
		// BufferedWriter out = new BufferedWriter(new FileWriter(
		// "/tmp/debug.txt", true));
		//
		// if (args.length < 1) {
		// r = datetimeformat.format(new Date()) + "	"
		// + "Usage: Test_Spark <file>" + "\r\n";
		// System.out.println(r);
		// out.write(r);
		// System.exit(1);
		// }
		// SparkConf sparkConf = new SparkConf().setAppName("test_exec");
		// JavaSparkContext ctx = new JavaSparkContext(sparkConf);
		// JavaRDD<String> lines = ctx.textFile(args[0]);
		//
		// r = datetimeformat.format(new Date()) + "	" + args[0] + "\r\n";
		// System.out.println(r);
		// out.write(r);
		// r = datetimeformat.format(new Date()) + "	" + lines.count() + "\r\n";
		// System.out.println(r);
		// out.write(r);
		// r = datetimeformat.format(new Date()) + "	" + lines.first() + "\r\n";
		// System.out.println(r);
		// out.write(r);
		// out.flush();
		//
		// ctx.stop();
		//
		// out.close();

	}

	private static final Pattern SPACE = Pattern.compile(" ");

	private static void test_spark_streaming(String[] args) throws Exception {

		if (args.length < 2) {
			System.err.println("Usage: JavaNetworkWordCount <hostname> <port>");
			System.exit(1);
		}

		StreamingExamples.setStreamingLogLevels();

		// Create the context with a 1 second batch size
		SparkConf sparkConf = new SparkConf()
				.setAppName("JavaNetworkWordCount");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf,
				Durations.seconds(1));

		// Create a JavaReceiverInputDStream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
		JavaReceiverInputDStream<String> lines = ssc.socketTextStream(args[0],
				Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);
		JavaDStream<String> words = lines
				.flatMap(new FlatMapFunction<String, String>() {
					@Override
					public Iterable<String> call(String x) {
						return Lists.newArrayList(SPACE.split(x));
					}
				});
		JavaPairDStream<String, Integer> wordCounts = words.mapToPair(
				new PairFunction<String, String, Integer>() {
					@Override
					public Tuple2<String, Integer> call(String s) {
						return new Tuple2<String, Integer>(s, 1);
					}
				}).reduceByKey(new Function2<Integer, Integer, Integer>() {
			@Override
			public Integer call(Integer i1, Integer i2) {
				return i1 + i2;
			}
		});

		wordCounts.print();
		ssc.start();
		ssc.awaitTermination();
	}
}
