// $ANTLR 3.5.1 D:\\temp\\antlr\\HiveParser.g 2014-08-19 16:17:13

package com.test.antlr.hive013;

import java.util.Collection;
import java.util.HashMap;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


/**
   Licensed to the Apache Software Foundation (ASF) under one or more 
   contributor license agreements.  See the NOTICE file distributed with 
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with 
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
@SuppressWarnings("all")
public class HiveParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", 
		"BigintLiteral", "ByteLengthLiteral", "COLON", "COMMA", "COMMENT", "CharSetLiteral", 
		"CharSetName", "DIV", "DIVIDE", "DOLLAR", "DOT", "DecimalLiteral", "Digit", 
		"EQUAL", "EQUAL_NS", "Exponent", "GREATERTHAN", "GREATERTHANOREQUALTO", 
		"HexDigit", "Identifier", "KW_ADD", "KW_ADMIN", "KW_AFTER", "KW_ALL", 
		"KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", 
		"KW_ASC", "KW_BEFORE", "KW_BETWEEN", "KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", 
		"KW_BOTH", "KW_BUCKET", "KW_BUCKETS", "KW_BY", "KW_CASCADE", "KW_CASE", 
		"KW_CAST", "KW_CHANGE", "KW_CHAR", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", 
		"KW_COLLECTION", "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMPACT", 
		"KW_COMPACTIONS", "KW_COMPUTE", "KW_CONCATENATE", "KW_CONTINUE", "KW_CREATE", 
		"KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURSOR", "KW_DATA", "KW_DATABASE", 
		"KW_DATABASES", "KW_DATE", "KW_DATETIME", "KW_DBPROPERTIES", "KW_DECIMAL", 
		"KW_DEFAULT", "KW_DEFERRED", "KW_DEFINED", "KW_DELETE", "KW_DELIMITED", 
		"KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", "KW_DIRECTORIES", "KW_DIRECTORY", 
		"KW_DISABLE", "KW_DISTINCT", "KW_DISTRIBUTE", "KW_DOUBLE", "KW_DROP", 
		"KW_ELEM_TYPE", "KW_ELSE", "KW_ENABLE", "KW_END", "KW_ESCAPED", "KW_EXCHANGE", 
		"KW_EXCLUSIVE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXTENDED", 
		"KW_EXTERNAL", "KW_FALSE", "KW_FETCH", "KW_FIELDS", "KW_FILE", "KW_FILEFORMAT", 
		"KW_FIRST", "KW_FLOAT", "KW_FOLLOWING", "KW_FOR", "KW_FORMAT", "KW_FORMATTED", 
		"KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", 
		"KW_GROUPING", "KW_HAVING", "KW_HOLD_DDLTIME", "KW_IDXPROPERTIES", "KW_IF", 
		"KW_IGNORE", "KW_IMPORT", "KW_IN", "KW_INDEX", "KW_INDEXES", "KW_INNER", 
		"KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", "KW_INSERT", "KW_INT", 
		"KW_INTERSECT", "KW_INTO", "KW_IS", "KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_KEYS", 
		"KW_KEY_TYPE", "KW_LATERAL", "KW_LEFT", "KW_LESS", "KW_LIKE", "KW_LIMIT", 
		"KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", "KW_LOCKS", 
		"KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MAP", "KW_MAPJOIN", "KW_MATERIALIZED", 
		"KW_MINUS", "KW_MORE", "KW_MSCK", "KW_NONE", "KW_NOSCAN", "KW_NOT", "KW_NO_DROP", 
		"KW_NULL", "KW_OF", "KW_OFFLINE", "KW_ON", "KW_OPTION", "KW_OR", "KW_ORCFILE", 
		"KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", 
		"KW_OVER", "KW_OVERWRITE", "KW_OWNER", "KW_PARQUETFILE", "KW_PARTIALSCAN", 
		"KW_PARTITION", "KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENT", "KW_PLUS", 
		"KW_PRECEDING", "KW_PRESERVE", "KW_PRETTY", "KW_PRINCIPALS", "KW_PROCEDURE", 
		"KW_PROTECTION", "KW_PURGE", "KW_RANGE", "KW_RCFILE", "KW_READ", "KW_READONLY", 
		"KW_READS", "KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", 
		"KW_REGEXP", "KW_RENAME", "KW_REPAIR", "KW_REPLACE", "KW_RESTRICT", "KW_REVOKE", 
		"KW_RIGHT", "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLUP", "KW_ROW", 
		"KW_ROWS", "KW_SCHEMA", "KW_SCHEMAS", "KW_SELECT", "KW_SEMI", "KW_SEQUENCEFILE", 
		"KW_SERDE", "KW_SERDEPROPERTIES", "KW_SET", "KW_SETS", "KW_SHARED", "KW_SHOW", 
		"KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", "KW_SORT", "KW_SORTED", 
		"KW_SSL", "KW_STATISTICS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", 
		"KW_STRUCT", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TBLPROPERTIES", 
		"KW_TEMPORARY", "KW_TERMINATED", "KW_TEXTFILE", "KW_THEN", "KW_TIMESTAMP", 
		"KW_TINYINT", "KW_TO", "KW_TOUCH", "KW_TRANSACTIONS", "KW_TRANSFORM", 
		"KW_TRIGGER", "KW_TRUE", "KW_TRUNCATE", "KW_UNARCHIVE", "KW_UNBOUNDED", 
		"KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUEJOIN", "KW_UNLOCK", "KW_UNSET", 
		"KW_UNSIGNED", "KW_UPDATE", "KW_USE", "KW_USER", "KW_USING", "KW_UTC", 
		"KW_UTCTIMESTAMP", "KW_VALUE_TYPE", "KW_VARCHAR", "KW_VIEW", "KW_WHEN", 
		"KW_WHERE", "KW_WHILE", "KW_WINDOW", "KW_WITH", "LCURLY", "LESSTHAN", 
		"LESSTHANOREQUALTO", "LPAREN", "LSQUARE", "Letter", "MINUS", "MOD", "NOTEQUAL", 
		"Number", "PLUS", "QUESTION", "QuotedIdentifier", "RCURLY", "RPAREN", 
		"RSQUARE", "RegexComponent", "SEMICOLON", "STAR", "SmallintLiteral", "StringLiteral", 
		"TILDE", "TinyintLiteral", "WS", "TOK_ALIASLIST", "TOK_ALLCOLREF", "TOK_ALTERDATABASE_OWNER", 
		"TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERINDEX_PROPERTIES", "TOK_ALTERINDEX_REBUILD", 
		"TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_ARCHIVE", 
		"TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERTABLE_CLUSTER_SORT", 
		"TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", 
		"TOK_ALTERTABLE_MERGEFILES", "TOK_ALTERTABLE_PARTCOLTYPE", "TOK_ALTERTABLE_PARTITION", 
		"TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_PROTECTMODE", "TOK_ALTERTABLE_RENAME", 
		"TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", 
		"TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_ALTERTABLE_SKEWED", 
		"TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTBLPART_SKEWED_LOCATION", 
		"TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_AS", "TOK_ALTERVIEW_DROPPARTS", 
		"TOK_ALTERVIEW_PROPERTIES", "TOK_ALTERVIEW_RENAME", "TOK_ANALYZE", "TOK_ARCHIVE", 
		"TOK_BIGINT", "TOK_BINARY", "TOK_BOOLEAN", "TOK_CASCADE", "TOK_CHAR", 
		"TOK_CHARSETLITERAL", "TOK_CLUSTERBY", "TOK_COLTYPELIST", "TOK_COMPACT", 
		"TOK_CREATEDATABASE", "TOK_CREATEFUNCTION", "TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", 
		"TOK_CREATEMACRO", "TOK_CREATEROLE", "TOK_CREATETABLE", "TOK_CREATEVIEW", 
		"TOK_CROSSJOIN", "TOK_CTE", "TOK_CUBE_GROUPBY", "TOK_DATABASECOMMENT", 
		"TOK_DATABASELOCATION", "TOK_DATABASEPROPERTIES", "TOK_DATE", "TOK_DATELITERAL", 
		"TOK_DATETIME", "TOK_DBPROPLIST", "TOK_DB_TYPE", "TOK_DECIMAL", "TOK_DEFERRED_REBUILDINDEX", 
		"TOK_DESCDATABASE", "TOK_DESCFUNCTION", "TOK_DESCTABLE", "TOK_DESTINATION", 
		"TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", "TOK_DOUBLE", "TOK_DROPDATABASE", 
		"TOK_DROPFUNCTION", "TOK_DROPINDEX", "TOK_DROPMACRO", "TOK_DROPROLE", 
		"TOK_DROPTABLE", "TOK_DROPTABLE_PROPERTIES", "TOK_DROPVIEW", "TOK_DROPVIEW_PROPERTIES", 
		"TOK_ENABLE", "TOK_EXCHANGEPARTITION", "TOK_EXPLAIN", "TOK_EXPLIST", "TOK_EXPORT", 
		"TOK_FALSE", "TOK_FILE", "TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", "TOK_FROM", 
		"TOK_FULLOUTERJOIN", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", 
		"TOK_GRANT", "TOK_GRANT_ROLE", "TOK_GRANT_WITH_ADMIN_OPTION", "TOK_GRANT_WITH_OPTION", 
		"TOK_GROUP", "TOK_GROUPBY", "TOK_GROUPING_SETS", "TOK_GROUPING_SETS_EXPRESSION", 
		"TOK_HAVING", "TOK_HINT", "TOK_HINTARGLIST", "TOK_HINTLIST", "TOK_HOLD_DDLTIME", 
		"TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_IGNOREPROTECTION", "TOK_IMPORT", 
		"TOK_INDEXCOMMENT", "TOK_INDEXPROPERTIES", "TOK_INDEXPROPLIST", "TOK_INSERT", 
		"TOK_INSERT_INTO", "TOK_INT", "TOK_ISNOTNULL", "TOK_ISNULL", "TOK_JAR", 
		"TOK_JOIN", "TOK_LATERAL_VIEW", "TOK_LATERAL_VIEW_OUTER", "TOK_LEFTOUTERJOIN", 
		"TOK_LEFTSEMIJOIN", "TOK_LENGTH", "TOK_LIKETABLE", "TOK_LIMIT", "TOK_LIST", 
		"TOK_LOAD", "TOK_LOCAL_DIR", "TOK_LOCKDB", "TOK_LOCKTABLE", "TOK_MAP", 
		"TOK_MAPJOIN", "TOK_MSCK", "TOK_NOT_CLUSTERED", "TOK_NOT_SORTED", "TOK_NO_DROP", 
		"TOK_NULL", "TOK_OFFLINE", "TOK_OP_ADD", "TOK_OP_AND", "TOK_OP_BITAND", 
		"TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_DIV", "TOK_OP_EQ", 
		"TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", "TOK_OP_LT", "TOK_OP_MOD", 
		"TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", "TOK_OP_SUB", "TOK_ORDERBY", 
		"TOK_ORREPLACE", "TOK_PARTITIONINGSPEC", "TOK_PARTITIONLOCATION", "TOK_PARTSPEC", 
		"TOK_PARTVAL", "TOK_PERCENT", "TOK_PRINCIPAL_NAME", "TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", 
		"TOK_PRIV_ALL", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", 
		"TOK_PRIV_DELETE", "TOK_PRIV_DROP", "TOK_PRIV_INDEX", "TOK_PRIV_INSERT", 
		"TOK_PRIV_LOCK", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_PRIV_SELECT", 
		"TOK_PRIV_SHOW_DATABASE", "TOK_PTBLFUNCTION", "TOK_QUERY", "TOK_READONLY", 
		"TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RESOURCE_ALL", "TOK_RESOURCE_LIST", 
		"TOK_RESOURCE_URI", "TOK_RESTRICT", "TOK_REVOKE", "TOK_REVOKE_ROLE", "TOK_RIGHTOUTERJOIN", 
		"TOK_ROLE", "TOK_ROLLUP_GROUPBY", "TOK_ROWCOUNT", "TOK_SELECT", "TOK_SELECTDI", 
		"TOK_SELEXPR", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_SHOWCOLUMNS", 
		"TOK_SHOWDATABASES", "TOK_SHOWDBLOCKS", "TOK_SHOWFUNCTIONS", "TOK_SHOWINDEXES", 
		"TOK_SHOWLOCKS", "TOK_SHOWPARTITIONS", "TOK_SHOWTABLES", "TOK_SHOW_COMPACTIONS", 
		"TOK_SHOW_CREATETABLE", "TOK_SHOW_GRANT", "TOK_SHOW_ROLES", "TOK_SHOW_ROLE_GRANT", 
		"TOK_SHOW_ROLE_PRINCIPALS", "TOK_SHOW_SET_ROLE", "TOK_SHOW_TABLESTATUS", 
		"TOK_SHOW_TBLPROPERTIES", "TOK_SHOW_TRANSACTIONS", "TOK_SKEWED_LOCATIONS", 
		"TOK_SKEWED_LOCATION_LIST", "TOK_SKEWED_LOCATION_MAP", "TOK_SMALLINT", 
		"TOK_SORTBY", "TOK_STORAGEHANDLER", "TOK_STOREDASDIRS", "TOK_STREAMTABLE", 
		"TOK_STRING", "TOK_STRINGLITERALSEQUENCE", "TOK_STRUCT", "TOK_SUBQUERY", 
		"TOK_SUBQUERY_EXPR", "TOK_SUBQUERY_OP", "TOK_SUBQUERY_OP_NOTEXISTS", "TOK_SUBQUERY_OP_NOTIN", 
		"TOK_SWITCHDATABASE", "TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", 
		"TOK_TABCOLNAME", "TOK_TABCOLVALUE", "TOK_TABCOLVALUES", "TOK_TABCOLVALUE_PAIR", 
		"TOK_TABLEBUCKETS", "TOK_TABLEBUCKETSAMPLE", "TOK_TABLECOMMENT", "TOK_TABLEFILEFORMAT", 
		"TOK_TABLELOCATION", "TOK_TABLEPARTCOLS", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPERTY", 
		"TOK_TABLEPROPLIST", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATCOLLITEMS", 
		"TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATLINES", "TOK_TABLEROWFORMATMAPKEYS", 
		"TOK_TABLEROWFORMATNULL", "TOK_TABLESERIALIZER", "TOK_TABLESKEWED", "TOK_TABLESPLITSAMPLE", 
		"TOK_TABLE_OR_COL", "TOK_TABLE_PARTITION", "TOK_TABLE_TYPE", "TOK_TABNAME", 
		"TOK_TABREF", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_TABSRC", 
		"TOK_TABTYPE", "TOK_TBLORCFILE", "TOK_TBLPARQUETFILE", "TOK_TBLRCFILE", 
		"TOK_TBLSEQUENCEFILE", "TOK_TBLTEXTFILE", "TOK_TEMPORARY", "TOK_TIMESTAMP", 
		"TOK_TINYINT", "TOK_TMP_FILE", "TOK_TRANSFORM", "TOK_TRUE", "TOK_TRUNCATETABLE", 
		"TOK_UNION", "TOK_UNIONTYPE", "TOK_UNIQUEJOIN", "TOK_UNLOCKDB", "TOK_UNLOCKTABLE", 
		"TOK_USER", "TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_VARCHAR", 
		"TOK_VIEWPARTCOLS", "TOK_WHERE", "TOK_WINDOWDEF", "TOK_WINDOWRANGE", "TOK_WINDOWSPEC", 
		"TOK_WINDOWVALUES", "884"
	};
	public static final int EOF=-1;
	public static final int AMPERSAND=4;
	public static final int BITWISEOR=5;
	public static final int BITWISEXOR=6;
	public static final int BigintLiteral=7;
	public static final int ByteLengthLiteral=8;
	public static final int COLON=9;
	public static final int COMMA=10;
	public static final int COMMENT=11;
	public static final int CharSetLiteral=12;
	public static final int CharSetName=13;
	public static final int DIV=14;
	public static final int DIVIDE=15;
	public static final int DOLLAR=16;
	public static final int DOT=17;
	public static final int DecimalLiteral=18;
	public static final int Digit=19;
	public static final int EQUAL=20;
	public static final int EQUAL_NS=21;
	public static final int Exponent=22;
	public static final int GREATERTHAN=23;
	public static final int GREATERTHANOREQUALTO=24;
	public static final int HexDigit=25;
	public static final int Identifier=26;
	public static final int KW_ADD=27;
	public static final int KW_ADMIN=28;
	public static final int KW_AFTER=29;
	public static final int KW_ALL=30;
	public static final int KW_ALTER=31;
	public static final int KW_ANALYZE=32;
	public static final int KW_AND=33;
	public static final int KW_ARCHIVE=34;
	public static final int KW_ARRAY=35;
	public static final int KW_AS=36;
	public static final int KW_ASC=37;
	public static final int KW_BEFORE=38;
	public static final int KW_BETWEEN=39;
	public static final int KW_BIGINT=40;
	public static final int KW_BINARY=41;
	public static final int KW_BOOLEAN=42;
	public static final int KW_BOTH=43;
	public static final int KW_BUCKET=44;
	public static final int KW_BUCKETS=45;
	public static final int KW_BY=46;
	public static final int KW_CASCADE=47;
	public static final int KW_CASE=48;
	public static final int KW_CAST=49;
	public static final int KW_CHANGE=50;
	public static final int KW_CHAR=51;
	public static final int KW_CLUSTER=52;
	public static final int KW_CLUSTERED=53;
	public static final int KW_CLUSTERSTATUS=54;
	public static final int KW_COLLECTION=55;
	public static final int KW_COLUMN=56;
	public static final int KW_COLUMNS=57;
	public static final int KW_COMMENT=58;
	public static final int KW_COMPACT=59;
	public static final int KW_COMPACTIONS=60;
	public static final int KW_COMPUTE=61;
	public static final int KW_CONCATENATE=62;
	public static final int KW_CONTINUE=63;
	public static final int KW_CREATE=64;
	public static final int KW_CROSS=65;
	public static final int KW_CUBE=66;
	public static final int KW_CURRENT=67;
	public static final int KW_CURSOR=68;
	public static final int KW_DATA=69;
	public static final int KW_DATABASE=70;
	public static final int KW_DATABASES=71;
	public static final int KW_DATE=72;
	public static final int KW_DATETIME=73;
	public static final int KW_DBPROPERTIES=74;
	public static final int KW_DECIMAL=75;
	public static final int KW_DEFAULT=76;
	public static final int KW_DEFERRED=77;
	public static final int KW_DEFINED=78;
	public static final int KW_DELETE=79;
	public static final int KW_DELIMITED=80;
	public static final int KW_DEPENDENCY=81;
	public static final int KW_DESC=82;
	public static final int KW_DESCRIBE=83;
	public static final int KW_DIRECTORIES=84;
	public static final int KW_DIRECTORY=85;
	public static final int KW_DISABLE=86;
	public static final int KW_DISTINCT=87;
	public static final int KW_DISTRIBUTE=88;
	public static final int KW_DOUBLE=89;
	public static final int KW_DROP=90;
	public static final int KW_ELEM_TYPE=91;
	public static final int KW_ELSE=92;
	public static final int KW_ENABLE=93;
	public static final int KW_END=94;
	public static final int KW_ESCAPED=95;
	public static final int KW_EXCHANGE=96;
	public static final int KW_EXCLUSIVE=97;
	public static final int KW_EXISTS=98;
	public static final int KW_EXPLAIN=99;
	public static final int KW_EXPORT=100;
	public static final int KW_EXTENDED=101;
	public static final int KW_EXTERNAL=102;
	public static final int KW_FALSE=103;
	public static final int KW_FETCH=104;
	public static final int KW_FIELDS=105;
	public static final int KW_FILE=106;
	public static final int KW_FILEFORMAT=107;
	public static final int KW_FIRST=108;
	public static final int KW_FLOAT=109;
	public static final int KW_FOLLOWING=110;
	public static final int KW_FOR=111;
	public static final int KW_FORMAT=112;
	public static final int KW_FORMATTED=113;
	public static final int KW_FROM=114;
	public static final int KW_FULL=115;
	public static final int KW_FUNCTION=116;
	public static final int KW_FUNCTIONS=117;
	public static final int KW_GRANT=118;
	public static final int KW_GROUP=119;
	public static final int KW_GROUPING=120;
	public static final int KW_HAVING=121;
	public static final int KW_HOLD_DDLTIME=122;
	public static final int KW_IDXPROPERTIES=123;
	public static final int KW_IF=124;
	public static final int KW_IGNORE=125;
	public static final int KW_IMPORT=126;
	public static final int KW_IN=127;
	public static final int KW_INDEX=128;
	public static final int KW_INDEXES=129;
	public static final int KW_INNER=130;
	public static final int KW_INPATH=131;
	public static final int KW_INPUTDRIVER=132;
	public static final int KW_INPUTFORMAT=133;
	public static final int KW_INSERT=134;
	public static final int KW_INT=135;
	public static final int KW_INTERSECT=136;
	public static final int KW_INTO=137;
	public static final int KW_IS=138;
	public static final int KW_ITEMS=139;
	public static final int KW_JAR=140;
	public static final int KW_JOIN=141;
	public static final int KW_KEYS=142;
	public static final int KW_KEY_TYPE=143;
	public static final int KW_LATERAL=144;
	public static final int KW_LEFT=145;
	public static final int KW_LESS=146;
	public static final int KW_LIKE=147;
	public static final int KW_LIMIT=148;
	public static final int KW_LINES=149;
	public static final int KW_LOAD=150;
	public static final int KW_LOCAL=151;
	public static final int KW_LOCATION=152;
	public static final int KW_LOCK=153;
	public static final int KW_LOCKS=154;
	public static final int KW_LOGICAL=155;
	public static final int KW_LONG=156;
	public static final int KW_MACRO=157;
	public static final int KW_MAP=158;
	public static final int KW_MAPJOIN=159;
	public static final int KW_MATERIALIZED=160;
	public static final int KW_MINUS=161;
	public static final int KW_MORE=162;
	public static final int KW_MSCK=163;
	public static final int KW_NONE=164;
	public static final int KW_NOSCAN=165;
	public static final int KW_NOT=166;
	public static final int KW_NO_DROP=167;
	public static final int KW_NULL=168;
	public static final int KW_OF=169;
	public static final int KW_OFFLINE=170;
	public static final int KW_ON=171;
	public static final int KW_OPTION=172;
	public static final int KW_OR=173;
	public static final int KW_ORCFILE=174;
	public static final int KW_ORDER=175;
	public static final int KW_OUT=176;
	public static final int KW_OUTER=177;
	public static final int KW_OUTPUTDRIVER=178;
	public static final int KW_OUTPUTFORMAT=179;
	public static final int KW_OVER=180;
	public static final int KW_OVERWRITE=181;
	public static final int KW_OWNER=182;
	public static final int KW_PARQUETFILE=183;
	public static final int KW_PARTIALSCAN=184;
	public static final int KW_PARTITION=185;
	public static final int KW_PARTITIONED=186;
	public static final int KW_PARTITIONS=187;
	public static final int KW_PERCENT=188;
	public static final int KW_PLUS=189;
	public static final int KW_PRECEDING=190;
	public static final int KW_PRESERVE=191;
	public static final int KW_PRETTY=192;
	public static final int KW_PRINCIPALS=193;
	public static final int KW_PROCEDURE=194;
	public static final int KW_PROTECTION=195;
	public static final int KW_PURGE=196;
	public static final int KW_RANGE=197;
	public static final int KW_RCFILE=198;
	public static final int KW_READ=199;
	public static final int KW_READONLY=200;
	public static final int KW_READS=201;
	public static final int KW_REBUILD=202;
	public static final int KW_RECORDREADER=203;
	public static final int KW_RECORDWRITER=204;
	public static final int KW_REDUCE=205;
	public static final int KW_REGEXP=206;
	public static final int KW_RENAME=207;
	public static final int KW_REPAIR=208;
	public static final int KW_REPLACE=209;
	public static final int KW_RESTRICT=210;
	public static final int KW_REVOKE=211;
	public static final int KW_RIGHT=212;
	public static final int KW_RLIKE=213;
	public static final int KW_ROLE=214;
	public static final int KW_ROLES=215;
	public static final int KW_ROLLUP=216;
	public static final int KW_ROW=217;
	public static final int KW_ROWS=218;
	public static final int KW_SCHEMA=219;
	public static final int KW_SCHEMAS=220;
	public static final int KW_SELECT=221;
	public static final int KW_SEMI=222;
	public static final int KW_SEQUENCEFILE=223;
	public static final int KW_SERDE=224;
	public static final int KW_SERDEPROPERTIES=225;
	public static final int KW_SET=226;
	public static final int KW_SETS=227;
	public static final int KW_SHARED=228;
	public static final int KW_SHOW=229;
	public static final int KW_SHOW_DATABASE=230;
	public static final int KW_SKEWED=231;
	public static final int KW_SMALLINT=232;
	public static final int KW_SORT=233;
	public static final int KW_SORTED=234;
	public static final int KW_SSL=235;
	public static final int KW_STATISTICS=236;
	public static final int KW_STORED=237;
	public static final int KW_STREAMTABLE=238;
	public static final int KW_STRING=239;
	public static final int KW_STRUCT=240;
	public static final int KW_TABLE=241;
	public static final int KW_TABLES=242;
	public static final int KW_TABLESAMPLE=243;
	public static final int KW_TBLPROPERTIES=244;
	public static final int KW_TEMPORARY=245;
	public static final int KW_TERMINATED=246;
	public static final int KW_TEXTFILE=247;
	public static final int KW_THEN=248;
	public static final int KW_TIMESTAMP=249;
	public static final int KW_TINYINT=250;
	public static final int KW_TO=251;
	public static final int KW_TOUCH=252;
	public static final int KW_TRANSACTIONS=253;
	public static final int KW_TRANSFORM=254;
	public static final int KW_TRIGGER=255;
	public static final int KW_TRUE=256;
	public static final int KW_TRUNCATE=257;
	public static final int KW_UNARCHIVE=258;
	public static final int KW_UNBOUNDED=259;
	public static final int KW_UNDO=260;
	public static final int KW_UNION=261;
	public static final int KW_UNIONTYPE=262;
	public static final int KW_UNIQUEJOIN=263;
	public static final int KW_UNLOCK=264;
	public static final int KW_UNSET=265;
	public static final int KW_UNSIGNED=266;
	public static final int KW_UPDATE=267;
	public static final int KW_USE=268;
	public static final int KW_USER=269;
	public static final int KW_USING=270;
	public static final int KW_UTC=271;
	public static final int KW_UTCTIMESTAMP=272;
	public static final int KW_VALUE_TYPE=273;
	public static final int KW_VARCHAR=274;
	public static final int KW_VIEW=275;
	public static final int KW_WHEN=276;
	public static final int KW_WHERE=277;
	public static final int KW_WHILE=278;
	public static final int KW_WINDOW=279;
	public static final int KW_WITH=280;
	public static final int LCURLY=281;
	public static final int LESSTHAN=282;
	public static final int LESSTHANOREQUALTO=283;
	public static final int LPAREN=284;
	public static final int LSQUARE=285;
	public static final int Letter=286;
	public static final int MINUS=287;
	public static final int MOD=288;
	public static final int NOTEQUAL=289;
	public static final int Number=290;
	public static final int PLUS=291;
	public static final int QUESTION=292;
	public static final int QuotedIdentifier=293;
	public static final int RCURLY=294;
	public static final int RPAREN=295;
	public static final int RSQUARE=296;
	public static final int RegexComponent=297;
	public static final int SEMICOLON=298;
	public static final int STAR=299;
	public static final int SmallintLiteral=300;
	public static final int StringLiteral=301;
	public static final int TILDE=302;
	public static final int TinyintLiteral=303;
	public static final int WS=304;
	public static final int TOK_ALIASLIST=580;
	public static final int TOK_ALLCOLREF=581;
	public static final int TOK_ALTERDATABASE_OWNER=582;
	public static final int TOK_ALTERDATABASE_PROPERTIES=583;
	public static final int TOK_ALTERINDEX_PROPERTIES=584;
	public static final int TOK_ALTERINDEX_REBUILD=585;
	public static final int TOK_ALTERTABLE_ADDCOLS=586;
	public static final int TOK_ALTERTABLE_ADDPARTS=587;
	public static final int TOK_ALTERTABLE_ARCHIVE=588;
	public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=589;
	public static final int TOK_ALTERTABLE_CLUSTER_SORT=590;
	public static final int TOK_ALTERTABLE_DROPPARTS=591;
	public static final int TOK_ALTERTABLE_FILEFORMAT=592;
	public static final int TOK_ALTERTABLE_LOCATION=593;
	public static final int TOK_ALTERTABLE_MERGEFILES=594;
	public static final int TOK_ALTERTABLE_PARTCOLTYPE=595;
	public static final int TOK_ALTERTABLE_PARTITION=596;
	public static final int TOK_ALTERTABLE_PROPERTIES=597;
	public static final int TOK_ALTERTABLE_PROTECTMODE=598;
	public static final int TOK_ALTERTABLE_RENAME=599;
	public static final int TOK_ALTERTABLE_RENAMECOL=600;
	public static final int TOK_ALTERTABLE_RENAMEPART=601;
	public static final int TOK_ALTERTABLE_REPLACECOLS=602;
	public static final int TOK_ALTERTABLE_SERDEPROPERTIES=603;
	public static final int TOK_ALTERTABLE_SERIALIZER=604;
	public static final int TOK_ALTERTABLE_SKEWED=605;
	public static final int TOK_ALTERTABLE_TOUCH=606;
	public static final int TOK_ALTERTABLE_UNARCHIVE=607;
	public static final int TOK_ALTERTBLPART_SKEWED_LOCATION=608;
	public static final int TOK_ALTERVIEW_ADDPARTS=609;
	public static final int TOK_ALTERVIEW_AS=610;
	public static final int TOK_ALTERVIEW_DROPPARTS=611;
	public static final int TOK_ALTERVIEW_PROPERTIES=612;
	public static final int TOK_ALTERVIEW_RENAME=613;
	public static final int TOK_ANALYZE=614;
	public static final int TOK_ARCHIVE=615;
	public static final int TOK_BIGINT=616;
	public static final int TOK_BINARY=617;
	public static final int TOK_BOOLEAN=618;
	public static final int TOK_CASCADE=619;
	public static final int TOK_CHAR=620;
	public static final int TOK_CHARSETLITERAL=621;
	public static final int TOK_CLUSTERBY=622;
	public static final int TOK_COLTYPELIST=623;
	public static final int TOK_COMPACT=624;
	public static final int TOK_CREATEDATABASE=625;
	public static final int TOK_CREATEFUNCTION=626;
	public static final int TOK_CREATEINDEX=627;
	public static final int TOK_CREATEINDEX_INDEXTBLNAME=628;
	public static final int TOK_CREATEMACRO=629;
	public static final int TOK_CREATEROLE=630;
	public static final int TOK_CREATETABLE=631;
	public static final int TOK_CREATEVIEW=632;
	public static final int TOK_CROSSJOIN=633;
	public static final int TOK_CTE=634;
	public static final int TOK_CUBE_GROUPBY=635;
	public static final int TOK_DATABASECOMMENT=636;
	public static final int TOK_DATABASELOCATION=637;
	public static final int TOK_DATABASEPROPERTIES=638;
	public static final int TOK_DATE=639;
	public static final int TOK_DATELITERAL=640;
	public static final int TOK_DATETIME=641;
	public static final int TOK_DBPROPLIST=642;
	public static final int TOK_DB_TYPE=643;
	public static final int TOK_DECIMAL=644;
	public static final int TOK_DEFERRED_REBUILDINDEX=645;
	public static final int TOK_DESCDATABASE=646;
	public static final int TOK_DESCFUNCTION=647;
	public static final int TOK_DESCTABLE=648;
	public static final int TOK_DESTINATION=649;
	public static final int TOK_DIR=650;
	public static final int TOK_DISABLE=651;
	public static final int TOK_DISTRIBUTEBY=652;
	public static final int TOK_DOUBLE=653;
	public static final int TOK_DROPDATABASE=654;
	public static final int TOK_DROPFUNCTION=655;
	public static final int TOK_DROPINDEX=656;
	public static final int TOK_DROPMACRO=657;
	public static final int TOK_DROPROLE=658;
	public static final int TOK_DROPTABLE=659;
	public static final int TOK_DROPTABLE_PROPERTIES=660;
	public static final int TOK_DROPVIEW=661;
	public static final int TOK_DROPVIEW_PROPERTIES=662;
	public static final int TOK_ENABLE=663;
	public static final int TOK_EXCHANGEPARTITION=664;
	public static final int TOK_EXPLAIN=665;
	public static final int TOK_EXPLIST=666;
	public static final int TOK_EXPORT=667;
	public static final int TOK_FALSE=668;
	public static final int TOK_FILE=669;
	public static final int TOK_FILEFORMAT_GENERIC=670;
	public static final int TOK_FLOAT=671;
	public static final int TOK_FROM=672;
	public static final int TOK_FULLOUTERJOIN=673;
	public static final int TOK_FUNCTION=674;
	public static final int TOK_FUNCTIONDI=675;
	public static final int TOK_FUNCTIONSTAR=676;
	public static final int TOK_GRANT=677;
	public static final int TOK_GRANT_ROLE=678;
	public static final int TOK_GRANT_WITH_ADMIN_OPTION=679;
	public static final int TOK_GRANT_WITH_OPTION=680;
	public static final int TOK_GROUP=681;
	public static final int TOK_GROUPBY=682;
	public static final int TOK_GROUPING_SETS=683;
	public static final int TOK_GROUPING_SETS_EXPRESSION=684;
	public static final int TOK_HAVING=685;
	public static final int TOK_HINT=686;
	public static final int TOK_HINTARGLIST=687;
	public static final int TOK_HINTLIST=688;
	public static final int TOK_HOLD_DDLTIME=689;
	public static final int TOK_IFEXISTS=690;
	public static final int TOK_IFNOTEXISTS=691;
	public static final int TOK_IGNOREPROTECTION=692;
	public static final int TOK_IMPORT=693;
	public static final int TOK_INDEXCOMMENT=694;
	public static final int TOK_INDEXPROPERTIES=695;
	public static final int TOK_INDEXPROPLIST=696;
	public static final int TOK_INSERT=697;
	public static final int TOK_INSERT_INTO=698;
	public static final int TOK_INT=699;
	public static final int TOK_ISNOTNULL=700;
	public static final int TOK_ISNULL=701;
	public static final int TOK_JAR=702;
	public static final int TOK_JOIN=703;
	public static final int TOK_LATERAL_VIEW=704;
	public static final int TOK_LATERAL_VIEW_OUTER=705;
	public static final int TOK_LEFTOUTERJOIN=706;
	public static final int TOK_LEFTSEMIJOIN=707;
	public static final int TOK_LENGTH=708;
	public static final int TOK_LIKETABLE=709;
	public static final int TOK_LIMIT=710;
	public static final int TOK_LIST=711;
	public static final int TOK_LOAD=712;
	public static final int TOK_LOCAL_DIR=713;
	public static final int TOK_LOCKDB=714;
	public static final int TOK_LOCKTABLE=715;
	public static final int TOK_MAP=716;
	public static final int TOK_MAPJOIN=717;
	public static final int TOK_MSCK=718;
	public static final int TOK_NOT_CLUSTERED=719;
	public static final int TOK_NOT_SORTED=720;
	public static final int TOK_NO_DROP=721;
	public static final int TOK_NULL=722;
	public static final int TOK_OFFLINE=723;
	public static final int TOK_OP_ADD=724;
	public static final int TOK_OP_AND=725;
	public static final int TOK_OP_BITAND=726;
	public static final int TOK_OP_BITNOT=727;
	public static final int TOK_OP_BITOR=728;
	public static final int TOK_OP_BITXOR=729;
	public static final int TOK_OP_DIV=730;
	public static final int TOK_OP_EQ=731;
	public static final int TOK_OP_GE=732;
	public static final int TOK_OP_GT=733;
	public static final int TOK_OP_LE=734;
	public static final int TOK_OP_LIKE=735;
	public static final int TOK_OP_LT=736;
	public static final int TOK_OP_MOD=737;
	public static final int TOK_OP_MUL=738;
	public static final int TOK_OP_NE=739;
	public static final int TOK_OP_NOT=740;
	public static final int TOK_OP_OR=741;
	public static final int TOK_OP_SUB=742;
	public static final int TOK_ORDERBY=743;
	public static final int TOK_ORREPLACE=744;
	public static final int TOK_PARTITIONINGSPEC=745;
	public static final int TOK_PARTITIONLOCATION=746;
	public static final int TOK_PARTSPEC=747;
	public static final int TOK_PARTVAL=748;
	public static final int TOK_PERCENT=749;
	public static final int TOK_PRINCIPAL_NAME=750;
	public static final int TOK_PRIVILEGE=751;
	public static final int TOK_PRIVILEGE_LIST=752;
	public static final int TOK_PRIV_ALL=753;
	public static final int TOK_PRIV_ALTER_DATA=754;
	public static final int TOK_PRIV_ALTER_METADATA=755;
	public static final int TOK_PRIV_CREATE=756;
	public static final int TOK_PRIV_DELETE=757;
	public static final int TOK_PRIV_DROP=758;
	public static final int TOK_PRIV_INDEX=759;
	public static final int TOK_PRIV_INSERT=760;
	public static final int TOK_PRIV_LOCK=761;
	public static final int TOK_PRIV_OBJECT=762;
	public static final int TOK_PRIV_OBJECT_COL=763;
	public static final int TOK_PRIV_SELECT=764;
	public static final int TOK_PRIV_SHOW_DATABASE=765;
	public static final int TOK_PTBLFUNCTION=766;
	public static final int TOK_QUERY=767;
	public static final int TOK_READONLY=768;
	public static final int TOK_RECORDREADER=769;
	public static final int TOK_RECORDWRITER=770;
	public static final int TOK_RESOURCE_ALL=771;
	public static final int TOK_RESOURCE_LIST=772;
	public static final int TOK_RESOURCE_URI=773;
	public static final int TOK_RESTRICT=774;
	public static final int TOK_REVOKE=775;
	public static final int TOK_REVOKE_ROLE=776;
	public static final int TOK_RIGHTOUTERJOIN=777;
	public static final int TOK_ROLE=778;
	public static final int TOK_ROLLUP_GROUPBY=779;
	public static final int TOK_ROWCOUNT=780;
	public static final int TOK_SELECT=781;
	public static final int TOK_SELECTDI=782;
	public static final int TOK_SELEXPR=783;
	public static final int TOK_SERDE=784;
	public static final int TOK_SERDENAME=785;
	public static final int TOK_SERDEPROPS=786;
	public static final int TOK_SHOWCOLUMNS=787;
	public static final int TOK_SHOWDATABASES=788;
	public static final int TOK_SHOWDBLOCKS=789;
	public static final int TOK_SHOWFUNCTIONS=790;
	public static final int TOK_SHOWINDEXES=791;
	public static final int TOK_SHOWLOCKS=792;
	public static final int TOK_SHOWPARTITIONS=793;
	public static final int TOK_SHOWTABLES=794;
	public static final int TOK_SHOW_COMPACTIONS=795;
	public static final int TOK_SHOW_CREATETABLE=796;
	public static final int TOK_SHOW_GRANT=797;
	public static final int TOK_SHOW_ROLES=798;
	public static final int TOK_SHOW_ROLE_GRANT=799;
	public static final int TOK_SHOW_ROLE_PRINCIPALS=800;
	public static final int TOK_SHOW_SET_ROLE=801;
	public static final int TOK_SHOW_TABLESTATUS=802;
	public static final int TOK_SHOW_TBLPROPERTIES=803;
	public static final int TOK_SHOW_TRANSACTIONS=804;
	public static final int TOK_SKEWED_LOCATIONS=805;
	public static final int TOK_SKEWED_LOCATION_LIST=806;
	public static final int TOK_SKEWED_LOCATION_MAP=807;
	public static final int TOK_SMALLINT=808;
	public static final int TOK_SORTBY=809;
	public static final int TOK_STORAGEHANDLER=810;
	public static final int TOK_STOREDASDIRS=811;
	public static final int TOK_STREAMTABLE=812;
	public static final int TOK_STRING=813;
	public static final int TOK_STRINGLITERALSEQUENCE=814;
	public static final int TOK_STRUCT=815;
	public static final int TOK_SUBQUERY=816;
	public static final int TOK_SUBQUERY_EXPR=817;
	public static final int TOK_SUBQUERY_OP=818;
	public static final int TOK_SUBQUERY_OP_NOTEXISTS=819;
	public static final int TOK_SUBQUERY_OP_NOTIN=820;
	public static final int TOK_SWITCHDATABASE=821;
	public static final int TOK_TAB=822;
	public static final int TOK_TABALIAS=823;
	public static final int TOK_TABCOL=824;
	public static final int TOK_TABCOLLIST=825;
	public static final int TOK_TABCOLNAME=826;
	public static final int TOK_TABCOLVALUE=827;
	public static final int TOK_TABCOLVALUES=828;
	public static final int TOK_TABCOLVALUE_PAIR=829;
	public static final int TOK_TABLEBUCKETS=830;
	public static final int TOK_TABLEBUCKETSAMPLE=831;
	public static final int TOK_TABLECOMMENT=832;
	public static final int TOK_TABLEFILEFORMAT=833;
	public static final int TOK_TABLELOCATION=834;
	public static final int TOK_TABLEPARTCOLS=835;
	public static final int TOK_TABLEPROPERTIES=836;
	public static final int TOK_TABLEPROPERTY=837;
	public static final int TOK_TABLEPROPLIST=838;
	public static final int TOK_TABLEROWFORMAT=839;
	public static final int TOK_TABLEROWFORMATCOLLITEMS=840;
	public static final int TOK_TABLEROWFORMATFIELD=841;
	public static final int TOK_TABLEROWFORMATLINES=842;
	public static final int TOK_TABLEROWFORMATMAPKEYS=843;
	public static final int TOK_TABLEROWFORMATNULL=844;
	public static final int TOK_TABLESERIALIZER=845;
	public static final int TOK_TABLESKEWED=846;
	public static final int TOK_TABLESPLITSAMPLE=847;
	public static final int TOK_TABLE_OR_COL=848;
	public static final int TOK_TABLE_PARTITION=849;
	public static final int TOK_TABLE_TYPE=850;
	public static final int TOK_TABNAME=851;
	public static final int TOK_TABREF=852;
	public static final int TOK_TABSORTCOLNAMEASC=853;
	public static final int TOK_TABSORTCOLNAMEDESC=854;
	public static final int TOK_TABSRC=855;
	public static final int TOK_TABTYPE=856;
	public static final int TOK_TBLORCFILE=857;
	public static final int TOK_TBLPARQUETFILE=858;
	public static final int TOK_TBLRCFILE=859;
	public static final int TOK_TBLSEQUENCEFILE=860;
	public static final int TOK_TBLTEXTFILE=861;
	public static final int TOK_TEMPORARY=862;
	public static final int TOK_TIMESTAMP=863;
	public static final int TOK_TINYINT=864;
	public static final int TOK_TMP_FILE=865;
	public static final int TOK_TRANSFORM=866;
	public static final int TOK_TRUE=867;
	public static final int TOK_TRUNCATETABLE=868;
	public static final int TOK_UNION=869;
	public static final int TOK_UNIONTYPE=870;
	public static final int TOK_UNIQUEJOIN=871;
	public static final int TOK_UNLOCKDB=872;
	public static final int TOK_UNLOCKTABLE=873;
	public static final int TOK_USER=874;
	public static final int TOK_USERSCRIPTCOLNAMES=875;
	public static final int TOK_USERSCRIPTCOLSCHEMA=876;
	public static final int TOK_VARCHAR=877;
	public static final int TOK_VIEWPARTCOLS=878;
	public static final int TOK_WHERE=879;
	public static final int TOK_WINDOWDEF=880;
	public static final int TOK_WINDOWRANGE=881;
	public static final int TOK_WINDOWSPEC=882;
	public static final int TOK_WINDOWVALUES=883;

	// delegates
	public HiveParser_SelectClauseParser gSelectClauseParser;
	public HiveParser_FromClauseParser gFromClauseParser;
	public HiveParser_IdentifiersParser gIdentifiersParser;
	public Parser[] getDelegates() {
		return new Parser[] {gSelectClauseParser, gFromClauseParser, gIdentifiersParser};
	}

	// delegators


	public HiveParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public HiveParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		gSelectClauseParser = new HiveParser_SelectClauseParser(input, state, this);
		gFromClauseParser = new HiveParser_FromClauseParser(input, state, this);
		gIdentifiersParser = new HiveParser_IdentifiersParser(input, state, this);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
		gSelectClauseParser.setTreeAdaptor(this.adaptor);gFromClauseParser.setTreeAdaptor(this.adaptor);gIdentifiersParser.setTreeAdaptor(this.adaptor);
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return HiveParser.tokenNames; }
	@Override public String getGrammarFileName() { return "D:\\temp\\antlr\\HiveParser.g"; }


	  ArrayList<ParseError> errors = new ArrayList<ParseError>();
	  Stack msgs = new Stack<String>();

	  private static HashMap<String, String> xlateMap;
	  static {
	    xlateMap = new HashMap<String, String>();

	    // Keywords
	    xlateMap.put("KW_TRUE", "TRUE");
	    xlateMap.put("KW_FALSE", "FALSE");
	    xlateMap.put("KW_ALL", "ALL");
	    xlateMap.put("KW_NONE", "NONE");
	    xlateMap.put("KW_DEFAULT", "DEFAULT");
	    xlateMap.put("KW_AND", "AND");
	    xlateMap.put("KW_OR", "OR");
	    xlateMap.put("KW_NOT", "NOT");
	    xlateMap.put("KW_LIKE", "LIKE");

	    xlateMap.put("KW_ASC", "ASC");
	    xlateMap.put("KW_DESC", "DESC");
	    xlateMap.put("KW_ORDER", "ORDER");
	    xlateMap.put("KW_BY", "BY");
	    xlateMap.put("KW_GROUP", "GROUP");
	    xlateMap.put("KW_WHERE", "WHERE");
	    xlateMap.put("KW_FROM", "FROM");
	    xlateMap.put("KW_AS", "AS");
	    xlateMap.put("KW_SELECT", "SELECT");
	    xlateMap.put("KW_DISTINCT", "DISTINCT");
	    xlateMap.put("KW_INSERT", "INSERT");
	    xlateMap.put("KW_OVERWRITE", "OVERWRITE");
	    xlateMap.put("KW_OUTER", "OUTER");
	    xlateMap.put("KW_JOIN", "JOIN");
	    xlateMap.put("KW_LEFT", "LEFT");
	    xlateMap.put("KW_RIGHT", "RIGHT");
	    xlateMap.put("KW_FULL", "FULL");
	    xlateMap.put("KW_ON", "ON");
	    xlateMap.put("KW_PARTITION", "PARTITION");
	    xlateMap.put("KW_PARTITIONS", "PARTITIONS");
	    xlateMap.put("KW_TABLE", "TABLE");
	    xlateMap.put("KW_TABLES", "TABLES");
	    xlateMap.put("KW_TBLPROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_SHOW", "SHOW");
	    xlateMap.put("KW_MSCK", "MSCK");
	    xlateMap.put("KW_DIRECTORY", "DIRECTORY");
	    xlateMap.put("KW_LOCAL", "LOCAL");
	    xlateMap.put("KW_TRANSFORM", "TRANSFORM");
	    xlateMap.put("KW_USING", "USING");
	    xlateMap.put("KW_CLUSTER", "CLUSTER");
	    xlateMap.put("KW_DISTRIBUTE", "DISTRIBUTE");
	    xlateMap.put("KW_SORT", "SORT");
	    xlateMap.put("KW_UNION", "UNION");
	    xlateMap.put("KW_LOAD", "LOAD");
	    xlateMap.put("KW_DATA", "DATA");
	    xlateMap.put("KW_INPATH", "INPATH");
	    xlateMap.put("KW_IS", "IS");
	    xlateMap.put("KW_NULL", "NULL");
	    xlateMap.put("KW_CREATE", "CREATE");
	    xlateMap.put("KW_EXTERNAL", "EXTERNAL");
	    xlateMap.put("KW_ALTER", "ALTER");
	    xlateMap.put("KW_DESCRIBE", "DESCRIBE");
	    xlateMap.put("KW_DROP", "DROP");
	    xlateMap.put("KW_RENAME", "RENAME");
	    xlateMap.put("KW_TO", "TO");
	    xlateMap.put("KW_COMMENT", "COMMENT");
	    xlateMap.put("KW_BOOLEAN", "BOOLEAN");
	    xlateMap.put("KW_TINYINT", "TINYINT");
	    xlateMap.put("KW_SMALLINT", "SMALLINT");
	    xlateMap.put("KW_INT", "INT");
	    xlateMap.put("KW_BIGINT", "BIGINT");
	    xlateMap.put("KW_FLOAT", "FLOAT");
	    xlateMap.put("KW_DOUBLE", "DOUBLE");
	    xlateMap.put("KW_DATE", "DATE");
	    xlateMap.put("KW_DATETIME", "DATETIME");
	    xlateMap.put("KW_TIMESTAMP", "TIMESTAMP");
	    xlateMap.put("KW_STRING", "STRING");
	    xlateMap.put("KW_BINARY", "BINARY");
	    xlateMap.put("KW_ARRAY", "ARRAY");
	    xlateMap.put("KW_MAP", "MAP");
	    xlateMap.put("KW_REDUCE", "REDUCE");
	    xlateMap.put("KW_PARTITIONED", "PARTITIONED");
	    xlateMap.put("KW_CLUSTERED", "CLUSTERED");
	    xlateMap.put("KW_SORTED", "SORTED");
	    xlateMap.put("KW_INTO", "INTO");
	    xlateMap.put("KW_BUCKETS", "BUCKETS");
	    xlateMap.put("KW_ROW", "ROW");
	    xlateMap.put("KW_FORMAT", "FORMAT");
	    xlateMap.put("KW_DELIMITED", "DELIMITED");
	    xlateMap.put("KW_FIELDS", "FIELDS");
	    xlateMap.put("KW_TERMINATED", "TERMINATED");
	    xlateMap.put("KW_COLLECTION", "COLLECTION");
	    xlateMap.put("KW_ITEMS", "ITEMS");
	    xlateMap.put("KW_KEYS", "KEYS");
	    xlateMap.put("KW_KEY_TYPE", "$KEY$");
	    xlateMap.put("KW_LINES", "LINES");
	    xlateMap.put("KW_STORED", "STORED");
	    xlateMap.put("KW_SEQUENCEFILE", "SEQUENCEFILE");
	    xlateMap.put("KW_TEXTFILE", "TEXTFILE");
	    xlateMap.put("KW_INPUTFORMAT", "INPUTFORMAT");
	    xlateMap.put("KW_OUTPUTFORMAT", "OUTPUTFORMAT");
	    xlateMap.put("KW_LOCATION", "LOCATION");
	    xlateMap.put("KW_TABLESAMPLE", "TABLESAMPLE");
	    xlateMap.put("KW_BUCKET", "BUCKET");
	    xlateMap.put("KW_OUT", "OUT");
	    xlateMap.put("KW_OF", "OF");
	    xlateMap.put("KW_CAST", "CAST");
	    xlateMap.put("KW_ADD", "ADD");
	    xlateMap.put("KW_REPLACE", "REPLACE");
	    xlateMap.put("KW_COLUMNS", "COLUMNS");
	    xlateMap.put("KW_RLIKE", "RLIKE");
	    xlateMap.put("KW_REGEXP", "REGEXP");
	    xlateMap.put("KW_TEMPORARY", "TEMPORARY");
	    xlateMap.put("KW_FUNCTION", "FUNCTION");
	    xlateMap.put("KW_EXPLAIN", "EXPLAIN");
	    xlateMap.put("KW_EXTENDED", "EXTENDED");
	    xlateMap.put("KW_SERDE", "SERDE");
	    xlateMap.put("KW_WITH", "WITH");
	    xlateMap.put("KW_SERDEPROPERTIES", "SERDEPROPERTIES");
	    xlateMap.put("KW_LIMIT", "LIMIT");
	    xlateMap.put("KW_SET", "SET");
	    xlateMap.put("KW_PROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_VALUE_TYPE", "$VALUE$");
	    xlateMap.put("KW_ELEM_TYPE", "$ELEM$");
	    xlateMap.put("KW_DEFINED", "DEFINED");

	    // Operators
	    xlateMap.put("DOT", ".");
	    xlateMap.put("COLON", ":");
	    xlateMap.put("COMMA", ",");
	    xlateMap.put("SEMICOLON", ");");

	    xlateMap.put("LPAREN", "(");
	    xlateMap.put("RPAREN", ")");
	    xlateMap.put("LSQUARE", "[");
	    xlateMap.put("RSQUARE", "]");

	    xlateMap.put("EQUAL", "=");
	    xlateMap.put("NOTEQUAL", "<>");
	    xlateMap.put("EQUAL_NS", "<=>");
	    xlateMap.put("LESSTHANOREQUALTO", "<=");
	    xlateMap.put("LESSTHAN", "<");
	    xlateMap.put("GREATERTHANOREQUALTO", ">=");
	    xlateMap.put("GREATERTHAN", ">");

	    xlateMap.put("DIVIDE", "/");
	    xlateMap.put("PLUS", "+");
	    xlateMap.put("MINUS", "-");
	    xlateMap.put("STAR", "*");
	    xlateMap.put("MOD", "%");

	    xlateMap.put("AMPERSAND", "&");
	    xlateMap.put("TILDE", "~");
	    xlateMap.put("BITWISEOR", "|");
	    xlateMap.put("BITWISEXOR", "^");
	    xlateMap.put("CharSetLiteral", "\\'");
	  }

	  public static Collection<String> getKeywords() {
	    return xlateMap.values();
	  }

	  private static String xlate(String name) {

	    String ret = xlateMap.get(name);
	    if (ret == null) {
	      ret = name;
	    }

	    return ret;
	  }

	  @Override
	  public Object recoverFromMismatchedSet(IntStream input,
	      RecognitionException re, BitSet follow) throws RecognitionException {
	    throw re;
	  }

	  @Override
	  public void displayRecognitionError(String[] tokenNames,
	      RecognitionException e) {
	    errors.add(new ParseError(this, e, tokenNames));
	  }

	  @Override
	  public String getErrorHeader(RecognitionException e) {
	    String header = null;
	    if (e.charPositionInLine < 0 && input.LT(-1) != null) {
	      Token t = input.LT(-1);
	      header = "line " + t.getLine() + ":" + t.getCharPositionInLine();
	    } else {
	      header = super.getErrorHeader(e);
	    }

	    return header;
	  }
	  
	  @Override
	  public String getErrorMessage(RecognitionException e, String[] tokenNames) {
	    String msg = null;

	    // Translate the token names to something that the user can understand
	    String[] xlateNames = new String[tokenNames.length];
	    for (int i = 0; i < tokenNames.length; ++i) {
	      xlateNames[i] = HiveParser.xlate(tokenNames[i]);
	    }

	    if (e instanceof NoViableAltException) {
	      @SuppressWarnings("unused")
	      NoViableAltException nvae = (NoViableAltException) e;
	      // for development, can add
	      // "decision=<<"+nvae.grammarDecisionDescription+">>"
	      // and "(decision="+nvae.decisionNumber+") and
	      // "state "+nvae.stateNumber
	      msg = "cannot recognize input near"
	              + (input.LT(1) != null ? " " + getTokenErrorDisplay(input.LT(1)) : "")
	              + (input.LT(2) != null ? " " + getTokenErrorDisplay(input.LT(2)) : "")
	              + (input.LT(3) != null ? " " + getTokenErrorDisplay(input.LT(3)) : "");
	    } else if (e instanceof MismatchedTokenException) {
	      MismatchedTokenException mte = (MismatchedTokenException) e;
	      msg = super.getErrorMessage(e, xlateNames) + (input.LT(-1) == null ? "":" near '" + input.LT(-1).getText()) + "'";
	    } else if (e instanceof FailedPredicateException) {
	      FailedPredicateException fpe = (FailedPredicateException) e;
	      msg = "Failed to recognize predicate '" + fpe.token.getText() + "'. Failed rule: '" + fpe.ruleName + "'";
	    } else {
	      msg = super.getErrorMessage(e, xlateNames);
	    }

	    if (msgs.size() > 0) {
	      msg = msg + " in " + msgs.peek();
	    }
	    return msg;
	  }
	  
	  public void pushMsg(String msg, RecognizerSharedState state) {
	    // ANTLR generated code does not wrap the @init code wit this backtracking check,
	    //  even if the matching @after has it. If we have parser rules with that are doing
	    // some lookahead with syntactic predicates this can cause the push() and pop() calls
	    // to become unbalanced, so make sure both push/pop check the backtracking state.
	    if (state.backtracking == 0) {
	      msgs.push(msg);
	    }
	  }

	  public void popMsg(RecognizerSharedState state) {
	    if (state.backtracking == 0) {
	      msgs.pop();
	    }
	  }

	  // counter to generate unique union aliases
	  private int aliasCounter;
	  
	  private String generateUnionAlias() {
	    return "_u" + (++aliasCounter);
	  }


	public static class statement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// D:\\temp\\antlr\\HiveParser.g:611:1: statement : ( explainStatement EOF | execStatement EOF );
	public final HiveParser.statement_return statement() throws RecognitionException {
		HiveParser.statement_return retval = new HiveParser.statement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EOF2=null;
		Token EOF4=null;
		ParserRuleReturnScope explainStatement1 =null;
		ParserRuleReturnScope execStatement3 =null;

		CommonTree EOF2_tree=null;
		CommonTree EOF4_tree=null;

		try {
			// D:\\temp\\antlr\\HiveParser.g:612:2: ( explainStatement EOF | execStatement EOF )
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==KW_EXPLAIN) ) {
				alt1=1;
			}
			else if ( ((LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_CREATE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DROP||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MSCK||LA1_0==KW_REDUCE||LA1_0==KW_REVOKE||LA1_0==KW_SELECT||LA1_0==KW_SET||LA1_0==KW_SHOW||LA1_0==KW_TRUNCATE||LA1_0==KW_UNLOCK||LA1_0==KW_USE||LA1_0==KW_WITH) ) {
				alt1=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}

			switch (alt1) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:612:4: explainStatement EOF
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_explainStatement_in_statement995);
					explainStatement1=explainStatement();
					state._fsp--;

					adaptor.addChild(root_0, explainStatement1.getTree());

					EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement997); 
					EOF2_tree = (CommonTree)adaptor.create(EOF2);
					adaptor.addChild(root_0, EOF2_tree);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:613:4: execStatement EOF
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_execStatement_in_statement1002);
					execStatement3=execStatement();
					state._fsp--;

					adaptor.addChild(root_0, execStatement3.getTree());

					EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement1004); 
					EOF4_tree = (CommonTree)adaptor.create(EOF4);
					adaptor.addChild(root_0, EOF4_tree);

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class explainStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "explainStatement"
	// D:\\temp\\antlr\\HiveParser.g:616:1: explainStatement : KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY |explainOptions= KW_LOGICAL )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) ;
	public final HiveParser.explainStatement_return explainStatement() throws RecognitionException {
		HiveParser.explainStatement_return retval = new HiveParser.explainStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token explainOptions=null;
		Token KW_EXPLAIN5=null;
		ParserRuleReturnScope execStatement6 =null;

		CommonTree explainOptions_tree=null;
		CommonTree KW_EXPLAIN5_tree=null;
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_DEPENDENCY=new RewriteRuleTokenStream(adaptor,"token KW_DEPENDENCY");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
		RewriteRuleTokenStream stream_KW_LOGICAL=new RewriteRuleTokenStream(adaptor,"token KW_LOGICAL");
		RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");

		 pushMsg("explain statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:619:2: ( KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY |explainOptions= KW_LOGICAL )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) )
			// D:\\temp\\antlr\\HiveParser.g:619:4: KW_EXPLAIN (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY |explainOptions= KW_LOGICAL )? execStatement
			{
			KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement1025);  
			stream_KW_EXPLAIN.add(KW_EXPLAIN5);

			// D:\\temp\\antlr\\HiveParser.g:619:15: (explainOptions= KW_EXTENDED |explainOptions= KW_FORMATTED |explainOptions= KW_DEPENDENCY |explainOptions= KW_LOGICAL )?
			int alt2=5;
			switch ( input.LA(1) ) {
				case KW_EXTENDED:
					{
					alt2=1;
					}
					break;
				case KW_FORMATTED:
					{
					alt2=2;
					}
					break;
				case KW_DEPENDENCY:
					{
					alt2=3;
					}
					break;
				case KW_LOGICAL:
					{
					alt2=4;
					}
					break;
			}
			switch (alt2) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:619:16: explainOptions= KW_EXTENDED
					{
					explainOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainStatement1030);  
					stream_KW_EXTENDED.add(explainOptions);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:619:43: explainOptions= KW_FORMATTED
					{
					explainOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainStatement1034);  
					stream_KW_FORMATTED.add(explainOptions);

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:619:71: explainOptions= KW_DEPENDENCY
					{
					explainOptions=(Token)match(input,KW_DEPENDENCY,FOLLOW_KW_DEPENDENCY_in_explainStatement1038);  
					stream_KW_DEPENDENCY.add(explainOptions);

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:619:100: explainOptions= KW_LOGICAL
					{
					explainOptions=(Token)match(input,KW_LOGICAL,FOLLOW_KW_LOGICAL_in_explainStatement1042);  
					stream_KW_LOGICAL.add(explainOptions);

					}
					break;

			}

			pushFollow(FOLLOW_execStatement_in_explainStatement1046);
			execStatement6=execStatement();
			state._fsp--;

			stream_execStatement.add(execStatement6.getTree());
			// AST REWRITE
			// elements: explainOptions, execStatement
			// token labels: explainOptions
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_explainOptions=new RewriteRuleTokenStream(adaptor,"token explainOptions",explainOptions);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 620:7: -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:620:10: ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);
				adaptor.addChild(root_1, stream_execStatement.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:620:39: ( $explainOptions)?
				if ( stream_explainOptions.hasNext() ) {
					adaptor.addChild(root_1, stream_explainOptions.nextNode());
				}
				stream_explainOptions.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainStatement"


	public static class execStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "execStatement"
	// D:\\temp\\antlr\\HiveParser.g:623:1: execStatement : ( queryStatementExpression[true] | loadStatement | exportStatement | importStatement | ddlStatement );
	public final HiveParser.execStatement_return execStatement() throws RecognitionException {
		HiveParser.execStatement_return retval = new HiveParser.execStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope queryStatementExpression7 =null;
		ParserRuleReturnScope loadStatement8 =null;
		ParserRuleReturnScope exportStatement9 =null;
		ParserRuleReturnScope importStatement10 =null;
		ParserRuleReturnScope ddlStatement11 =null;


		 pushMsg("statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:626:5: ( queryStatementExpression[true] | loadStatement | exportStatement | importStatement | ddlStatement )
			int alt3=5;
			switch ( input.LA(1) ) {
			case KW_FROM:
			case KW_INSERT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_WITH:
				{
				alt3=1;
				}
				break;
			case KW_LOAD:
				{
				alt3=2;
				}
				break;
			case KW_EXPORT:
				{
				alt3=3;
				}
				break;
			case KW_IMPORT:
				{
				alt3=4;
				}
				break;
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_CREATE:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_GRANT:
			case KW_LOCK:
			case KW_MSCK:
			case KW_REVOKE:
			case KW_SET:
			case KW_SHOW:
			case KW_TRUNCATE:
			case KW_UNLOCK:
			case KW_USE:
				{
				alt3=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}
			switch (alt3) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:626:7: queryStatementExpression[true]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_queryStatementExpression_in_execStatement1088);
					queryStatementExpression7=queryStatementExpression(true);
					state._fsp--;

					adaptor.addChild(root_0, queryStatementExpression7.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:627:7: loadStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_loadStatement_in_execStatement1097);
					loadStatement8=loadStatement();
					state._fsp--;

					adaptor.addChild(root_0, loadStatement8.getTree());

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:628:7: exportStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_exportStatement_in_execStatement1105);
					exportStatement9=exportStatement();
					state._fsp--;

					adaptor.addChild(root_0, exportStatement9.getTree());

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:629:7: importStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_importStatement_in_execStatement1113);
					importStatement10=importStatement();
					state._fsp--;

					adaptor.addChild(root_0, importStatement10.getTree());

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:630:7: ddlStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ddlStatement_in_execStatement1121);
					ddlStatement11=ddlStatement();
					state._fsp--;

					adaptor.addChild(root_0, ddlStatement11.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execStatement"


	public static class loadStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "loadStatement"
	// D:\\temp\\antlr\\HiveParser.g:633:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
	public final HiveParser.loadStatement_return loadStatement() throws RecognitionException {
		HiveParser.loadStatement_return retval = new HiveParser.loadStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token islocal=null;
		Token path=null;
		Token isoverwrite=null;
		Token KW_LOAD12=null;
		Token KW_DATA13=null;
		Token KW_INPATH14=null;
		Token KW_INTO15=null;
		Token KW_TABLE16=null;
		ParserRuleReturnScope tab =null;

		CommonTree islocal_tree=null;
		CommonTree path_tree=null;
		CommonTree isoverwrite_tree=null;
		CommonTree KW_LOAD12_tree=null;
		CommonTree KW_DATA13_tree=null;
		CommonTree KW_INPATH14_tree=null;
		CommonTree KW_INTO15_tree=null;
		CommonTree KW_TABLE16_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
		RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("load statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:636:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
			// D:\\temp\\antlr\\HiveParser.g:636:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
			{
			KW_LOAD12=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement1148);  
			stream_KW_LOAD.add(KW_LOAD12);

			KW_DATA13=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement1150);  
			stream_KW_DATA.add(KW_DATA13);

			// D:\\temp\\antlr\\HiveParser.g:636:23: (islocal= KW_LOCAL )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==KW_LOCAL) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:636:24: islocal= KW_LOCAL
					{
					islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement1155);  
					stream_KW_LOCAL.add(islocal);

					}
					break;

			}

			KW_INPATH14=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement1159);  
			stream_KW_INPATH.add(KW_INPATH14);

			// D:\\temp\\antlr\\HiveParser.g:636:53: (path= StringLiteral )
			// D:\\temp\\antlr\\HiveParser.g:636:54: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement1164);  
			stream_StringLiteral.add(path);

			}

			// D:\\temp\\antlr\\HiveParser.g:636:74: (isoverwrite= KW_OVERWRITE )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==KW_OVERWRITE) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:636:75: isoverwrite= KW_OVERWRITE
					{
					isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement1170);  
					stream_KW_OVERWRITE.add(isoverwrite);

					}
					break;

			}

			KW_INTO15=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement1174);  
			stream_KW_INTO.add(KW_INTO15);

			KW_TABLE16=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement1176);  
			stream_KW_TABLE.add(KW_TABLE16);

			// D:\\temp\\antlr\\HiveParser.g:636:119: (tab= tableOrPartition )
			// D:\\temp\\antlr\\HiveParser.g:636:120: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_loadStatement1181);
			tab=tableOrPartition();
			state._fsp--;

			stream_tableOrPartition.add(tab.getTree());
			}

			// AST REWRITE
			// elements: islocal, tab, path, isoverwrite
			// token labels: islocal, isoverwrite, path
			// rule labels: retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
			RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 637:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:637:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:637:31: ( $islocal)?
				if ( stream_islocal.hasNext() ) {
					adaptor.addChild(root_1, stream_islocal.nextNode());
				}
				stream_islocal.reset();

				// D:\\temp\\antlr\\HiveParser.g:637:41: ( $isoverwrite)?
				if ( stream_isoverwrite.hasNext() ) {
					adaptor.addChild(root_1, stream_isoverwrite.nextNode());
				}
				stream_isoverwrite.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loadStatement"


	public static class exportStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exportStatement"
	// D:\\temp\\antlr\\HiveParser.g:640:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) ;
	public final HiveParser.exportStatement_return exportStatement() throws RecognitionException {
		HiveParser.exportStatement_return retval = new HiveParser.exportStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token path=null;
		Token KW_EXPORT17=null;
		Token KW_TABLE18=null;
		Token KW_TO19=null;
		ParserRuleReturnScope tab =null;

		CommonTree path_tree=null;
		CommonTree KW_EXPORT17_tree=null;
		CommonTree KW_TABLE18_tree=null;
		CommonTree KW_TO19_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("export statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:643:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) )
			// D:\\temp\\antlr\\HiveParser.g:643:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral )
			{
			KW_EXPORT17=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement1233);  
			stream_KW_EXPORT.add(KW_EXPORT17);

			KW_TABLE18=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1235);  
			stream_KW_TABLE.add(KW_TABLE18);

			// D:\\temp\\antlr\\HiveParser.g:643:26: (tab= tableOrPartition )
			// D:\\temp\\antlr\\HiveParser.g:643:27: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_exportStatement1240);
			tab=tableOrPartition();
			state._fsp--;

			stream_tableOrPartition.add(tab.getTree());
			}

			KW_TO19=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1243);  
			stream_KW_TO.add(KW_TO19);

			// D:\\temp\\antlr\\HiveParser.g:643:55: (path= StringLiteral )
			// D:\\temp\\antlr\\HiveParser.g:643:56: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1248);  
			stream_StringLiteral.add(path);

			}

			// AST REWRITE
			// elements: tab, path
			// token labels: path
			// rule labels: retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 644:5: -> ^( TOK_EXPORT $tab $path)
			{
				// D:\\temp\\antlr\\HiveParser.g:644:8: ^( TOK_EXPORT $tab $path)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXPORT, "TOK_EXPORT"), root_1);
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_path.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exportStatement"


	public static class importStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "importStatement"
	// D:\\temp\\antlr\\HiveParser.g:647:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
	public final HiveParser.importStatement_return importStatement() throws RecognitionException {
		HiveParser.importStatement_return retval = new HiveParser.importStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ext=null;
		Token path=null;
		Token KW_IMPORT20=null;
		Token KW_TABLE21=null;
		Token KW_FROM22=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope tableLocation23 =null;

		CommonTree ext_tree=null;
		CommonTree path_tree=null;
		CommonTree KW_IMPORT20_tree=null;
		CommonTree KW_TABLE21_tree=null;
		CommonTree KW_FROM22_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");

		 pushMsg("import statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:650:2: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
			// D:\\temp\\antlr\\HiveParser.g:650:4: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
			{
			KW_IMPORT20=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1289);  
			stream_KW_IMPORT.add(KW_IMPORT20);

			// D:\\temp\\antlr\\HiveParser.g:650:14: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==KW_EXTERNAL||LA7_0==KW_TABLE) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:650:15: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
					{
					// D:\\temp\\antlr\\HiveParser.g:650:15: (ext= KW_EXTERNAL )?
					int alt6=2;
					int LA6_0 = input.LA(1);
					if ( (LA6_0==KW_EXTERNAL) ) {
						alt6=1;
					}
					switch (alt6) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:650:16: ext= KW_EXTERNAL
							{
							ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1295);  
							stream_KW_EXTERNAL.add(ext);

							}
							break;

					}

					KW_TABLE21=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1299);  
					stream_KW_TABLE.add(KW_TABLE21);

					// D:\\temp\\antlr\\HiveParser.g:650:43: (tab= tableOrPartition )
					// D:\\temp\\antlr\\HiveParser.g:650:44: tab= tableOrPartition
					{
					pushFollow(FOLLOW_tableOrPartition_in_importStatement1304);
					tab=tableOrPartition();
					state._fsp--;

					stream_tableOrPartition.add(tab.getTree());
					}

					}
					break;

			}

			KW_FROM22=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1309);  
			stream_KW_FROM.add(KW_FROM22);

			// D:\\temp\\antlr\\HiveParser.g:650:76: (path= StringLiteral )
			// D:\\temp\\antlr\\HiveParser.g:650:77: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1314);  
			stream_StringLiteral.add(path);

			}

			// D:\\temp\\antlr\\HiveParser.g:650:97: ( tableLocation )?
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==KW_LOCATION) ) {
				alt8=1;
			}
			switch (alt8) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:650:97: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_importStatement1317);
					tableLocation23=tableLocation();
					state._fsp--;

					stream_tableLocation.add(tableLocation23.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableLocation, tab, path, ext
			// token labels: path, ext
			// rule labels: retval, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 651:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:651:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IMPORT, "TOK_IMPORT"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				// D:\\temp\\antlr\\HiveParser.g:651:28: ( $tab)?
				if ( stream_tab.hasNext() ) {
					adaptor.addChild(root_1, stream_tab.nextTree());
				}
				stream_tab.reset();

				// D:\\temp\\antlr\\HiveParser.g:651:34: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// D:\\temp\\antlr\\HiveParser.g:651:39: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "importStatement"


	public static class ddlStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ddlStatement"
	// D:\\temp\\antlr\\HiveParser.g:654:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole );
	public final HiveParser.ddlStatement_return ddlStatement() throws RecognitionException {
		HiveParser.ddlStatement_return retval = new HiveParser.ddlStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope createDatabaseStatement24 =null;
		ParserRuleReturnScope switchDatabaseStatement25 =null;
		ParserRuleReturnScope dropDatabaseStatement26 =null;
		ParserRuleReturnScope createTableStatement27 =null;
		ParserRuleReturnScope dropTableStatement28 =null;
		ParserRuleReturnScope truncateTableStatement29 =null;
		ParserRuleReturnScope alterStatement30 =null;
		ParserRuleReturnScope descStatement31 =null;
		ParserRuleReturnScope showStatement32 =null;
		ParserRuleReturnScope metastoreCheck33 =null;
		ParserRuleReturnScope createViewStatement34 =null;
		ParserRuleReturnScope dropViewStatement35 =null;
		ParserRuleReturnScope createFunctionStatement36 =null;
		ParserRuleReturnScope createMacroStatement37 =null;
		ParserRuleReturnScope createIndexStatement38 =null;
		ParserRuleReturnScope dropIndexStatement39 =null;
		ParserRuleReturnScope dropFunctionStatement40 =null;
		ParserRuleReturnScope dropMacroStatement41 =null;
		ParserRuleReturnScope analyzeStatement42 =null;
		ParserRuleReturnScope lockStatement43 =null;
		ParserRuleReturnScope unlockStatement44 =null;
		ParserRuleReturnScope lockDatabase45 =null;
		ParserRuleReturnScope unlockDatabase46 =null;
		ParserRuleReturnScope createRoleStatement47 =null;
		ParserRuleReturnScope dropRoleStatement48 =null;
		ParserRuleReturnScope grantPrivileges49 =null;
		ParserRuleReturnScope revokePrivileges50 =null;
		ParserRuleReturnScope showGrants51 =null;
		ParserRuleReturnScope showRoleGrants52 =null;
		ParserRuleReturnScope showRolePrincipals53 =null;
		ParserRuleReturnScope showRoles54 =null;
		ParserRuleReturnScope grantRole55 =null;
		ParserRuleReturnScope revokeRole56 =null;
		ParserRuleReturnScope setRole57 =null;
		ParserRuleReturnScope showCurrentRole58 =null;


		 pushMsg("ddl statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:657:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole )
			int alt9=35;
			alt9 = dfa9.predict(input);
			switch (alt9) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:657:7: createDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement1369);
					createDatabaseStatement24=createDatabaseStatement();
					state._fsp--;

					adaptor.addChild(root_0, createDatabaseStatement24.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:658:7: switchDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement1377);
					switchDatabaseStatement25=switchDatabaseStatement();
					state._fsp--;

					adaptor.addChild(root_0, switchDatabaseStatement25.getTree());

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:659:7: dropDatabaseStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement1385);
					dropDatabaseStatement26=dropDatabaseStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropDatabaseStatement26.getTree());

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:660:7: createTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createTableStatement_in_ddlStatement1393);
					createTableStatement27=createTableStatement();
					state._fsp--;

					adaptor.addChild(root_0, createTableStatement27.getTree());

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:661:7: dropTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropTableStatement_in_ddlStatement1401);
					dropTableStatement28=dropTableStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropTableStatement28.getTree());

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:662:7: truncateTableStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_truncateTableStatement_in_ddlStatement1409);
					truncateTableStatement29=truncateTableStatement();
					state._fsp--;

					adaptor.addChild(root_0, truncateTableStatement29.getTree());

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:663:7: alterStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatement_in_ddlStatement1417);
					alterStatement30=alterStatement();
					state._fsp--;

					adaptor.addChild(root_0, alterStatement30.getTree());

					}
					break;
				case 8 :
					// D:\\temp\\antlr\\HiveParser.g:664:7: descStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_descStatement_in_ddlStatement1425);
					descStatement31=descStatement();
					state._fsp--;

					adaptor.addChild(root_0, descStatement31.getTree());

					}
					break;
				case 9 :
					// D:\\temp\\antlr\\HiveParser.g:665:7: showStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showStatement_in_ddlStatement1433);
					showStatement32=showStatement();
					state._fsp--;

					adaptor.addChild(root_0, showStatement32.getTree());

					}
					break;
				case 10 :
					// D:\\temp\\antlr\\HiveParser.g:666:7: metastoreCheck
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_metastoreCheck_in_ddlStatement1441);
					metastoreCheck33=metastoreCheck();
					state._fsp--;

					adaptor.addChild(root_0, metastoreCheck33.getTree());

					}
					break;
				case 11 :
					// D:\\temp\\antlr\\HiveParser.g:667:7: createViewStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createViewStatement_in_ddlStatement1449);
					createViewStatement34=createViewStatement();
					state._fsp--;

					adaptor.addChild(root_0, createViewStatement34.getTree());

					}
					break;
				case 12 :
					// D:\\temp\\antlr\\HiveParser.g:668:7: dropViewStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropViewStatement_in_ddlStatement1457);
					dropViewStatement35=dropViewStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropViewStatement35.getTree());

					}
					break;
				case 13 :
					// D:\\temp\\antlr\\HiveParser.g:669:7: createFunctionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement1465);
					createFunctionStatement36=createFunctionStatement();
					state._fsp--;

					adaptor.addChild(root_0, createFunctionStatement36.getTree());

					}
					break;
				case 14 :
					// D:\\temp\\antlr\\HiveParser.g:670:7: createMacroStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createMacroStatement_in_ddlStatement1473);
					createMacroStatement37=createMacroStatement();
					state._fsp--;

					adaptor.addChild(root_0, createMacroStatement37.getTree());

					}
					break;
				case 15 :
					// D:\\temp\\antlr\\HiveParser.g:671:7: createIndexStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createIndexStatement_in_ddlStatement1481);
					createIndexStatement38=createIndexStatement();
					state._fsp--;

					adaptor.addChild(root_0, createIndexStatement38.getTree());

					}
					break;
				case 16 :
					// D:\\temp\\antlr\\HiveParser.g:672:7: dropIndexStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement1489);
					dropIndexStatement39=dropIndexStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropIndexStatement39.getTree());

					}
					break;
				case 17 :
					// D:\\temp\\antlr\\HiveParser.g:673:7: dropFunctionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement1497);
					dropFunctionStatement40=dropFunctionStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropFunctionStatement40.getTree());

					}
					break;
				case 18 :
					// D:\\temp\\antlr\\HiveParser.g:674:7: dropMacroStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropMacroStatement_in_ddlStatement1505);
					dropMacroStatement41=dropMacroStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropMacroStatement41.getTree());

					}
					break;
				case 19 :
					// D:\\temp\\antlr\\HiveParser.g:675:7: analyzeStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_analyzeStatement_in_ddlStatement1513);
					analyzeStatement42=analyzeStatement();
					state._fsp--;

					adaptor.addChild(root_0, analyzeStatement42.getTree());

					}
					break;
				case 20 :
					// D:\\temp\\antlr\\HiveParser.g:676:7: lockStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_lockStatement_in_ddlStatement1521);
					lockStatement43=lockStatement();
					state._fsp--;

					adaptor.addChild(root_0, lockStatement43.getTree());

					}
					break;
				case 21 :
					// D:\\temp\\antlr\\HiveParser.g:677:7: unlockStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unlockStatement_in_ddlStatement1529);
					unlockStatement44=unlockStatement();
					state._fsp--;

					adaptor.addChild(root_0, unlockStatement44.getTree());

					}
					break;
				case 22 :
					// D:\\temp\\antlr\\HiveParser.g:678:7: lockDatabase
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_lockDatabase_in_ddlStatement1537);
					lockDatabase45=lockDatabase();
					state._fsp--;

					adaptor.addChild(root_0, lockDatabase45.getTree());

					}
					break;
				case 23 :
					// D:\\temp\\antlr\\HiveParser.g:679:7: unlockDatabase
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unlockDatabase_in_ddlStatement1545);
					unlockDatabase46=unlockDatabase();
					state._fsp--;

					adaptor.addChild(root_0, unlockDatabase46.getTree());

					}
					break;
				case 24 :
					// D:\\temp\\antlr\\HiveParser.g:680:7: createRoleStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_createRoleStatement_in_ddlStatement1553);
					createRoleStatement47=createRoleStatement();
					state._fsp--;

					adaptor.addChild(root_0, createRoleStatement47.getTree());

					}
					break;
				case 25 :
					// D:\\temp\\antlr\\HiveParser.g:681:7: dropRoleStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement1561);
					dropRoleStatement48=dropRoleStatement();
					state._fsp--;

					adaptor.addChild(root_0, dropRoleStatement48.getTree());

					}
					break;
				case 26 :
					// D:\\temp\\antlr\\HiveParser.g:682:7: grantPrivileges
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_grantPrivileges_in_ddlStatement1569);
					grantPrivileges49=grantPrivileges();
					state._fsp--;

					adaptor.addChild(root_0, grantPrivileges49.getTree());

					}
					break;
				case 27 :
					// D:\\temp\\antlr\\HiveParser.g:683:7: revokePrivileges
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_revokePrivileges_in_ddlStatement1577);
					revokePrivileges50=revokePrivileges();
					state._fsp--;

					adaptor.addChild(root_0, revokePrivileges50.getTree());

					}
					break;
				case 28 :
					// D:\\temp\\antlr\\HiveParser.g:684:7: showGrants
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showGrants_in_ddlStatement1585);
					showGrants51=showGrants();
					state._fsp--;

					adaptor.addChild(root_0, showGrants51.getTree());

					}
					break;
				case 29 :
					// D:\\temp\\antlr\\HiveParser.g:685:7: showRoleGrants
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showRoleGrants_in_ddlStatement1593);
					showRoleGrants52=showRoleGrants();
					state._fsp--;

					adaptor.addChild(root_0, showRoleGrants52.getTree());

					}
					break;
				case 30 :
					// D:\\temp\\antlr\\HiveParser.g:686:7: showRolePrincipals
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showRolePrincipals_in_ddlStatement1601);
					showRolePrincipals53=showRolePrincipals();
					state._fsp--;

					adaptor.addChild(root_0, showRolePrincipals53.getTree());

					}
					break;
				case 31 :
					// D:\\temp\\antlr\\HiveParser.g:687:7: showRoles
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showRoles_in_ddlStatement1609);
					showRoles54=showRoles();
					state._fsp--;

					adaptor.addChild(root_0, showRoles54.getTree());

					}
					break;
				case 32 :
					// D:\\temp\\antlr\\HiveParser.g:688:7: grantRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_grantRole_in_ddlStatement1617);
					grantRole55=grantRole();
					state._fsp--;

					adaptor.addChild(root_0, grantRole55.getTree());

					}
					break;
				case 33 :
					// D:\\temp\\antlr\\HiveParser.g:689:7: revokeRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_revokeRole_in_ddlStatement1625);
					revokeRole56=revokeRole();
					state._fsp--;

					adaptor.addChild(root_0, revokeRole56.getTree());

					}
					break;
				case 34 :
					// D:\\temp\\antlr\\HiveParser.g:690:7: setRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_setRole_in_ddlStatement1633);
					setRole57=setRole();
					state._fsp--;

					adaptor.addChild(root_0, setRole57.getTree());

					}
					break;
				case 35 :
					// D:\\temp\\antlr\\HiveParser.g:691:7: showCurrentRole
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_showCurrentRole_in_ddlStatement1641);
					showCurrentRole58=showCurrentRole();
					state._fsp--;

					adaptor.addChild(root_0, showCurrentRole58.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ddlStatement"


	public static class ifExists_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ifExists"
	// D:\\temp\\antlr\\HiveParser.g:694:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
	public final HiveParser.ifExists_return ifExists() throws RecognitionException {
		HiveParser.ifExists_return retval = new HiveParser.ifExists_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IF59=null;
		Token KW_EXISTS60=null;

		CommonTree KW_IF59_tree=null;
		CommonTree KW_EXISTS60_tree=null;
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

		 pushMsg("if exists clause", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:697:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
			// D:\\temp\\antlr\\HiveParser.g:697:7: KW_IF KW_EXISTS
			{
			KW_IF59=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists1668);  
			stream_KW_IF.add(KW_IF59);

			KW_EXISTS60=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists1670);  
			stream_KW_EXISTS.add(KW_EXISTS60);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 698:5: -> ^( TOK_IFEXISTS )
			{
				// D:\\temp\\antlr\\HiveParser.g:698:8: ^( TOK_IFEXISTS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifExists"


	public static class restrictOrCascade_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "restrictOrCascade"
	// D:\\temp\\antlr\\HiveParser.g:701:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
	public final HiveParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
		HiveParser.restrictOrCascade_return retval = new HiveParser.restrictOrCascade_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RESTRICT61=null;
		Token KW_CASCADE62=null;

		CommonTree KW_RESTRICT61_tree=null;
		CommonTree KW_CASCADE62_tree=null;
		RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
		RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

		 pushMsg("restrict or cascade clause", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:704:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==KW_RESTRICT) ) {
				alt10=1;
			}
			else if ( (LA10_0==KW_CASCADE) ) {
				alt10=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 10, 0, input);
				throw nvae;
			}

			switch (alt10) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:704:7: KW_RESTRICT
					{
					KW_RESTRICT61=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade1707);  
					stream_KW_RESTRICT.add(KW_RESTRICT61);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 705:5: -> ^( TOK_RESTRICT )
					{
						// D:\\temp\\antlr\\HiveParser.g:705:8: ^( TOK_RESTRICT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:706:7: KW_CASCADE
					{
					KW_CASCADE62=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade1725);  
					stream_KW_CASCADE.add(KW_CASCADE62);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 707:5: -> ^( TOK_CASCADE )
					{
						// D:\\temp\\antlr\\HiveParser.g:707:8: ^( TOK_CASCADE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CASCADE, "TOK_CASCADE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "restrictOrCascade"


	public static class ifNotExists_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ifNotExists"
	// D:\\temp\\antlr\\HiveParser.g:710:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
	public final HiveParser.ifNotExists_return ifNotExists() throws RecognitionException {
		HiveParser.ifNotExists_return retval = new HiveParser.ifNotExists_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IF63=null;
		Token KW_NOT64=null;
		Token KW_EXISTS65=null;

		CommonTree KW_IF63_tree=null;
		CommonTree KW_NOT64_tree=null;
		CommonTree KW_EXISTS65_tree=null;
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

		 pushMsg("if not exists clause", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:713:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
			// D:\\temp\\antlr\\HiveParser.g:713:7: KW_IF KW_NOT KW_EXISTS
			{
			KW_IF63=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists1762);  
			stream_KW_IF.add(KW_IF63);

			KW_NOT64=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists1764);  
			stream_KW_NOT.add(KW_NOT64);

			KW_EXISTS65=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists1766);  
			stream_KW_EXISTS.add(KW_EXISTS65);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 714:5: -> ^( TOK_IFNOTEXISTS )
			{
				// D:\\temp\\antlr\\HiveParser.g:714:8: ^( TOK_IFNOTEXISTS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifNotExists"


	public static class storedAsDirs_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "storedAsDirs"
	// D:\\temp\\antlr\\HiveParser.g:717:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
	public final HiveParser.storedAsDirs_return storedAsDirs() throws RecognitionException {
		HiveParser.storedAsDirs_return retval = new HiveParser.storedAsDirs_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_STORED66=null;
		Token KW_AS67=null;
		Token KW_DIRECTORIES68=null;

		CommonTree KW_STORED66_tree=null;
		CommonTree KW_AS67_tree=null;
		CommonTree KW_DIRECTORIES68_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
		RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");

		 pushMsg("stored as directories", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:720:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
			// D:\\temp\\antlr\\HiveParser.g:720:7: KW_STORED KW_AS KW_DIRECTORIES
			{
			KW_STORED66=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs1803);  
			stream_KW_STORED.add(KW_STORED66);

			KW_AS67=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs1805);  
			stream_KW_AS.add(KW_AS67);

			KW_DIRECTORIES68=(Token)match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs1807);  
			stream_KW_DIRECTORIES.add(KW_DIRECTORIES68);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 721:5: -> ^( TOK_STOREDASDIRS )
			{
				// D:\\temp\\antlr\\HiveParser.g:721:8: ^( TOK_STOREDASDIRS )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "storedAsDirs"


	public static class orReplace_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "orReplace"
	// D:\\temp\\antlr\\HiveParser.g:724:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
	public final HiveParser.orReplace_return orReplace() throws RecognitionException {
		HiveParser.orReplace_return retval = new HiveParser.orReplace_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_OR69=null;
		Token KW_REPLACE70=null;

		CommonTree KW_OR69_tree=null;
		CommonTree KW_REPLACE70_tree=null;
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

		 pushMsg("or replace clause", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:727:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
			// D:\\temp\\antlr\\HiveParser.g:727:7: KW_OR KW_REPLACE
			{
			KW_OR69=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace1844);  
			stream_KW_OR.add(KW_OR69);

			KW_REPLACE70=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace1846);  
			stream_KW_REPLACE.add(KW_REPLACE70);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 728:5: -> ^( TOK_ORREPLACE )
			{
				// D:\\temp\\antlr\\HiveParser.g:728:8: ^( TOK_ORREPLACE )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orReplace"


	public static class ignoreProtection_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ignoreProtection"
	// D:\\temp\\antlr\\HiveParser.g:731:1: ignoreProtection : KW_IGNORE KW_PROTECTION -> ^( TOK_IGNOREPROTECTION ) ;
	public final HiveParser.ignoreProtection_return ignoreProtection() throws RecognitionException {
		HiveParser.ignoreProtection_return retval = new HiveParser.ignoreProtection_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IGNORE71=null;
		Token KW_PROTECTION72=null;

		CommonTree KW_IGNORE71_tree=null;
		CommonTree KW_PROTECTION72_tree=null;
		RewriteRuleTokenStream stream_KW_PROTECTION=new RewriteRuleTokenStream(adaptor,"token KW_PROTECTION");
		RewriteRuleTokenStream stream_KW_IGNORE=new RewriteRuleTokenStream(adaptor,"token KW_IGNORE");

		 pushMsg("ignore protection clause", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:734:9: ( KW_IGNORE KW_PROTECTION -> ^( TOK_IGNOREPROTECTION ) )
			// D:\\temp\\antlr\\HiveParser.g:734:11: KW_IGNORE KW_PROTECTION
			{
			KW_IGNORE71=(Token)match(input,KW_IGNORE,FOLLOW_KW_IGNORE_in_ignoreProtection1887);  
			stream_KW_IGNORE.add(KW_IGNORE71);

			KW_PROTECTION72=(Token)match(input,KW_PROTECTION,FOLLOW_KW_PROTECTION_in_ignoreProtection1889);  
			stream_KW_PROTECTION.add(KW_PROTECTION72);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 735:9: -> ^( TOK_IGNOREPROTECTION )
			{
				// D:\\temp\\antlr\\HiveParser.g:735:12: ^( TOK_IGNOREPROTECTION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_IGNOREPROTECTION, "TOK_IGNOREPROTECTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ignoreProtection"


	public static class createDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createDatabaseStatement"
	// D:\\temp\\antlr\\HiveParser.g:738:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
	public final HiveParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
		HiveParser.createDatabaseStatement_return retval = new HiveParser.createDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE73=null;
		Token KW_DATABASE74=null;
		Token KW_SCHEMA75=null;
		Token KW_WITH79=null;
		Token KW_DBPROPERTIES80=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbprops =null;
		ParserRuleReturnScope ifNotExists76 =null;
		ParserRuleReturnScope databaseComment77 =null;
		ParserRuleReturnScope dbLocation78 =null;

		CommonTree KW_CREATE73_tree=null;
		CommonTree KW_DATABASE74_tree=null;
		CommonTree KW_SCHEMA75_tree=null;
		CommonTree KW_WITH79_tree=null;
		CommonTree KW_DBPROPERTIES80_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
		RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("create database statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:741:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
			// D:\\temp\\antlr\\HiveParser.g:741:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			{
			KW_CREATE73=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement1934);  
			stream_KW_CREATE.add(KW_CREATE73);

			// D:\\temp\\antlr\\HiveParser.g:741:17: ( KW_DATABASE | KW_SCHEMA )
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==KW_DATABASE) ) {
				alt11=1;
			}
			else if ( (LA11_0==KW_SCHEMA) ) {
				alt11=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 11, 0, input);
				throw nvae;
			}

			switch (alt11) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:741:18: KW_DATABASE
					{
					KW_DATABASE74=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement1937);  
					stream_KW_DATABASE.add(KW_DATABASE74);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:741:30: KW_SCHEMA
					{
					KW_SCHEMA75=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement1939);  
					stream_KW_SCHEMA.add(KW_SCHEMA75);

					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:742:9: ( ifNotExists )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==KW_IF) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:742:9: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement1950);
					ifNotExists76=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists76.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_createDatabaseStatement1963);
			name=identifier();
			state._fsp--;

			stream_identifier.add(name.getTree());
			// D:\\temp\\antlr\\HiveParser.g:744:9: ( databaseComment )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==KW_COMMENT) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:744:9: databaseComment
					{
					pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement1973);
					databaseComment77=databaseComment();
					state._fsp--;

					stream_databaseComment.add(databaseComment77.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:745:9: ( dbLocation )?
			int alt14=2;
			int LA14_0 = input.LA(1);
			if ( (LA14_0==KW_LOCATION) ) {
				alt14=1;
			}
			switch (alt14) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:745:9: dbLocation
					{
					pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement1984);
					dbLocation78=dbLocation();
					state._fsp--;

					stream_dbLocation.add(dbLocation78.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:746:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==KW_WITH) ) {
				alt15=1;
			}
			switch (alt15) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:746:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
					{
					KW_WITH79=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement1996);  
					stream_KW_WITH.add(KW_WITH79);

					KW_DBPROPERTIES80=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1998);  
					stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES80);

					pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement2002);
					dbprops=dbProperties();
					state._fsp--;

					stream_dbProperties.add(dbprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: databaseComment, name, dbprops, dbLocation, ifNotExists
			// token labels: 
			// rule labels: retval, name, dbprops
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 747:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:747:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:747:35: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// D:\\temp\\antlr\\HiveParser.g:747:48: ( dbLocation )?
				if ( stream_dbLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_dbLocation.nextTree());
				}
				stream_dbLocation.reset();

				// D:\\temp\\antlr\\HiveParser.g:747:60: ( databaseComment )?
				if ( stream_databaseComment.hasNext() ) {
					adaptor.addChild(root_1, stream_databaseComment.nextTree());
				}
				stream_databaseComment.reset();

				// D:\\temp\\antlr\\HiveParser.g:747:78: ( $dbprops)?
				if ( stream_dbprops.hasNext() ) {
					adaptor.addChild(root_1, stream_dbprops.nextTree());
				}
				stream_dbprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createDatabaseStatement"


	public static class dbLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbLocation"
	// D:\\temp\\antlr\\HiveParser.g:750:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
	public final HiveParser.dbLocation_return dbLocation() throws RecognitionException {
		HiveParser.dbLocation_return retval = new HiveParser.dbLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION81=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION81_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("database location specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:753:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
			// D:\\temp\\antlr\\HiveParser.g:754:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION81=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation2063);  
			stream_KW_LOCATION.add(KW_LOCATION81);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation2067);  
			stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 754:38: -> ^( TOK_DATABASELOCATION $locn)
			{
				// D:\\temp\\antlr\\HiveParser.g:754:41: ^( TOK_DATABASELOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbLocation"


	public static class dbProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbProperties"
	// D:\\temp\\antlr\\HiveParser.g:757:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
	public final HiveParser.dbProperties_return dbProperties() throws RecognitionException {
		HiveParser.dbProperties_return retval = new HiveParser.dbProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN82=null;
		Token RPAREN84=null;
		ParserRuleReturnScope dbPropertiesList83 =null;

		CommonTree LPAREN82_tree=null;
		CommonTree RPAREN84_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");

		 pushMsg("dbproperties", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:760:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
			// D:\\temp\\antlr\\HiveParser.g:761:7: LPAREN dbPropertiesList RPAREN
			{
			LPAREN82=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties2109);  
			stream_LPAREN.add(LPAREN82);

			pushFollow(FOLLOW_dbPropertiesList_in_dbProperties2111);
			dbPropertiesList83=dbPropertiesList();
			state._fsp--;

			stream_dbPropertiesList.add(dbPropertiesList83.getTree());
			RPAREN84=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties2113);  
			stream_RPAREN.add(RPAREN84);

			// AST REWRITE
			// elements: dbPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 761:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
			{
				// D:\\temp\\antlr\\HiveParser.g:761:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbProperties"


	public static class dbPropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dbPropertiesList"
	// D:\\temp\\antlr\\HiveParser.g:764:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
		HiveParser.dbPropertiesList_return retval = new HiveParser.dbPropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA86=null;
		ParserRuleReturnScope keyValueProperty85 =null;
		ParserRuleReturnScope keyValueProperty87 =null;

		CommonTree COMMA86_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg("database properties list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:767:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:768:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList2154);
			keyValueProperty85=keyValueProperty();
			state._fsp--;

			stream_keyValueProperty.add(keyValueProperty85.getTree());
			// D:\\temp\\antlr\\HiveParser.g:768:24: ( COMMA keyValueProperty )*
			loop16:
			while (true) {
				int alt16=2;
				int LA16_0 = input.LA(1);
				if ( (LA16_0==COMMA) ) {
					alt16=1;
				}

				switch (alt16) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:768:25: COMMA keyValueProperty
					{
					COMMA86=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList2157);  
					stream_COMMA.add(COMMA86);

					pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList2159);
					keyValueProperty87=keyValueProperty();
					state._fsp--;

					stream_keyValueProperty.add(keyValueProperty87.getTree());
					}
					break;

				default :
					break loop16;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 768:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:768:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbPropertiesList"


	public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "switchDatabaseStatement"
	// D:\\temp\\antlr\\HiveParser.g:772:1: switchDatabaseStatement : KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) ;
	public final HiveParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
		HiveParser.switchDatabaseStatement_return retval = new HiveParser.switchDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_USE88=null;
		ParserRuleReturnScope identifier89 =null;

		CommonTree KW_USE88_tree=null;
		RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("switch database statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:775:5: ( KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) )
			// D:\\temp\\antlr\\HiveParser.g:775:7: KW_USE identifier
			{
			KW_USE88=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement2198);  
			stream_KW_USE.add(KW_USE88);

			pushFollow(FOLLOW_identifier_in_switchDatabaseStatement2200);
			identifier89=identifier();
			state._fsp--;

			stream_identifier.add(identifier89.getTree());
			// AST REWRITE
			// elements: identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 776:5: -> ^( TOK_SWITCHDATABASE identifier )
			{
				// D:\\temp\\antlr\\HiveParser.g:776:8: ^( TOK_SWITCHDATABASE identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "switchDatabaseStatement"


	public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropDatabaseStatement"
	// D:\\temp\\antlr\\HiveParser.g:779:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) ;
	public final HiveParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
		HiveParser.dropDatabaseStatement_return retval = new HiveParser.dropDatabaseStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP90=null;
		Token KW_DATABASE91=null;
		Token KW_SCHEMA92=null;
		ParserRuleReturnScope ifExists93 =null;
		ParserRuleReturnScope identifier94 =null;
		ParserRuleReturnScope restrictOrCascade95 =null;

		CommonTree KW_DROP90_tree=null;
		CommonTree KW_DATABASE91_tree=null;
		CommonTree KW_SCHEMA92_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("drop database statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:782:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) )
			// D:\\temp\\antlr\\HiveParser.g:782:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )?
			{
			KW_DROP90=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement2239);  
			stream_KW_DROP.add(KW_DROP90);

			// D:\\temp\\antlr\\HiveParser.g:782:15: ( KW_DATABASE | KW_SCHEMA )
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==KW_DATABASE) ) {
				alt17=1;
			}
			else if ( (LA17_0==KW_SCHEMA) ) {
				alt17=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 17, 0, input);
				throw nvae;
			}

			switch (alt17) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:782:16: KW_DATABASE
					{
					KW_DATABASE91=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement2242);  
					stream_KW_DATABASE.add(KW_DATABASE91);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:782:28: KW_SCHEMA
					{
					KW_SCHEMA92=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2244);  
					stream_KW_SCHEMA.add(KW_SCHEMA92);

					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:782:39: ( ifExists )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==KW_IF) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:782:39: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement2247);
					ifExists93=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists93.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_dropDatabaseStatement2250);
			identifier94=identifier();
			state._fsp--;

			stream_identifier.add(identifier94.getTree());
			// D:\\temp\\antlr\\HiveParser.g:782:60: ( restrictOrCascade )?
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==KW_CASCADE||LA19_0==KW_RESTRICT) ) {
				alt19=1;
			}
			switch (alt19) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:782:60: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement2252);
					restrictOrCascade95=restrictOrCascade();
					state._fsp--;

					stream_restrictOrCascade.add(restrictOrCascade95.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: ifExists, identifier, restrictOrCascade
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 783:5: -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:783:8: ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:783:38: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// D:\\temp\\antlr\\HiveParser.g:783:48: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropDatabaseStatement"


	public static class databaseComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "databaseComment"
	// D:\\temp\\antlr\\HiveParser.g:786:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
	public final HiveParser.databaseComment_return databaseComment() throws RecognitionException {
		HiveParser.databaseComment_return retval = new HiveParser.databaseComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT96=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT96_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("database's comment", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:789:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
			// D:\\temp\\antlr\\HiveParser.g:789:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT96=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment2298);  
			stream_KW_COMMENT.add(KW_COMMENT96);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment2302);  
			stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 790:5: -> ^( TOK_DATABASECOMMENT $comment)
			{
				// D:\\temp\\antlr\\HiveParser.g:790:8: ^( TOK_DATABASECOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "databaseComment"


	public static class createTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createTableStatement"
	// D:\\temp\\antlr\\HiveParser.g:793:1: createTableStatement : KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) ;
	public final HiveParser.createTableStatement_return createTableStatement() throws RecognitionException {
		HiveParser.createTableStatement_return retval = new HiveParser.createTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ext=null;
		Token like=null;
		Token KW_CREATE97=null;
		Token KW_TABLE98=null;
		Token LPAREN102=null;
		Token RPAREN104=null;
		Token KW_AS113=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope likeName =null;
		ParserRuleReturnScope ifNotExists99 =null;
		ParserRuleReturnScope tableLocation100 =null;
		ParserRuleReturnScope tablePropertiesPrefixed101 =null;
		ParserRuleReturnScope columnNameTypeList103 =null;
		ParserRuleReturnScope tableComment105 =null;
		ParserRuleReturnScope tablePartition106 =null;
		ParserRuleReturnScope tableBuckets107 =null;
		ParserRuleReturnScope tableSkewed108 =null;
		ParserRuleReturnScope tableRowFormat109 =null;
		ParserRuleReturnScope tableFileFormat110 =null;
		ParserRuleReturnScope tableLocation111 =null;
		ParserRuleReturnScope tablePropertiesPrefixed112 =null;
		ParserRuleReturnScope selectStatementWithCTE114 =null;

		CommonTree ext_tree=null;
		CommonTree like_tree=null;
		CommonTree KW_CREATE97_tree=null;
		CommonTree KW_TABLE98_tree=null;
		CommonTree LPAREN102_tree=null;
		CommonTree RPAREN104_tree=null;
		CommonTree KW_AS113_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");

		 pushMsg("create table statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:796:5: ( KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) )
			// D:\\temp\\antlr\\HiveParser.g:796:7: KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			{
			KW_CREATE97=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement2342);  
			stream_KW_CREATE.add(KW_CREATE97);

			// D:\\temp\\antlr\\HiveParser.g:796:17: (ext= KW_EXTERNAL )?
			int alt20=2;
			int LA20_0 = input.LA(1);
			if ( (LA20_0==KW_EXTERNAL) ) {
				alt20=1;
			}
			switch (alt20) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:796:18: ext= KW_EXTERNAL
					{
					ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement2347);  
					stream_KW_EXTERNAL.add(ext);

					}
					break;

			}

			KW_TABLE98=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement2351);  
			stream_KW_TABLE.add(KW_TABLE98);

			// D:\\temp\\antlr\\HiveParser.g:796:45: ( ifNotExists )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==KW_IF) ) {
				alt21=1;
			}
			switch (alt21) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:796:45: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createTableStatement2353);
					ifNotExists99=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists99.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createTableStatement2358);
			name=tableName();
			state._fsp--;

			stream_tableName.add(name.getTree());
			// D:\\temp\\antlr\\HiveParser.g:797:7: (like= KW_LIKE likeName= tableName ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==KW_LIKE) ) {
				alt34=1;
			}
			else if ( (LA34_0==EOF||LA34_0==KW_AS||LA34_0==KW_CLUSTERED||LA34_0==KW_COMMENT||LA34_0==KW_LOCATION||LA34_0==KW_PARTITIONED||LA34_0==KW_ROW||LA34_0==KW_SKEWED||LA34_0==KW_STORED||LA34_0==KW_TBLPROPERTIES||LA34_0==LPAREN) ) {
				alt34=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 34, 0, input);
				throw nvae;
			}

			switch (alt34) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:797:10: like= KW_LIKE likeName= tableName ( tableLocation )? ( tablePropertiesPrefixed )?
					{
					like=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement2371);  
					stream_KW_LIKE.add(like);

					pushFollow(FOLLOW_tableName_in_createTableStatement2375);
					likeName=tableName();
					state._fsp--;

					stream_tableName.add(likeName.getTree());
					// D:\\temp\\antlr\\HiveParser.g:798:10: ( tableLocation )?
					int alt22=2;
					int LA22_0 = input.LA(1);
					if ( (LA22_0==KW_LOCATION) ) {
						alt22=1;
					}
					switch (alt22) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:798:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement2386);
							tableLocation100=tableLocation();
							state._fsp--;

							stream_tableLocation.add(tableLocation100.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:799:10: ( tablePropertiesPrefixed )?
					int alt23=2;
					int LA23_0 = input.LA(1);
					if ( (LA23_0==KW_TBLPROPERTIES) ) {
						alt23=1;
					}
					switch (alt23) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:799:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2398);
							tablePropertiesPrefixed101=tablePropertiesPrefixed();
							state._fsp--;

							stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed101.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:800:10: ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )?
					{
					// D:\\temp\\antlr\\HiveParser.g:800:10: ( LPAREN columnNameTypeList RPAREN )?
					int alt24=2;
					int LA24_0 = input.LA(1);
					if ( (LA24_0==LPAREN) ) {
						alt24=1;
					}
					switch (alt24) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:800:11: LPAREN columnNameTypeList RPAREN
							{
							LPAREN102=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement2411);  
							stream_LPAREN.add(LPAREN102);

							pushFollow(FOLLOW_columnNameTypeList_in_createTableStatement2413);
							columnNameTypeList103=columnNameTypeList();
							state._fsp--;

							stream_columnNameTypeList.add(columnNameTypeList103.getTree());
							RPAREN104=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement2415);  
							stream_RPAREN.add(RPAREN104);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:801:10: ( tableComment )?
					int alt25=2;
					int LA25_0 = input.LA(1);
					if ( (LA25_0==KW_COMMENT) ) {
						alt25=1;
					}
					switch (alt25) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:801:10: tableComment
							{
							pushFollow(FOLLOW_tableComment_in_createTableStatement2428);
							tableComment105=tableComment();
							state._fsp--;

							stream_tableComment.add(tableComment105.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:802:10: ( tablePartition )?
					int alt26=2;
					int LA26_0 = input.LA(1);
					if ( (LA26_0==KW_PARTITIONED) ) {
						alt26=1;
					}
					switch (alt26) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:802:10: tablePartition
							{
							pushFollow(FOLLOW_tablePartition_in_createTableStatement2440);
							tablePartition106=tablePartition();
							state._fsp--;

							stream_tablePartition.add(tablePartition106.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:803:10: ( tableBuckets )?
					int alt27=2;
					int LA27_0 = input.LA(1);
					if ( (LA27_0==KW_CLUSTERED) ) {
						alt27=1;
					}
					switch (alt27) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:803:10: tableBuckets
							{
							pushFollow(FOLLOW_tableBuckets_in_createTableStatement2452);
							tableBuckets107=tableBuckets();
							state._fsp--;

							stream_tableBuckets.add(tableBuckets107.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:804:10: ( tableSkewed )?
					int alt28=2;
					int LA28_0 = input.LA(1);
					if ( (LA28_0==KW_SKEWED) ) {
						alt28=1;
					}
					switch (alt28) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:804:10: tableSkewed
							{
							pushFollow(FOLLOW_tableSkewed_in_createTableStatement2464);
							tableSkewed108=tableSkewed();
							state._fsp--;

							stream_tableSkewed.add(tableSkewed108.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:805:10: ( tableRowFormat )?
					int alt29=2;
					int LA29_0 = input.LA(1);
					if ( (LA29_0==KW_ROW) ) {
						alt29=1;
					}
					switch (alt29) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:805:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2476);
							tableRowFormat109=tableRowFormat();
							state._fsp--;

							stream_tableRowFormat.add(tableRowFormat109.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:806:10: ( tableFileFormat )?
					int alt30=2;
					int LA30_0 = input.LA(1);
					if ( (LA30_0==KW_STORED) ) {
						alt30=1;
					}
					switch (alt30) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:806:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2488);
							tableFileFormat110=tableFileFormat();
							state._fsp--;

							stream_tableFileFormat.add(tableFileFormat110.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:807:10: ( tableLocation )?
					int alt31=2;
					int LA31_0 = input.LA(1);
					if ( (LA31_0==KW_LOCATION) ) {
						alt31=1;
					}
					switch (alt31) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:807:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement2500);
							tableLocation111=tableLocation();
							state._fsp--;

							stream_tableLocation.add(tableLocation111.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:808:10: ( tablePropertiesPrefixed )?
					int alt32=2;
					int LA32_0 = input.LA(1);
					if ( (LA32_0==KW_TBLPROPERTIES) ) {
						alt32=1;
					}
					switch (alt32) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:808:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2512);
							tablePropertiesPrefixed112=tablePropertiesPrefixed();
							state._fsp--;

							stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed112.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:809:10: ( KW_AS selectStatementWithCTE )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==KW_AS) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:809:11: KW_AS selectStatementWithCTE
							{
							KW_AS113=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement2525);  
							stream_KW_AS.add(KW_AS113);

							pushFollow(FOLLOW_selectStatementWithCTE_in_createTableStatement2527);
							selectStatementWithCTE114=selectStatementWithCTE();
							state._fsp--;

							stream_selectStatementWithCTE.add(selectStatementWithCTE114.getTree());
							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: ext, name, selectStatementWithCTE, tableComment, tablePartition, ifNotExists, tableRowFormat, columnNameTypeList, likeName, tablePropertiesPrefixed, tableLocation, tableSkewed, tableBuckets, tableFileFormat
			// token labels: ext
			// rule labels: retval, likeName, name
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"rule likeName",likeName!=null?likeName.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 811:5: -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:811:8: ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:811:33: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// D:\\temp\\antlr\\HiveParser.g:811:38: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// D:\\temp\\antlr\\HiveParser.g:812:10: ^( TOK_LIKETABLE ( $likeName)? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);
				// D:\\temp\\antlr\\HiveParser.g:812:27: ( $likeName)?
				if ( stream_likeName.hasNext() ) {
					adaptor.addChild(root_2, stream_likeName.nextTree());
				}
				stream_likeName.reset();

				adaptor.addChild(root_1, root_2);
				}

				// D:\\temp\\antlr\\HiveParser.g:813:10: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				// D:\\temp\\antlr\\HiveParser.g:814:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// D:\\temp\\antlr\\HiveParser.g:815:10: ( tablePartition )?
				if ( stream_tablePartition.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePartition.nextTree());
				}
				stream_tablePartition.reset();

				// D:\\temp\\antlr\\HiveParser.g:816:10: ( tableBuckets )?
				if ( stream_tableBuckets.hasNext() ) {
					adaptor.addChild(root_1, stream_tableBuckets.nextTree());
				}
				stream_tableBuckets.reset();

				// D:\\temp\\antlr\\HiveParser.g:817:10: ( tableSkewed )?
				if ( stream_tableSkewed.hasNext() ) {
					adaptor.addChild(root_1, stream_tableSkewed.nextTree());
				}
				stream_tableSkewed.reset();

				// D:\\temp\\antlr\\HiveParser.g:818:10: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// D:\\temp\\antlr\\HiveParser.g:819:10: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// D:\\temp\\antlr\\HiveParser.g:820:10: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// D:\\temp\\antlr\\HiveParser.g:821:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// D:\\temp\\antlr\\HiveParser.g:822:10: ( selectStatementWithCTE )?
				if ( stream_selectStatementWithCTE.hasNext() ) {
					adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				}
				stream_selectStatementWithCTE.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTableStatement"


	public static class truncateTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "truncateTableStatement"
	// D:\\temp\\antlr\\HiveParser.g:826:1: truncateTableStatement : KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) ;
	public final HiveParser.truncateTableStatement_return truncateTableStatement() throws RecognitionException {
		HiveParser.truncateTableStatement_return retval = new HiveParser.truncateTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TRUNCATE115=null;
		Token KW_TABLE116=null;
		Token KW_COLUMNS118=null;
		Token LPAREN119=null;
		Token RPAREN121=null;
		ParserRuleReturnScope tablePartitionPrefix117 =null;
		ParserRuleReturnScope columnNameList120 =null;

		CommonTree KW_TRUNCATE115_tree=null;
		CommonTree KW_TABLE116_tree=null;
		CommonTree KW_COLUMNS118_tree=null;
		CommonTree LPAREN119_tree=null;
		CommonTree RPAREN121_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");

		 pushMsg("truncate table statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:829:5: ( KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) )
			// D:\\temp\\antlr\\HiveParser.g:829:7: KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )?
			{
			KW_TRUNCATE115=(Token)match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_truncateTableStatement2730);  
			stream_KW_TRUNCATE.add(KW_TRUNCATE115);

			KW_TABLE116=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_truncateTableStatement2732);  
			stream_KW_TABLE.add(KW_TABLE116);

			pushFollow(FOLLOW_tablePartitionPrefix_in_truncateTableStatement2734);
			tablePartitionPrefix117=tablePartitionPrefix();
			state._fsp--;

			stream_tablePartitionPrefix.add(tablePartitionPrefix117.getTree());
			// D:\\temp\\antlr\\HiveParser.g:829:49: ( KW_COLUMNS LPAREN columnNameList RPAREN )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==KW_COLUMNS) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:829:50: KW_COLUMNS LPAREN columnNameList RPAREN
					{
					KW_COLUMNS118=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_truncateTableStatement2737);  
					stream_KW_COLUMNS.add(KW_COLUMNS118);

					LPAREN119=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_truncateTableStatement2739);  
					stream_LPAREN.add(LPAREN119);

					pushFollow(FOLLOW_columnNameList_in_truncateTableStatement2741);
					columnNameList120=columnNameList();
					state._fsp--;

					stream_columnNameList.add(columnNameList120.getTree());
					RPAREN121=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_truncateTableStatement2743);  
					stream_RPAREN.add(RPAREN121);

					}
					break;

			}

			// AST REWRITE
			// elements: tablePartitionPrefix, columnNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 829:92: -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:829:95: ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TRUNCATETABLE, "TOK_TRUNCATETABLE"), root_1);
				adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:829:136: ( columnNameList )?
				if ( stream_columnNameList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameList.nextTree());
				}
				stream_columnNameList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "truncateTableStatement"


	public static class createIndexStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createIndexStatement"
	// D:\\temp\\antlr\\HiveParser.g:831:1: createIndexStatement : KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
	public final HiveParser.createIndexStatement_return createIndexStatement() throws RecognitionException {
		HiveParser.createIndexStatement_return retval = new HiveParser.createIndexStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token typeName=null;
		Token KW_CREATE122=null;
		Token KW_INDEX123=null;
		Token KW_ON124=null;
		Token KW_TABLE125=null;
		Token LPAREN126=null;
		Token RPAREN127=null;
		Token KW_AS128=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope indexedCols =null;
		ParserRuleReturnScope autoRebuild129 =null;
		ParserRuleReturnScope indexPropertiesPrefixed130 =null;
		ParserRuleReturnScope indexTblName131 =null;
		ParserRuleReturnScope tableRowFormat132 =null;
		ParserRuleReturnScope tableFileFormat133 =null;
		ParserRuleReturnScope tableLocation134 =null;
		ParserRuleReturnScope tablePropertiesPrefixed135 =null;
		ParserRuleReturnScope indexComment136 =null;

		CommonTree typeName_tree=null;
		CommonTree KW_CREATE122_tree=null;
		CommonTree KW_INDEX123_tree=null;
		CommonTree KW_ON124_tree=null;
		CommonTree KW_TABLE125_tree=null;
		CommonTree LPAREN126_tree=null;
		CommonTree RPAREN127_tree=null;
		CommonTree KW_AS128_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");

		 pushMsg("create index statement", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:834:5: ( KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
			// D:\\temp\\antlr\\HiveParser.g:834:7: KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
			{
			KW_CREATE122=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement2778);  
			stream_KW_CREATE.add(KW_CREATE122);

			KW_INDEX123=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement2780);  
			stream_KW_INDEX.add(KW_INDEX123);

			pushFollow(FOLLOW_identifier_in_createIndexStatement2784);
			indexName=identifier();
			state._fsp--;

			stream_identifier.add(indexName.getTree());
			KW_ON124=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement2792);  
			stream_KW_ON.add(KW_ON124);

			KW_TABLE125=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement2794);  
			stream_KW_TABLE.add(KW_TABLE125);

			pushFollow(FOLLOW_tableName_in_createIndexStatement2798);
			tab=tableName();
			state._fsp--;

			stream_tableName.add(tab.getTree());
			LPAREN126=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement2800);  
			stream_LPAREN.add(LPAREN126);

			pushFollow(FOLLOW_columnNameList_in_createIndexStatement2804);
			indexedCols=columnNameList();
			state._fsp--;

			stream_columnNameList.add(indexedCols.getTree());
			RPAREN127=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement2806);  
			stream_RPAREN.add(RPAREN127);

			KW_AS128=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement2814);  
			stream_KW_AS.add(KW_AS128);

			typeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement2818);  
			stream_StringLiteral.add(typeName);

			// D:\\temp\\antlr\\HiveParser.g:837:7: ( autoRebuild )?
			int alt36=2;
			int LA36_0 = input.LA(1);
			if ( (LA36_0==KW_WITH) ) {
				alt36=1;
			}
			switch (alt36) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:837:7: autoRebuild
					{
					pushFollow(FOLLOW_autoRebuild_in_createIndexStatement2826);
					autoRebuild129=autoRebuild();
					state._fsp--;

					stream_autoRebuild.add(autoRebuild129.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:838:7: ( indexPropertiesPrefixed )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==KW_IDXPROPERTIES) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:838:7: indexPropertiesPrefixed
					{
					pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2835);
					indexPropertiesPrefixed130=indexPropertiesPrefixed();
					state._fsp--;

					stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed130.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:839:7: ( indexTblName )?
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==KW_IN) ) {
				alt38=1;
			}
			switch (alt38) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:839:7: indexTblName
					{
					pushFollow(FOLLOW_indexTblName_in_createIndexStatement2844);
					indexTblName131=indexTblName();
					state._fsp--;

					stream_indexTblName.add(indexTblName131.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:840:7: ( tableRowFormat )?
			int alt39=2;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==KW_ROW) ) {
				alt39=1;
			}
			switch (alt39) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:840:7: tableRowFormat
					{
					pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement2853);
					tableRowFormat132=tableRowFormat();
					state._fsp--;

					stream_tableRowFormat.add(tableRowFormat132.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:841:7: ( tableFileFormat )?
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==KW_STORED) ) {
				alt40=1;
			}
			switch (alt40) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:841:7: tableFileFormat
					{
					pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement2862);
					tableFileFormat133=tableFileFormat();
					state._fsp--;

					stream_tableFileFormat.add(tableFileFormat133.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:842:7: ( tableLocation )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==KW_LOCATION) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:842:7: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_createIndexStatement2871);
					tableLocation134=tableLocation();
					state._fsp--;

					stream_tableLocation.add(tableLocation134.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:843:7: ( tablePropertiesPrefixed )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==KW_TBLPROPERTIES) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:843:7: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2880);
					tablePropertiesPrefixed135=tablePropertiesPrefixed();
					state._fsp--;

					stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed135.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:844:7: ( indexComment )?
			int alt43=2;
			int LA43_0 = input.LA(1);
			if ( (LA43_0==KW_COMMENT) ) {
				alt43=1;
			}
			switch (alt43) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:844:7: indexComment
					{
					pushFollow(FOLLOW_indexComment_in_createIndexStatement2889);
					indexComment136=indexComment();
					state._fsp--;

					stream_indexComment.add(indexComment136.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: indexedCols, indexTblName, tableFileFormat, tableRowFormat, indexComment, tab, indexName, tablePropertiesPrefixed, tableLocation, typeName, indexPropertiesPrefixed, autoRebuild
			// token labels: typeName
			// rule labels: indexedCols, retval, indexName, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
			RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"rule indexedCols",indexedCols!=null?indexedCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 845:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:845:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextTree());
				adaptor.addChild(root_1, stream_typeName.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_indexedCols.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:846:9: ( autoRebuild )?
				if ( stream_autoRebuild.hasNext() ) {
					adaptor.addChild(root_1, stream_autoRebuild.nextTree());
				}
				stream_autoRebuild.reset();

				// D:\\temp\\antlr\\HiveParser.g:847:9: ( indexPropertiesPrefixed )?
				if ( stream_indexPropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_indexPropertiesPrefixed.nextTree());
				}
				stream_indexPropertiesPrefixed.reset();

				// D:\\temp\\antlr\\HiveParser.g:848:9: ( indexTblName )?
				if ( stream_indexTblName.hasNext() ) {
					adaptor.addChild(root_1, stream_indexTblName.nextTree());
				}
				stream_indexTblName.reset();

				// D:\\temp\\antlr\\HiveParser.g:849:9: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// D:\\temp\\antlr\\HiveParser.g:850:9: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// D:\\temp\\antlr\\HiveParser.g:851:9: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// D:\\temp\\antlr\\HiveParser.g:852:9: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// D:\\temp\\antlr\\HiveParser.g:853:9: ( indexComment )?
				if ( stream_indexComment.hasNext() ) {
					adaptor.addChild(root_1, stream_indexComment.nextTree());
				}
				stream_indexComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createIndexStatement"


	public static class indexComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexComment"
	// D:\\temp\\antlr\\HiveParser.g:856:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
	public final HiveParser.indexComment_return indexComment() throws RecognitionException {
		HiveParser.indexComment_return retval = new HiveParser.indexComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT137=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT137_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("comment on an index", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:859:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
			// D:\\temp\\antlr\\HiveParser.g:860:17: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT137=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment3046);  
			stream_KW_COMMENT.add(KW_COMMENT137);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment3050);  
			stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 860:51: -> ^( TOK_INDEXCOMMENT $comment)
			{
				// D:\\temp\\antlr\\HiveParser.g:860:54: ^( TOK_INDEXCOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexComment"


	public static class autoRebuild_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "autoRebuild"
	// D:\\temp\\antlr\\HiveParser.g:863:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
	public final HiveParser.autoRebuild_return autoRebuild() throws RecognitionException {
		HiveParser.autoRebuild_return retval = new HiveParser.autoRebuild_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH138=null;
		Token KW_DEFERRED139=null;
		Token KW_REBUILD140=null;

		CommonTree KW_WITH138_tree=null;
		CommonTree KW_DEFERRED139_tree=null;
		CommonTree KW_REBUILD140_tree=null;
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

		 pushMsg("auto rebuild index", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:866:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
			// D:\\temp\\antlr\\HiveParser.g:866:7: KW_WITH KW_DEFERRED KW_REBUILD
			{
			KW_WITH138=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild3091);  
			stream_KW_WITH.add(KW_WITH138);

			KW_DEFERRED139=(Token)match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild3093);  
			stream_KW_DEFERRED.add(KW_DEFERRED139);

			KW_REBUILD140=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild3095);  
			stream_KW_REBUILD.add(KW_REBUILD140);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 867:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
			{
				// D:\\temp\\antlr\\HiveParser.g:867:7: ^( TOK_DEFERRED_REBUILDINDEX )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "autoRebuild"


	public static class indexTblName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexTblName"
	// D:\\temp\\antlr\\HiveParser.g:870:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
	public final HiveParser.indexTblName_return indexTblName() throws RecognitionException {
		HiveParser.indexTblName_return retval = new HiveParser.indexTblName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IN141=null;
		Token KW_TABLE142=null;
		ParserRuleReturnScope indexTbl =null;

		CommonTree KW_IN141_tree=null;
		CommonTree KW_TABLE142_tree=null;
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("index table name", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:873:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
			// D:\\temp\\antlr\\HiveParser.g:873:7: KW_IN KW_TABLE indexTbl= tableName
			{
			KW_IN141=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName3131);  
			stream_KW_IN.add(KW_IN141);

			KW_TABLE142=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName3133);  
			stream_KW_TABLE.add(KW_TABLE142);

			pushFollow(FOLLOW_tableName_in_indexTblName3137);
			indexTbl=tableName();
			state._fsp--;

			stream_tableName.add(indexTbl.getTree());
			// AST REWRITE
			// elements: indexTbl
			// token labels: 
			// rule labels: retval, indexTbl
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"rule indexTbl",indexTbl!=null?indexTbl.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 874:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
			{
				// D:\\temp\\antlr\\HiveParser.g:874:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME"), root_1);
				adaptor.addChild(root_1, stream_indexTbl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexTblName"


	public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesPrefixed"
	// D:\\temp\\antlr\\HiveParser.g:877:1: indexPropertiesPrefixed : KW_IDXPROPERTIES ! indexProperties ;
	public final HiveParser.indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
		HiveParser.indexPropertiesPrefixed_return retval = new HiveParser.indexPropertiesPrefixed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_IDXPROPERTIES143=null;
		ParserRuleReturnScope indexProperties144 =null;

		CommonTree KW_IDXPROPERTIES143_tree=null;

		 pushMsg("table properties with prefix", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:880:5: ( KW_IDXPROPERTIES ! indexProperties )
			// D:\\temp\\antlr\\HiveParser.g:881:9: KW_IDXPROPERTIES ! indexProperties
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_IDXPROPERTIES143=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed3184); 
			pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed3187);
			indexProperties144=indexProperties();
			state._fsp--;

			adaptor.addChild(root_0, indexProperties144.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesPrefixed"


	public static class indexProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexProperties"
	// D:\\temp\\antlr\\HiveParser.g:884:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
	public final HiveParser.indexProperties_return indexProperties() throws RecognitionException {
		HiveParser.indexProperties_return retval = new HiveParser.indexProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN145=null;
		Token RPAREN147=null;
		ParserRuleReturnScope indexPropertiesList146 =null;

		CommonTree LPAREN145_tree=null;
		CommonTree RPAREN147_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");

		 pushMsg("index properties", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:887:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
			// D:\\temp\\antlr\\HiveParser.g:888:7: LPAREN indexPropertiesList RPAREN
			{
			LPAREN145=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties3220);  
			stream_LPAREN.add(LPAREN145);

			pushFollow(FOLLOW_indexPropertiesList_in_indexProperties3222);
			indexPropertiesList146=indexPropertiesList();
			state._fsp--;

			stream_indexPropertiesList.add(indexPropertiesList146.getTree());
			RPAREN147=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties3224);  
			stream_RPAREN.add(RPAREN147);

			// AST REWRITE
			// elements: indexPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 888:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
			{
				// D:\\temp\\antlr\\HiveParser.g:888:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_indexPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexProperties"


	public static class indexPropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesList"
	// D:\\temp\\antlr\\HiveParser.g:891:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
	public final HiveParser.indexPropertiesList_return indexPropertiesList() throws RecognitionException {
		HiveParser.indexPropertiesList_return retval = new HiveParser.indexPropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA149=null;
		ParserRuleReturnScope keyValueProperty148 =null;
		ParserRuleReturnScope keyValueProperty150 =null;

		CommonTree COMMA149_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg("index properties list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:894:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:895:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3265);
			keyValueProperty148=keyValueProperty();
			state._fsp--;

			stream_keyValueProperty.add(keyValueProperty148.getTree());
			// D:\\temp\\antlr\\HiveParser.g:895:24: ( COMMA keyValueProperty )*
			loop44:
			while (true) {
				int alt44=2;
				int LA44_0 = input.LA(1);
				if ( (LA44_0==COMMA) ) {
					alt44=1;
				}

				switch (alt44) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:895:25: COMMA keyValueProperty
					{
					COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList3268);  
					stream_COMMA.add(COMMA149);

					pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3270);
					keyValueProperty150=keyValueProperty();
					state._fsp--;

					stream_keyValueProperty.add(keyValueProperty150.getTree());
					}
					break;

				default :
					break loop44;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 895:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:895:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesList"


	public static class dropIndexStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropIndexStatement"
	// D:\\temp\\antlr\\HiveParser.g:898:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
	public final HiveParser.dropIndexStatement_return dropIndexStatement() throws RecognitionException {
		HiveParser.dropIndexStatement_return retval = new HiveParser.dropIndexStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP151=null;
		Token KW_INDEX152=null;
		Token KW_ON154=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope ifExists153 =null;

		CommonTree KW_DROP151_tree=null;
		CommonTree KW_INDEX152_tree=null;
		CommonTree KW_ON154_tree=null;
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("drop index statement", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:901:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
			// D:\\temp\\antlr\\HiveParser.g:901:7: KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName
			{
			KW_DROP151=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement3308);  
			stream_KW_DROP.add(KW_DROP151);

			KW_INDEX152=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement3310);  
			stream_KW_INDEX.add(KW_INDEX152);

			// D:\\temp\\antlr\\HiveParser.g:901:24: ( ifExists )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==KW_IF) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:901:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropIndexStatement3312);
					ifExists153=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists153.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_dropIndexStatement3317);
			indexName=identifier();
			state._fsp--;

			stream_identifier.add(indexName.getTree());
			KW_ON154=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement3319);  
			stream_KW_ON.add(KW_ON154);

			pushFollow(FOLLOW_tableName_in_dropIndexStatement3323);
			tab=tableName();
			state._fsp--;

			stream_tableName.add(tab.getTree());
			// AST REWRITE
			// elements: ifExists, indexName, tab
			// token labels: 
			// rule labels: retval, indexName, tab
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 902:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:902:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextTree());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:902:39: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropIndexStatement"


	public static class dropTableStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropTableStatement"
	// D:\\temp\\antlr\\HiveParser.g:905:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) ;
	public final HiveParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
		HiveParser.dropTableStatement_return retval = new HiveParser.dropTableStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP155=null;
		Token KW_TABLE156=null;
		ParserRuleReturnScope ifExists157 =null;
		ParserRuleReturnScope tableName158 =null;

		CommonTree KW_DROP155_tree=null;
		CommonTree KW_TABLE156_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:908:5: ( KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) )
			// D:\\temp\\antlr\\HiveParser.g:908:7: KW_DROP KW_TABLE ( ifExists )? tableName
			{
			KW_DROP155=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement3368);  
			stream_KW_DROP.add(KW_DROP155);

			KW_TABLE156=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement3370);  
			stream_KW_TABLE.add(KW_TABLE156);

			// D:\\temp\\antlr\\HiveParser.g:908:24: ( ifExists )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==KW_IF) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:908:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropTableStatement3372);
					ifExists157=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists157.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_dropTableStatement3375);
			tableName158=tableName();
			state._fsp--;

			stream_tableName.add(tableName158.getTree());
			// AST REWRITE
			// elements: ifExists, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 908:44: -> ^( TOK_DROPTABLE tableName ( ifExists )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:908:47: ^( TOK_DROPTABLE tableName ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:908:73: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropTableStatement"


	public static class alterStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatement"
	// D:\\temp\\antlr\\HiveParser.g:911:1: alterStatement : KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix ) ;
	public final HiveParser.alterStatement_return alterStatement() throws RecognitionException {
		HiveParser.alterStatement_return retval = new HiveParser.alterStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALTER159=null;
		Token KW_TABLE160=null;
		Token KW_VIEW162=null;
		Token KW_INDEX164=null;
		Token KW_DATABASE166=null;
		ParserRuleReturnScope alterTableStatementSuffix161 =null;
		ParserRuleReturnScope alterViewStatementSuffix163 =null;
		ParserRuleReturnScope alterIndexStatementSuffix165 =null;
		ParserRuleReturnScope alterDatabaseStatementSuffix167 =null;

		CommonTree KW_ALTER159_tree=null;
		CommonTree KW_TABLE160_tree=null;
		CommonTree KW_VIEW162_tree=null;
		CommonTree KW_INDEX164_tree=null;
		CommonTree KW_DATABASE166_tree=null;

		 pushMsg("alter statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:914:5: ( KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix ) )
			// D:\\temp\\antlr\\HiveParser.g:914:7: KW_ALTER ! ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix )
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_ALTER159=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3413); 
			// D:\\temp\\antlr\\HiveParser.g:915:9: ( KW_TABLE ! alterTableStatementSuffix | KW_VIEW ! alterViewStatementSuffix | KW_INDEX ! alterIndexStatementSuffix | KW_DATABASE ! alterDatabaseStatementSuffix )
			int alt47=4;
			switch ( input.LA(1) ) {
			case KW_TABLE:
				{
				alt47=1;
				}
				break;
			case KW_VIEW:
				{
				alt47=2;
				}
				break;
			case KW_INDEX:
				{
				alt47=3;
				}
				break;
			case KW_DATABASE:
				{
				alt47=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 47, 0, input);
				throw nvae;
			}
			switch (alt47) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:916:13: KW_TABLE ! alterTableStatementSuffix
					{
					KW_TABLE160=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement3438); 
					pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement3441);
					alterTableStatementSuffix161=alterTableStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterTableStatementSuffix161.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:918:13: KW_VIEW ! alterViewStatementSuffix
					{
					KW_VIEW162=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement3465); 
					pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement3468);
					alterViewStatementSuffix163=alterViewStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterViewStatementSuffix163.getTree());

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:920:13: KW_INDEX ! alterIndexStatementSuffix
					{
					KW_INDEX164=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement3492); 
					pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement3495);
					alterIndexStatementSuffix165=alterIndexStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterIndexStatementSuffix165.getTree());

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:922:13: KW_DATABASE ! alterDatabaseStatementSuffix
					{
					KW_DATABASE166=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement3519); 
					pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3522);
					alterDatabaseStatementSuffix167=alterDatabaseStatementSuffix();
					state._fsp--;

					adaptor.addChild(root_0, alterDatabaseStatementSuffix167.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatement"


	public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTableStatementSuffix"
	// D:\\temp\\antlr\\HiveParser.g:926:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType );
	public final HiveParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
		HiveParser.alterTableStatementSuffix_return retval = new HiveParser.alterTableStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterStatementSuffixRename168 =null;
		ParserRuleReturnScope alterStatementSuffixAddCol169 =null;
		ParserRuleReturnScope alterStatementSuffixRenameCol170 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions171 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions172 =null;
		ParserRuleReturnScope alterStatementSuffixTouch173 =null;
		ParserRuleReturnScope alterStatementSuffixArchive174 =null;
		ParserRuleReturnScope alterStatementSuffixUnArchive175 =null;
		ParserRuleReturnScope alterStatementSuffixProperties176 =null;
		ParserRuleReturnScope alterTblPartitionStatement177 =null;
		ParserRuleReturnScope alterStatementSuffixSkewedby178 =null;
		ParserRuleReturnScope alterStatementSuffixExchangePartition179 =null;
		ParserRuleReturnScope alterStatementPartitionKeyType180 =null;


		 pushMsg("alter table statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:929:5: ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType )
			int alt48=13;
			alt48 = dfa48.predict(input);
			switch (alt48) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:929:7: alterStatementSuffixRename
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3559);
					alterStatementSuffixRename168=alterStatementSuffixRename();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixRename168.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:930:7: alterStatementSuffixAddCol
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3567);
					alterStatementSuffixAddCol169=alterStatementSuffixAddCol();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixAddCol169.getTree());

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:931:7: alterStatementSuffixRenameCol
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3575);
					alterStatementSuffixRenameCol170=alterStatementSuffixRenameCol();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixRenameCol170.getTree());

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:932:7: alterStatementSuffixDropPartitions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3583);
					alterStatementSuffixDropPartitions171=alterStatementSuffixDropPartitions();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixDropPartitions171.getTree());

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:933:7: alterStatementSuffixAddPartitions
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3591);
					alterStatementSuffixAddPartitions172=alterStatementSuffixAddPartitions();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixAddPartitions172.getTree());

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:934:7: alterStatementSuffixTouch
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3599);
					alterStatementSuffixTouch173=alterStatementSuffixTouch();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixTouch173.getTree());

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:935:7: alterStatementSuffixArchive
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3607);
					alterStatementSuffixArchive174=alterStatementSuffixArchive();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixArchive174.getTree());

					}
					break;
				case 8 :
					// D:\\temp\\antlr\\HiveParser.g:936:7: alterStatementSuffixUnArchive
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3615);
					alterStatementSuffixUnArchive175=alterStatementSuffixUnArchive();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixUnArchive175.getTree());

					}
					break;
				case 9 :
					// D:\\temp\\antlr\\HiveParser.g:937:7: alterStatementSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3623);
					alterStatementSuffixProperties176=alterStatementSuffixProperties();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixProperties176.getTree());

					}
					break;
				case 10 :
					// D:\\temp\\antlr\\HiveParser.g:938:7: alterTblPartitionStatement
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3631);
					alterTblPartitionStatement177=alterTblPartitionStatement();
					state._fsp--;

					adaptor.addChild(root_0, alterTblPartitionStatement177.getTree());

					}
					break;
				case 11 :
					// D:\\temp\\antlr\\HiveParser.g:939:7: alterStatementSuffixSkewedby
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3639);
					alterStatementSuffixSkewedby178=alterStatementSuffixSkewedby();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixSkewedby178.getTree());

					}
					break;
				case 12 :
					// D:\\temp\\antlr\\HiveParser.g:940:7: alterStatementSuffixExchangePartition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix3647);
					alterStatementSuffixExchangePartition179=alterStatementSuffixExchangePartition();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixExchangePartition179.getTree());

					}
					break;
				case 13 :
					// D:\\temp\\antlr\\HiveParser.g:941:7: alterStatementPartitionKeyType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix3655);
					alterStatementPartitionKeyType180=alterStatementPartitionKeyType();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementPartitionKeyType180.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTableStatementSuffix"


	public static class alterStatementPartitionKeyType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementPartitionKeyType"
	// D:\\temp\\antlr\\HiveParser.g:944:1: alterStatementPartitionKeyType : identifier KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE identifier columnNameType ) ;
	public final HiveParser.alterStatementPartitionKeyType_return alterStatementPartitionKeyType() throws RecognitionException {
		HiveParser.alterStatementPartitionKeyType_return retval = new HiveParser.alterStatementPartitionKeyType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITION182=null;
		Token KW_COLUMN183=null;
		Token LPAREN184=null;
		Token RPAREN186=null;
		ParserRuleReturnScope identifier181 =null;
		ParserRuleReturnScope columnNameType185 =null;

		CommonTree KW_PARTITION182_tree=null;
		CommonTree KW_COLUMN183_tree=null;
		CommonTree LPAREN184_tree=null;
		CommonTree RPAREN186_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		msgs.push("alter partition key type"); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:947:2: ( identifier KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE identifier columnNameType ) )
			// D:\\temp\\antlr\\HiveParser.g:947:4: identifier KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN
			{
			pushFollow(FOLLOW_identifier_in_alterStatementPartitionKeyType3679);
			identifier181=identifier();
			state._fsp--;

			stream_identifier.add(identifier181.getTree());
			KW_PARTITION182=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType3681);  
			stream_KW_PARTITION.add(KW_PARTITION182);

			KW_COLUMN183=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType3683);  
			stream_KW_COLUMN.add(KW_COLUMN183);

			LPAREN184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementPartitionKeyType3685);  
			stream_LPAREN.add(LPAREN184);

			pushFollow(FOLLOW_columnNameType_in_alterStatementPartitionKeyType3687);
			columnNameType185=columnNameType();
			state._fsp--;

			stream_columnNameType.add(columnNameType185.getTree());
			RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementPartitionKeyType3689);  
			stream_RPAREN.add(RPAREN186);

			// AST REWRITE
			// elements: columnNameType, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 948:2: -> ^( TOK_ALTERTABLE_PARTCOLTYPE identifier columnNameType )
			{
				// D:\\temp\\antlr\\HiveParser.g:948:5: ^( TOK_ALTERTABLE_PARTCOLTYPE identifier columnNameType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PARTCOLTYPE, "TOK_ALTERTABLE_PARTCOLTYPE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_1, stream_columnNameType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			msgs.pop();
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementPartitionKeyType"


	public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterViewStatementSuffix"
	// D:\\temp\\antlr\\HiveParser.g:951:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) |name= tableName KW_AS selectStatementWithCTE -> ^( TOK_ALTERVIEW_AS $name selectStatementWithCTE ) );
	public final HiveParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
		HiveParser.alterViewStatementSuffix_return retval = new HiveParser.alterViewStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_AS191=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope alterViewSuffixProperties187 =null;
		ParserRuleReturnScope alterStatementSuffixRename188 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions189 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions190 =null;
		ParserRuleReturnScope selectStatementWithCTE192 =null;

		CommonTree KW_AS191_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitions");
		RewriteRuleSubtreeStream stream_alterStatementSuffixRename=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixRename");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_alterStatementSuffixDropPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixDropPartitions");

		 pushMsg("alter view statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:954:5: ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) |name= tableName KW_AS selectStatementWithCTE -> ^( TOK_ALTERVIEW_AS $name selectStatementWithCTE ) )
			int alt49=5;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==Identifier) ) {
				switch ( input.LA(2) ) {
				case KW_SET:
				case KW_UNSET:
					{
					alt49=1;
					}
					break;
				case KW_RENAME:
					{
					alt49=2;
					}
					break;
				case KW_ADD:
					{
					alt49=3;
					}
					break;
				case KW_DROP:
					{
					alt49=4;
					}
					break;
				case DOT:
				case KW_AS:
					{
					alt49=5;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 49, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( ((LA49_0 >= KW_ADD && LA49_0 <= KW_ANALYZE)||(LA49_0 >= KW_ARCHIVE && LA49_0 <= KW_CASCADE)||LA49_0==KW_CHANGE||(LA49_0 >= KW_CLUSTER && LA49_0 <= KW_COLLECTION)||(LA49_0 >= KW_COLUMNS && LA49_0 <= KW_CREATE)||LA49_0==KW_CUBE||(LA49_0 >= KW_CURSOR && LA49_0 <= KW_DATA)||(LA49_0 >= KW_DATABASES && LA49_0 <= KW_DISABLE)||(LA49_0 >= KW_DISTRIBUTE && LA49_0 <= KW_ELEM_TYPE)||LA49_0==KW_ENABLE||LA49_0==KW_ESCAPED||(LA49_0 >= KW_EXCLUSIVE && LA49_0 <= KW_EXPORT)||(LA49_0 >= KW_EXTERNAL && LA49_0 <= KW_FLOAT)||(LA49_0 >= KW_FOR && LA49_0 <= KW_FORMATTED)||LA49_0==KW_FULL||(LA49_0 >= KW_FUNCTIONS && LA49_0 <= KW_GROUPING)||(LA49_0 >= KW_HOLD_DDLTIME && LA49_0 <= KW_IDXPROPERTIES)||(LA49_0 >= KW_IGNORE && LA49_0 <= KW_JAR)||(LA49_0 >= KW_KEYS && LA49_0 <= KW_LEFT)||(LA49_0 >= KW_LIKE && LA49_0 <= KW_LONG)||(LA49_0 >= KW_MAPJOIN && LA49_0 <= KW_MINUS)||(LA49_0 >= KW_MSCK && LA49_0 <= KW_NOSCAN)||(LA49_0 >= KW_NO_DROP && LA49_0 <= KW_OFFLINE)||LA49_0==KW_OPTION||(LA49_0 >= KW_ORCFILE && LA49_0 <= KW_OUTPUTFORMAT)||(LA49_0 >= KW_OVERWRITE && LA49_0 <= KW_PARQUETFILE)||(LA49_0 >= KW_PARTITION && LA49_0 <= KW_PLUS)||(LA49_0 >= KW_PRETTY && LA49_0 <= KW_RECORDWRITER)||(LA49_0 >= KW_REGEXP && LA49_0 <= KW_SCHEMAS)||(LA49_0 >= KW_SEMI && LA49_0 <= KW_TABLES)||(LA49_0 >= KW_TBLPROPERTIES && LA49_0 <= KW_TEXTFILE)||(LA49_0 >= KW_TIMESTAMP && LA49_0 <= KW_TRANSACTIONS)||(LA49_0 >= KW_TRIGGER && LA49_0 <= KW_UNARCHIVE)||(LA49_0 >= KW_UNDO && LA49_0 <= KW_UNIONTYPE)||(LA49_0 >= KW_UNLOCK && LA49_0 <= KW_VALUE_TYPE)||LA49_0==KW_VIEW||LA49_0==KW_WHILE||LA49_0==KW_WITH) ) {
				switch ( input.LA(2) ) {
				case KW_SET:
				case KW_UNSET:
					{
					alt49=1;
					}
					break;
				case KW_RENAME:
					{
					alt49=2;
					}
					break;
				case KW_ADD:
					{
					alt49=3;
					}
					break;
				case KW_DROP:
					{
					alt49=4;
					}
					break;
				case DOT:
				case KW_AS:
					{
					alt49=5;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 49, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 49, 0, input);
				throw nvae;
			}

			switch (alt49) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:954:7: alterViewSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3724);
					alterViewSuffixProperties187=alterViewSuffixProperties();
					state._fsp--;

					adaptor.addChild(root_0, alterViewSuffixProperties187.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:955:7: alterStatementSuffixRename
					{
					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3732);
					alterStatementSuffixRename188=alterStatementSuffixRename();
					state._fsp--;

					stream_alterStatementSuffixRename.add(alterStatementSuffixRename188.getTree());
					// AST REWRITE
					// elements: alterStatementSuffixRename
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 956:9: -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
					{
						// D:\\temp\\antlr\\HiveParser.g:956:12: ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME"), root_1);
						adaptor.addChild(root_1, stream_alterStatementSuffixRename.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:957:7: alterStatementSuffixAddPartitions
					{
					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3756);
					alterStatementSuffixAddPartitions189=alterStatementSuffixAddPartitions();
					state._fsp--;

					stream_alterStatementSuffixAddPartitions.add(alterStatementSuffixAddPartitions189.getTree());
					// AST REWRITE
					// elements: alterStatementSuffixAddPartitions
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 958:9: -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
					{
						// D:\\temp\\antlr\\HiveParser.g:958:12: ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS"), root_1);
						adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitions.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:959:7: alterStatementSuffixDropPartitions
					{
					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3780);
					alterStatementSuffixDropPartitions190=alterStatementSuffixDropPartitions();
					state._fsp--;

					stream_alterStatementSuffixDropPartitions.add(alterStatementSuffixDropPartitions190.getTree());
					// AST REWRITE
					// elements: alterStatementSuffixDropPartitions
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 960:9: -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
					{
						// D:\\temp\\antlr\\HiveParser.g:960:12: ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS"), root_1);
						adaptor.addChild(root_1, stream_alterStatementSuffixDropPartitions.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:961:7: name= tableName KW_AS selectStatementWithCTE
					{
					pushFollow(FOLLOW_tableName_in_alterViewStatementSuffix3806);
					name=tableName();
					state._fsp--;

					stream_tableName.add(name.getTree());
					KW_AS191=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_alterViewStatementSuffix3808);  
					stream_KW_AS.add(KW_AS191);

					pushFollow(FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix3810);
					selectStatementWithCTE192=selectStatementWithCTE();
					state._fsp--;

					stream_selectStatementWithCTE.add(selectStatementWithCTE192.getTree());
					// AST REWRITE
					// elements: selectStatementWithCTE, name
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 962:9: -> ^( TOK_ALTERVIEW_AS $name selectStatementWithCTE )
					{
						// D:\\temp\\antlr\\HiveParser.g:962:12: ^( TOK_ALTERVIEW_AS $name selectStatementWithCTE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_AS, "TOK_ALTERVIEW_AS"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewStatementSuffix"


	public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterIndexStatementSuffix"
	// D:\\temp\\antlr\\HiveParser.g:965:1: alterIndexStatementSuffix : indexName= identifier ( KW_ON tableNameId= identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) ;
	public final HiveParser.alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
		HiveParser.alterIndexStatementSuffix_return retval = new HiveParser.alterIndexStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ON193=null;
		Token KW_REBUILD195=null;
		Token KW_SET196=null;
		Token KW_IDXPROPERTIES197=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tableNameId =null;
		ParserRuleReturnScope partitionSpec194 =null;
		ParserRuleReturnScope indexProperties198 =null;

		CommonTree KW_ON193_tree=null;
		CommonTree KW_REBUILD195_tree=null;
		CommonTree KW_SET196_tree=null;
		CommonTree KW_IDXPROPERTIES197_tree=null;
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
		RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("alter index statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:968:5: (indexName= identifier ( KW_ON tableNameId= identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) )
			// D:\\temp\\antlr\\HiveParser.g:968:7: indexName= identifier ( KW_ON tableNameId= identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
			{
			pushFollow(FOLLOW_identifier_in_alterIndexStatementSuffix3858);
			indexName=identifier();
			state._fsp--;

			stream_identifier.add(indexName.getTree());
			// D:\\temp\\antlr\\HiveParser.g:969:7: ( KW_ON tableNameId= identifier )
			// D:\\temp\\antlr\\HiveParser.g:969:8: KW_ON tableNameId= identifier
			{
			KW_ON193=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix3867);  
			stream_KW_ON.add(KW_ON193);

			pushFollow(FOLLOW_identifier_in_alterIndexStatementSuffix3871);
			tableNameId=identifier();
			state._fsp--;

			stream_identifier.add(tableNameId.getTree());
			}

			// D:\\temp\\antlr\\HiveParser.g:970:7: ( partitionSpec )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==KW_PARTITION) ) {
				alt50=1;
			}
			switch (alt50) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:970:7: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix3880);
					partitionSpec194=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec194.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:971:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==KW_REBUILD) ) {
				alt51=1;
			}
			else if ( (LA51_0==KW_SET) ) {
				alt51=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 51, 0, input);
				throw nvae;
			}

			switch (alt51) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:972:7: KW_REBUILD
					{
					KW_REBUILD195=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3895);  
					stream_KW_REBUILD.add(KW_REBUILD195);

					// AST REWRITE
					// elements: partitionSpec, indexName, tableNameId
					// token labels: 
					// rule labels: retval, tableNameId, indexName
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_tableNameId=new RewriteRuleSubtreeStream(adaptor,"rule tableNameId",tableNameId!=null?tableNameId.getTree():null);
					RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 973:7: -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:973:9: ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD"), root_1);
						adaptor.addChild(root_1, stream_tableNameId.nextTree());
						adaptor.addChild(root_1, stream_indexName.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:973:58: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:975:7: KW_SET KW_IDXPROPERTIES indexProperties
					{
					KW_SET196=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix3929);  
					stream_KW_SET.add(KW_SET196);

					KW_IDXPROPERTIES197=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3931);  
					stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES197);

					pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix3939);
					indexProperties198=indexProperties();
					state._fsp--;

					stream_indexProperties.add(indexProperties198.getTree());
					// AST REWRITE
					// elements: tableNameId, indexName, indexProperties
					// token labels: 
					// rule labels: retval, tableNameId, indexName
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_tableNameId=new RewriteRuleSubtreeStream(adaptor,"rule tableNameId",tableNameId!=null?tableNameId.getTree():null);
					RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 977:7: -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
					{
						// D:\\temp\\antlr\\HiveParser.g:977:9: ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableNameId.nextTree());
						adaptor.addChild(root_1, stream_indexName.nextTree());
						adaptor.addChild(root_1, stream_indexProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterIndexStatementSuffix"


	public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseStatementSuffix"
	// D:\\temp\\antlr\\HiveParser.g:981:1: alterDatabaseStatementSuffix : ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner );
	public final HiveParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
		HiveParser.alterDatabaseStatementSuffix_return retval = new HiveParser.alterDatabaseStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterDatabaseSuffixProperties199 =null;
		ParserRuleReturnScope alterDatabaseSuffixSetOwner200 =null;


		 pushMsg("alter database statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:984:5: ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner )
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==Identifier) ) {
				int LA52_1 = input.LA(2);
				if ( (LA52_1==KW_SET) ) {
					int LA52_3 = input.LA(3);
					if ( (LA52_3==KW_DBPROPERTIES) ) {
						alt52=1;
					}
					else if ( (LA52_3==KW_OWNER) ) {
						alt52=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 52, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 52, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA52_0 >= KW_ADD && LA52_0 <= KW_ANALYZE)||(LA52_0 >= KW_ARCHIVE && LA52_0 <= KW_CASCADE)||LA52_0==KW_CHANGE||(LA52_0 >= KW_CLUSTER && LA52_0 <= KW_COLLECTION)||(LA52_0 >= KW_COLUMNS && LA52_0 <= KW_CREATE)||LA52_0==KW_CUBE||(LA52_0 >= KW_CURSOR && LA52_0 <= KW_DATA)||(LA52_0 >= KW_DATABASES && LA52_0 <= KW_DISABLE)||(LA52_0 >= KW_DISTRIBUTE && LA52_0 <= KW_ELEM_TYPE)||LA52_0==KW_ENABLE||LA52_0==KW_ESCAPED||(LA52_0 >= KW_EXCLUSIVE && LA52_0 <= KW_EXPORT)||(LA52_0 >= KW_EXTERNAL && LA52_0 <= KW_FLOAT)||(LA52_0 >= KW_FOR && LA52_0 <= KW_FORMATTED)||LA52_0==KW_FULL||(LA52_0 >= KW_FUNCTIONS && LA52_0 <= KW_GROUPING)||(LA52_0 >= KW_HOLD_DDLTIME && LA52_0 <= KW_IDXPROPERTIES)||(LA52_0 >= KW_IGNORE && LA52_0 <= KW_JAR)||(LA52_0 >= KW_KEYS && LA52_0 <= KW_LEFT)||(LA52_0 >= KW_LIKE && LA52_0 <= KW_LONG)||(LA52_0 >= KW_MAPJOIN && LA52_0 <= KW_MINUS)||(LA52_0 >= KW_MSCK && LA52_0 <= KW_NOSCAN)||(LA52_0 >= KW_NO_DROP && LA52_0 <= KW_OFFLINE)||LA52_0==KW_OPTION||(LA52_0 >= KW_ORCFILE && LA52_0 <= KW_OUTPUTFORMAT)||(LA52_0 >= KW_OVERWRITE && LA52_0 <= KW_PARQUETFILE)||(LA52_0 >= KW_PARTITION && LA52_0 <= KW_PLUS)||(LA52_0 >= KW_PRETTY && LA52_0 <= KW_RECORDWRITER)||(LA52_0 >= KW_REGEXP && LA52_0 <= KW_SCHEMAS)||(LA52_0 >= KW_SEMI && LA52_0 <= KW_TABLES)||(LA52_0 >= KW_TBLPROPERTIES && LA52_0 <= KW_TEXTFILE)||(LA52_0 >= KW_TIMESTAMP && LA52_0 <= KW_TRANSACTIONS)||(LA52_0 >= KW_TRIGGER && LA52_0 <= KW_UNARCHIVE)||(LA52_0 >= KW_UNDO && LA52_0 <= KW_UNIONTYPE)||(LA52_0 >= KW_UNLOCK && LA52_0 <= KW_VALUE_TYPE)||LA52_0==KW_VIEW||LA52_0==KW_WHILE||LA52_0==KW_WITH) ) {
				int LA52_2 = input.LA(2);
				if ( (LA52_2==KW_SET) ) {
					int LA52_4 = input.LA(3);
					if ( (LA52_4==KW_DBPROPERTIES) ) {
						alt52=1;
					}
					else if ( (LA52_4==KW_OWNER) ) {
						alt52=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 52, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 52, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 52, 0, input);
				throw nvae;
			}

			switch (alt52) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:984:7: alterDatabaseSuffixProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3991);
					alterDatabaseSuffixProperties199=alterDatabaseSuffixProperties();
					state._fsp--;

					adaptor.addChild(root_0, alterDatabaseSuffixProperties199.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:985:7: alterDatabaseSuffixSetOwner
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix3999);
					alterDatabaseSuffixSetOwner200=alterDatabaseSuffixSetOwner();
					state._fsp--;

					adaptor.addChild(root_0, alterDatabaseSuffixSetOwner200.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseStatementSuffix"


	public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixProperties"
	// D:\\temp\\antlr\\HiveParser.g:988:1: alterDatabaseSuffixProperties : name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
	public final HiveParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
		HiveParser.alterDatabaseSuffixProperties_return retval = new HiveParser.alterDatabaseSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET201=null;
		Token KW_DBPROPERTIES202=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbProperties203 =null;

		CommonTree KW_SET201_tree=null;
		CommonTree KW_DBPROPERTIES202_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("alter database properties statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:991:5: (name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
			// D:\\temp\\antlr\\HiveParser.g:991:7: name= identifier KW_SET KW_DBPROPERTIES dbProperties
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixProperties4028);
			name=identifier();
			state._fsp--;

			stream_identifier.add(name.getTree());
			KW_SET201=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4030);  
			stream_KW_SET.add(KW_SET201);

			KW_DBPROPERTIES202=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4032);  
			stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES202);

			pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4034);
			dbProperties203=dbProperties();
			state._fsp--;

			stream_dbProperties.add(dbProperties203.getTree());
			// AST REWRITE
			// elements: dbProperties, name
			// token labels: 
			// rule labels: retval, name
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 992:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
			{
				// D:\\temp\\antlr\\HiveParser.g:992:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				adaptor.addChild(root_1, stream_dbProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixProperties"


	public static class alterDatabaseSuffixSetOwner_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixSetOwner"
	// D:\\temp\\antlr\\HiveParser.g:995:1: alterDatabaseSuffixSetOwner : dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) ;
	public final HiveParser.alterDatabaseSuffixSetOwner_return alterDatabaseSuffixSetOwner() throws RecognitionException {
		HiveParser.alterDatabaseSuffixSetOwner_return retval = new HiveParser.alterDatabaseSuffixSetOwner_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET204=null;
		Token KW_OWNER205=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope principalName206 =null;

		CommonTree KW_SET204_tree=null;
		CommonTree KW_OWNER205_tree=null;
		RewriteRuleTokenStream stream_KW_OWNER=new RewriteRuleTokenStream(adaptor,"token KW_OWNER");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("alter database set owner", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:998:5: (dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) )
			// D:\\temp\\antlr\\HiveParser.g:998:7: dbName= identifier KW_SET KW_OWNER principalName
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4078);
			dbName=identifier();
			state._fsp--;

			stream_identifier.add(dbName.getTree());
			KW_SET204=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4080);  
			stream_KW_SET.add(KW_SET204);

			KW_OWNER205=(Token)match(input,KW_OWNER,FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4082);  
			stream_KW_OWNER.add(KW_OWNER205);

			pushFollow(FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4084);
			principalName206=principalName();
			state._fsp--;

			stream_principalName.add(principalName206.getTree());
			// AST REWRITE
			// elements: dbName, principalName
			// token labels: 
			// rule labels: retval, dbName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 999:5: -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
			{
				// D:\\temp\\antlr\\HiveParser.g:999:8: ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERDATABASE_OWNER, "TOK_ALTERDATABASE_OWNER"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixSetOwner"


	public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRename"
	// D:\\temp\\antlr\\HiveParser.g:1002:1: alterStatementSuffixRename : oldName= identifier KW_RENAME KW_TO newName= identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) ;
	public final HiveParser.alterStatementSuffixRename_return alterStatementSuffixRename() throws RecognitionException {
		HiveParser.alterStatementSuffixRename_return retval = new HiveParser.alterStatementSuffixRename_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RENAME207=null;
		Token KW_TO208=null;
		ParserRuleReturnScope oldName =null;
		ParserRuleReturnScope newName =null;

		CommonTree KW_RENAME207_tree=null;
		CommonTree KW_TO208_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("rename statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1005:5: (oldName= identifier KW_RENAME KW_TO newName= identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) )
			// D:\\temp\\antlr\\HiveParser.g:1005:7: oldName= identifier KW_RENAME KW_TO newName= identifier
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRename4128);
			oldName=identifier();
			state._fsp--;

			stream_identifier.add(oldName.getTree());
			KW_RENAME207=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename4130);  
			stream_KW_RENAME.add(KW_RENAME207);

			KW_TO208=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename4132);  
			stream_KW_TO.add(KW_TO208);

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRename4136);
			newName=identifier();
			state._fsp--;

			stream_identifier.add(newName.getTree());
			// AST REWRITE
			// elements: newName, oldName
			// token labels: 
			// rule labels: retval, newName, oldName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_newName=new RewriteRuleSubtreeStream(adaptor,"rule newName",newName!=null?newName.getTree():null);
			RewriteRuleSubtreeStream stream_oldName=new RewriteRuleSubtreeStream(adaptor,"rule oldName",oldName!=null?oldName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1006:5: -> ^( TOK_ALTERTABLE_RENAME $oldName $newName)
			{
				// D:\\temp\\antlr\\HiveParser.g:1006:8: ^( TOK_ALTERTABLE_RENAME $oldName $newName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);
				adaptor.addChild(root_1, stream_oldName.nextTree());
				adaptor.addChild(root_1, stream_newName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRename"


	public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddCol"
	// D:\\temp\\antlr\\HiveParser.g:1009:1: alterStatementSuffixAddCol : identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS identifier columnNameTypeList ) ;
	public final HiveParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
		HiveParser.alterStatementSuffixAddCol_return retval = new HiveParser.alterStatementSuffixAddCol_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token add=null;
		Token replace=null;
		Token KW_COLUMNS210=null;
		Token LPAREN211=null;
		Token RPAREN213=null;
		ParserRuleReturnScope identifier209 =null;
		ParserRuleReturnScope columnNameTypeList212 =null;

		CommonTree add_tree=null;
		CommonTree replace_tree=null;
		CommonTree KW_COLUMNS210_tree=null;
		CommonTree LPAREN211_tree=null;
		CommonTree RPAREN213_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("add column statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1012:5: ( identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS identifier columnNameTypeList ) )
			// D:\\temp\\antlr\\HiveParser.g:1012:7: identifier (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixAddCol4179);
			identifier209=identifier();
			state._fsp--;

			stream_identifier.add(identifier209.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1012:18: (add= KW_ADD |replace= KW_REPLACE )
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==KW_ADD) ) {
				alt53=1;
			}
			else if ( (LA53_0==KW_REPLACE) ) {
				alt53=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 53, 0, input);
				throw nvae;
			}

			switch (alt53) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1012:19: add= KW_ADD
					{
					add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol4184);  
					stream_KW_ADD.add(add);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1012:32: replace= KW_REPLACE
					{
					replace=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol4190);  
					stream_KW_REPLACE.add(replace);

					}
					break;

			}

			KW_COLUMNS210=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol4193);  
			stream_KW_COLUMNS.add(KW_COLUMNS210);

			LPAREN211=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol4195);  
			stream_LPAREN.add(LPAREN211);

			pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol4197);
			columnNameTypeList212=columnNameTypeList();
			state._fsp--;

			stream_columnNameTypeList.add(columnNameTypeList212.getTree());
			RPAREN213=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol4199);  
			stream_RPAREN.add(RPAREN213);

			// AST REWRITE
			// elements: identifier, columnNameTypeList, identifier, columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1013:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS identifier columnNameTypeList )
			if (add != null) {
				// D:\\temp\\antlr\\HiveParser.g:1013:24: ^( TOK_ALTERTABLE_ADDCOLS identifier columnNameTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1014:5: -> ^( TOK_ALTERTABLE_REPLACECOLS identifier columnNameTypeList )
			{
				// D:\\temp\\antlr\\HiveParser.g:1014:24: ^( TOK_ALTERTABLE_REPLACECOLS identifier columnNameTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddCol"


	public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenameCol"
	// D:\\temp\\antlr\\HiveParser.g:1017:1: alterStatementSuffixRenameCol : identifier KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) ;
	public final HiveParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
		HiveParser.alterStatementSuffixRenameCol_return retval = new HiveParser.alterStatementSuffixRenameCol_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_CHANGE215=null;
		Token KW_COLUMN216=null;
		Token KW_COMMENT218=null;
		ParserRuleReturnScope oldName =null;
		ParserRuleReturnScope newName =null;
		ParserRuleReturnScope identifier214 =null;
		ParserRuleReturnScope colType217 =null;
		ParserRuleReturnScope alterStatementChangeColPosition219 =null;

		CommonTree comment_tree=null;
		CommonTree KW_CHANGE215_tree=null;
		CommonTree KW_COLUMN216_tree=null;
		CommonTree KW_COMMENT218_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
		RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("rename column name", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1020:5: ( identifier KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1020:7: identifier KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )?
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol4272);
			identifier214=identifier();
			state._fsp--;

			stream_identifier.add(identifier214.getTree());
			KW_CHANGE215=(Token)match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol4274);  
			stream_KW_CHANGE.add(KW_CHANGE215);

			// D:\\temp\\antlr\\HiveParser.g:1020:28: ( KW_COLUMN )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==KW_COLUMN) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1020:28: KW_COLUMN
					{
					KW_COLUMN216=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol4276);  
					stream_KW_COLUMN.add(KW_COLUMN216);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol4281);
			oldName=identifier();
			state._fsp--;

			stream_identifier.add(oldName.getTree());
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol4285);
			newName=identifier();
			state._fsp--;

			stream_identifier.add(newName.getTree());
			pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol4287);
			colType217=colType();
			state._fsp--;

			stream_colType.add(colType217.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1020:85: ( KW_COMMENT comment= StringLiteral )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==KW_COMMENT) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1020:86: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT218=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol4290);  
					stream_KW_COMMENT.add(KW_COMMENT218);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol4294);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1020:121: ( alterStatementChangeColPosition )?
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==KW_AFTER||LA56_0==KW_FIRST) ) {
				alt56=1;
			}
			switch (alt56) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1020:121: alterStatementChangeColPosition
					{
					pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol4298);
					alterStatementChangeColPosition219=alterStatementChangeColPosition();
					state._fsp--;

					stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition219.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: comment, newName, colType, oldName, identifier, alterStatementChangeColPosition
			// token labels: comment
			// rule labels: retval, newName, oldName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_newName=new RewriteRuleSubtreeStream(adaptor,"rule newName",newName!=null?newName.getTree():null);
			RewriteRuleSubtreeStream stream_oldName=new RewriteRuleSubtreeStream(adaptor,"rule oldName",oldName!=null?oldName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1021:5: -> ^( TOK_ALTERTABLE_RENAMECOL identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1021:7: ^( TOK_ALTERTABLE_RENAMECOL identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_1, stream_oldName.nextTree());
				adaptor.addChild(root_1, stream_newName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1021:72: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				// D:\\temp\\antlr\\HiveParser.g:1021:81: ( alterStatementChangeColPosition )?
				if ( stream_alterStatementChangeColPosition.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementChangeColPosition.nextTree());
				}
				stream_alterStatementChangeColPosition.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenameCol"


	public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementChangeColPosition"
	// D:\\temp\\antlr\\HiveParser.g:1024:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
	public final HiveParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
		HiveParser.alterStatementChangeColPosition_return retval = new HiveParser.alterStatementChangeColPosition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token first=null;
		Token KW_AFTER220=null;
		ParserRuleReturnScope afterCol =null;

		CommonTree first_tree=null;
		CommonTree KW_AFTER220_tree=null;
		RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		try {
			// D:\\temp\\antlr\\HiveParser.g:1025:5: (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==KW_FIRST) ) {
				alt57=1;
			}
			else if ( (LA57_0==KW_AFTER) ) {
				alt57=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}

			switch (alt57) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1025:7: first= KW_FIRST
					{
					root_0 = (CommonTree)adaptor.nil();


					first=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition4344); 
					first_tree = (CommonTree)adaptor.create(first);
					adaptor.addChild(root_0, first_tree);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1025:22: KW_AFTER afterCol= identifier
					{
					KW_AFTER220=(Token)match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition4346);  
					stream_KW_AFTER.add(KW_AFTER220);

					pushFollow(FOLLOW_identifier_in_alterStatementChangeColPosition4350);
					afterCol=identifier();
					state._fsp--;

					stream_identifier.add(afterCol.getTree());
					// AST REWRITE
					// elements: afterCol
					// token labels: 
					// rule labels: retval, afterCol
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_afterCol=new RewriteRuleSubtreeStream(adaptor,"rule afterCol",afterCol!=null?afterCol.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1026:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
					if (first != null) {
						// D:\\temp\\antlr\\HiveParser.g:1026:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 1027:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
					{
						// D:\\temp\\antlr\\HiveParser.g:1027:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_1, stream_afterCol.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementChangeColPosition"


	public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitions"
	// D:\\temp\\antlr\\HiveParser.g:1030:1: alterStatementSuffixAddPartitions : identifier KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> ^( TOK_ALTERTABLE_ADDPARTS identifier ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) ;
	public final HiveParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions() throws RecognitionException {
		HiveParser.alterStatementSuffixAddPartitions_return retval = new HiveParser.alterStatementSuffixAddPartitions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ADD222=null;
		ParserRuleReturnScope identifier221 =null;
		ParserRuleReturnScope ifNotExists223 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitionsElement224 =null;

		CommonTree KW_ADD222_tree=null;
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitionsElement=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitionsElement");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("add partition statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1033:5: ( identifier KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> ^( TOK_ALTERTABLE_ADDPARTS identifier ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1033:7: identifier KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixAddPartitions4402);
			identifier221=identifier();
			state._fsp--;

			stream_identifier.add(identifier221.getTree());
			KW_ADD222=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4404);  
			stream_KW_ADD.add(KW_ADD222);

			// D:\\temp\\antlr\\HiveParser.g:1033:25: ( ifNotExists )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==KW_IF) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1033:25: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4406);
					ifNotExists223=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists223.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1033:38: ( alterStatementSuffixAddPartitionsElement )+
			int cnt59=0;
			loop59:
			while (true) {
				int alt59=2;
				int LA59_0 = input.LA(1);
				if ( (LA59_0==KW_PARTITION) ) {
					alt59=1;
				}

				switch (alt59) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1033:38: alterStatementSuffixAddPartitionsElement
					{
					pushFollow(FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions4409);
					alterStatementSuffixAddPartitionsElement224=alterStatementSuffixAddPartitionsElement();
					state._fsp--;

					stream_alterStatementSuffixAddPartitionsElement.add(alterStatementSuffixAddPartitionsElement224.getTree());
					}
					break;

				default :
					if ( cnt59 >= 1 ) break loop59;
					EarlyExitException eee = new EarlyExitException(59, input);
					throw eee;
				}
				cnt59++;
			}

			// AST REWRITE
			// elements: ifNotExists, identifier, alterStatementSuffixAddPartitionsElement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1034:5: -> ^( TOK_ALTERTABLE_ADDPARTS identifier ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1034:8: ^( TOK_ALTERTABLE_ADDPARTS identifier ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1034:45: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());
				}
				stream_alterStatementSuffixAddPartitionsElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitions"


	public static class alterStatementSuffixAddPartitionsElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitionsElement"
	// D:\\temp\\antlr\\HiveParser.g:1037:1: alterStatementSuffixAddPartitionsElement : partitionSpec ( partitionLocation )? ;
	public final HiveParser.alterStatementSuffixAddPartitionsElement_return alterStatementSuffixAddPartitionsElement() throws RecognitionException {
		HiveParser.alterStatementSuffixAddPartitionsElement_return retval = new HiveParser.alterStatementSuffixAddPartitionsElement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope partitionSpec225 =null;
		ParserRuleReturnScope partitionLocation226 =null;


		try {
			// D:\\temp\\antlr\\HiveParser.g:1038:5: ( partitionSpec ( partitionLocation )? )
			// D:\\temp\\antlr\\HiveParser.g:1038:7: partitionSpec ( partitionLocation )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement4445);
			partitionSpec225=partitionSpec();
			state._fsp--;

			adaptor.addChild(root_0, partitionSpec225.getTree());

			// D:\\temp\\antlr\\HiveParser.g:1038:21: ( partitionLocation )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==KW_LOCATION) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1038:21: partitionLocation
					{
					pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement4447);
					partitionLocation226=partitionLocation();
					state._fsp--;

					adaptor.addChild(root_0, partitionLocation226.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitionsElement"


	public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixTouch"
	// D:\\temp\\antlr\\HiveParser.g:1041:1: alterStatementSuffixTouch : identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH identifier ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
		HiveParser.alterStatementSuffixTouch_return retval = new HiveParser.alterStatementSuffixTouch_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TOUCH228=null;
		ParserRuleReturnScope identifier227 =null;
		ParserRuleReturnScope partitionSpec229 =null;

		CommonTree KW_TOUCH228_tree=null;
		RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("touch statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1044:5: ( identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH identifier ( partitionSpec )* ) )
			// D:\\temp\\antlr\\HiveParser.g:1044:7: identifier KW_TOUCH ( partitionSpec )*
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixTouch4475);
			identifier227=identifier();
			state._fsp--;

			stream_identifier.add(identifier227.getTree());
			KW_TOUCH228=(Token)match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch4477);  
			stream_KW_TOUCH.add(KW_TOUCH228);

			// D:\\temp\\antlr\\HiveParser.g:1044:27: ( partitionSpec )*
			loop61:
			while (true) {
				int alt61=2;
				int LA61_0 = input.LA(1);
				if ( (LA61_0==KW_PARTITION) ) {
					alt61=1;
				}

				switch (alt61) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1044:28: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch4480);
					partitionSpec229=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec229.getTree());
					}
					break;

				default :
					break loop61;
				}
			}

			// AST REWRITE
			// elements: partitionSpec, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1045:5: -> ^( TOK_ALTERTABLE_TOUCH identifier ( partitionSpec )* )
			{
				// D:\\temp\\antlr\\HiveParser.g:1045:8: ^( TOK_ALTERTABLE_TOUCH identifier ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1045:42: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixTouch"


	public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixArchive"
	// D:\\temp\\antlr\\HiveParser.g:1048:1: alterStatementSuffixArchive : identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE identifier ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixArchive_return retval = new HiveParser.alterStatementSuffixArchive_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ARCHIVE231=null;
		ParserRuleReturnScope identifier230 =null;
		ParserRuleReturnScope partitionSpec232 =null;

		CommonTree KW_ARCHIVE231_tree=null;
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("archive statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1051:5: ( identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE identifier ( partitionSpec )* ) )
			// D:\\temp\\antlr\\HiveParser.g:1051:7: identifier KW_ARCHIVE ( partitionSpec )*
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixArchive4526);
			identifier230=identifier();
			state._fsp--;

			stream_identifier.add(identifier230.getTree());
			KW_ARCHIVE231=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4528);  
			stream_KW_ARCHIVE.add(KW_ARCHIVE231);

			// D:\\temp\\antlr\\HiveParser.g:1051:29: ( partitionSpec )*
			loop62:
			while (true) {
				int alt62=2;
				int LA62_0 = input.LA(1);
				if ( (LA62_0==KW_PARTITION) ) {
					alt62=1;
				}

				switch (alt62) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1051:30: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive4531);
					partitionSpec232=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec232.getTree());
					}
					break;

				default :
					break loop62;
				}
			}

			// AST REWRITE
			// elements: partitionSpec, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1052:5: -> ^( TOK_ALTERTABLE_ARCHIVE identifier ( partitionSpec )* )
			{
				// D:\\temp\\antlr\\HiveParser.g:1052:8: ^( TOK_ALTERTABLE_ARCHIVE identifier ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1052:44: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixArchive"


	public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUnArchive"
	// D:\\temp\\antlr\\HiveParser.g:1055:1: alterStatementSuffixUnArchive : identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE identifier ( partitionSpec )* ) ;
	public final HiveParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
		HiveParser.alterStatementSuffixUnArchive_return retval = new HiveParser.alterStatementSuffixUnArchive_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNARCHIVE234=null;
		ParserRuleReturnScope identifier233 =null;
		ParserRuleReturnScope partitionSpec235 =null;

		CommonTree KW_UNARCHIVE234_tree=null;
		RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("unarchive statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1058:5: ( identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE identifier ( partitionSpec )* ) )
			// D:\\temp\\antlr\\HiveParser.g:1058:7: identifier KW_UNARCHIVE ( partitionSpec )*
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixUnArchive4577);
			identifier233=identifier();
			state._fsp--;

			stream_identifier.add(identifier233.getTree());
			KW_UNARCHIVE234=(Token)match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4579);  
			stream_KW_UNARCHIVE.add(KW_UNARCHIVE234);

			// D:\\temp\\antlr\\HiveParser.g:1058:31: ( partitionSpec )*
			loop63:
			while (true) {
				int alt63=2;
				int LA63_0 = input.LA(1);
				if ( (LA63_0==KW_PARTITION) ) {
					alt63=1;
				}

				switch (alt63) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1058:32: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4582);
					partitionSpec235=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec235.getTree());
					}
					break;

				default :
					break loop63;
				}
			}

			// AST REWRITE
			// elements: partitionSpec, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1059:5: -> ^( TOK_ALTERTABLE_UNARCHIVE identifier ( partitionSpec )* )
			{
				// D:\\temp\\antlr\\HiveParser.g:1059:8: ^( TOK_ALTERTABLE_UNARCHIVE identifier ( partitionSpec )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1059:46: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUnArchive"


	public static class partitionLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partitionLocation"
	// D:\\temp\\antlr\\HiveParser.g:1062:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
	public final HiveParser.partitionLocation_return partitionLocation() throws RecognitionException {
		HiveParser.partitionLocation_return retval = new HiveParser.partitionLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION236=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION236_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("partition location", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1065:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
			// D:\\temp\\antlr\\HiveParser.g:1066:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION236=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation4634);  
			stream_KW_LOCATION.add(KW_LOCATION236);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation4638);  
			stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1066:38: -> ^( TOK_PARTITIONLOCATION $locn)
			{
				// D:\\temp\\antlr\\HiveParser.g:1066:41: ^( TOK_PARTITIONLOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partitionLocation"


	public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropPartitions"
	// D:\\temp\\antlr\\HiveParser.g:1069:1: alterStatementSuffixDropPartitions : identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )? -> ^( TOK_ALTERTABLE_DROPPARTS identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ) ;
	public final HiveParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions() throws RecognitionException {
		HiveParser.alterStatementSuffixDropPartitions_return retval = new HiveParser.alterStatementSuffixDropPartitions_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP238=null;
		Token COMMA241=null;
		ParserRuleReturnScope identifier237 =null;
		ParserRuleReturnScope ifExists239 =null;
		ParserRuleReturnScope dropPartitionSpec240 =null;
		ParserRuleReturnScope dropPartitionSpec242 =null;
		ParserRuleReturnScope ignoreProtection243 =null;

		CommonTree KW_DROP238_tree=null;
		CommonTree COMMA241_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
		RewriteRuleSubtreeStream stream_ignoreProtection=new RewriteRuleSubtreeStream(adaptor,"rule ignoreProtection");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("drop partition statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1072:5: ( identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )? -> ^( TOK_ALTERTABLE_DROPPARTS identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1072:7: identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )?
			{
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixDropPartitions4674);
			identifier237=identifier();
			state._fsp--;

			stream_identifier.add(identifier237.getTree());
			KW_DROP238=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4676);  
			stream_KW_DROP.add(KW_DROP238);

			// D:\\temp\\antlr\\HiveParser.g:1072:26: ( ifExists )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==KW_IF) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1072:26: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4678);
					ifExists239=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists239.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4681);
			dropPartitionSpec240=dropPartitionSpec();
			state._fsp--;

			stream_dropPartitionSpec.add(dropPartitionSpec240.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1072:54: ( COMMA dropPartitionSpec )*
			loop65:
			while (true) {
				int alt65=2;
				int LA65_0 = input.LA(1);
				if ( (LA65_0==COMMA) ) {
					alt65=1;
				}

				switch (alt65) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1072:55: COMMA dropPartitionSpec
					{
					COMMA241=(Token)match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4684);  
					stream_COMMA.add(COMMA241);

					pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4686);
					dropPartitionSpec242=dropPartitionSpec();
					state._fsp--;

					stream_dropPartitionSpec.add(dropPartitionSpec242.getTree());
					}
					break;

				default :
					break loop65;
				}
			}

			// D:\\temp\\antlr\\HiveParser.g:1072:81: ( ignoreProtection )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==KW_IGNORE) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1072:81: ignoreProtection
					{
					pushFollow(FOLLOW_ignoreProtection_in_alterStatementSuffixDropPartitions4690);
					ignoreProtection243=ignoreProtection();
					state._fsp--;

					stream_ignoreProtection.add(ignoreProtection243.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: dropPartitionSpec, ifExists, ignoreProtection, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1073:5: -> ^( TOK_ALTERTABLE_DROPPARTS identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1073:8: ^( TOK_ALTERTABLE_DROPPARTS identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				if ( !(stream_dropPartitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dropPartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());
				}
				stream_dropPartitionSpec.reset();

				// D:\\temp\\antlr\\HiveParser.g:1073:65: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// D:\\temp\\antlr\\HiveParser.g:1073:75: ( ignoreProtection )?
				if ( stream_ignoreProtection.hasNext() ) {
					adaptor.addChild(root_1, stream_ignoreProtection.nextTree());
				}
				stream_ignoreProtection.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropPartitions"


	public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixProperties"
	// D:\\temp\\antlr\\HiveParser.g:1076:1: alterStatementSuffixProperties : (name= identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) |name= identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? ) );
	public final HiveParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixProperties_return retval = new HiveParser.alterStatementSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET244=null;
		Token KW_TBLPROPERTIES245=null;
		Token KW_UNSET247=null;
		Token KW_TBLPROPERTIES248=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope tableProperties246 =null;
		ParserRuleReturnScope ifExists249 =null;
		ParserRuleReturnScope tableProperties250 =null;

		CommonTree KW_SET244_tree=null;
		CommonTree KW_TBLPROPERTIES245_tree=null;
		CommonTree KW_UNSET247_tree=null;
		CommonTree KW_TBLPROPERTIES248_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("alter properties statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1079:5: (name= identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) |name= identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? ) )
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==Identifier) ) {
				int LA68_1 = input.LA(2);
				if ( (LA68_1==KW_SET) ) {
					alt68=1;
				}
				else if ( (LA68_1==KW_UNSET) ) {
					alt68=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA68_0 >= KW_ADD && LA68_0 <= KW_ANALYZE)||(LA68_0 >= KW_ARCHIVE && LA68_0 <= KW_CASCADE)||LA68_0==KW_CHANGE||(LA68_0 >= KW_CLUSTER && LA68_0 <= KW_COLLECTION)||(LA68_0 >= KW_COLUMNS && LA68_0 <= KW_CREATE)||LA68_0==KW_CUBE||(LA68_0 >= KW_CURSOR && LA68_0 <= KW_DATA)||(LA68_0 >= KW_DATABASES && LA68_0 <= KW_DISABLE)||(LA68_0 >= KW_DISTRIBUTE && LA68_0 <= KW_ELEM_TYPE)||LA68_0==KW_ENABLE||LA68_0==KW_ESCAPED||(LA68_0 >= KW_EXCLUSIVE && LA68_0 <= KW_EXPORT)||(LA68_0 >= KW_EXTERNAL && LA68_0 <= KW_FLOAT)||(LA68_0 >= KW_FOR && LA68_0 <= KW_FORMATTED)||LA68_0==KW_FULL||(LA68_0 >= KW_FUNCTIONS && LA68_0 <= KW_GROUPING)||(LA68_0 >= KW_HOLD_DDLTIME && LA68_0 <= KW_IDXPROPERTIES)||(LA68_0 >= KW_IGNORE && LA68_0 <= KW_JAR)||(LA68_0 >= KW_KEYS && LA68_0 <= KW_LEFT)||(LA68_0 >= KW_LIKE && LA68_0 <= KW_LONG)||(LA68_0 >= KW_MAPJOIN && LA68_0 <= KW_MINUS)||(LA68_0 >= KW_MSCK && LA68_0 <= KW_NOSCAN)||(LA68_0 >= KW_NO_DROP && LA68_0 <= KW_OFFLINE)||LA68_0==KW_OPTION||(LA68_0 >= KW_ORCFILE && LA68_0 <= KW_OUTPUTFORMAT)||(LA68_0 >= KW_OVERWRITE && LA68_0 <= KW_PARQUETFILE)||(LA68_0 >= KW_PARTITION && LA68_0 <= KW_PLUS)||(LA68_0 >= KW_PRETTY && LA68_0 <= KW_RECORDWRITER)||(LA68_0 >= KW_REGEXP && LA68_0 <= KW_SCHEMAS)||(LA68_0 >= KW_SEMI && LA68_0 <= KW_TABLES)||(LA68_0 >= KW_TBLPROPERTIES && LA68_0 <= KW_TEXTFILE)||(LA68_0 >= KW_TIMESTAMP && LA68_0 <= KW_TRANSACTIONS)||(LA68_0 >= KW_TRIGGER && LA68_0 <= KW_UNARCHIVE)||(LA68_0 >= KW_UNDO && LA68_0 <= KW_UNIONTYPE)||(LA68_0 >= KW_UNLOCK && LA68_0 <= KW_VALUE_TYPE)||LA68_0==KW_VIEW||LA68_0==KW_WHILE||LA68_0==KW_WITH) ) {
				int LA68_2 = input.LA(2);
				if ( (LA68_2==KW_SET) ) {
					alt68=1;
				}
				else if ( (LA68_2==KW_UNSET) ) {
					alt68=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 68, 0, input);
				throw nvae;
			}

			switch (alt68) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1079:7: name= identifier KW_SET KW_TBLPROPERTIES tableProperties
					{
					pushFollow(FOLLOW_identifier_in_alterStatementSuffixProperties4741);
					name=identifier();
					state._fsp--;

					stream_identifier.add(name.getTree());
					KW_SET244=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties4743);  
					stream_KW_SET.add(KW_SET244);

					KW_TBLPROPERTIES245=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4745);  
					stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES245);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties4747);
					tableProperties246=tableProperties();
					state._fsp--;

					stream_tableProperties.add(tableProperties246.getTree());
					// AST REWRITE
					// elements: tableProperties, name
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1080:5: -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
					{
						// D:\\temp\\antlr\\HiveParser.g:1080:8: ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1081:7: name= identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					pushFollow(FOLLOW_identifier_in_alterStatementSuffixProperties4772);
					name=identifier();
					state._fsp--;

					stream_identifier.add(name.getTree());
					KW_UNSET247=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterStatementSuffixProperties4774);  
					stream_KW_UNSET.add(KW_UNSET247);

					KW_TBLPROPERTIES248=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4776);  
					stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES248);

					// D:\\temp\\antlr\\HiveParser.g:1081:49: ( ifExists )?
					int alt67=2;
					int LA67_0 = input.LA(1);
					if ( (LA67_0==KW_IF) ) {
						alt67=1;
					}
					switch (alt67) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1081:49: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterStatementSuffixProperties4778);
							ifExists249=ifExists();
							state._fsp--;

							stream_ifExists.add(ifExists249.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties4781);
					tableProperties250=tableProperties();
					state._fsp--;

					stream_tableProperties.add(tableProperties250.getTree());
					// AST REWRITE
					// elements: ifExists, name, tableProperties
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1082:5: -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1082:8: ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPTABLE_PROPERTIES, "TOK_DROPTABLE_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1082:57: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixProperties"


	public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterViewSuffixProperties"
	// D:\\temp\\antlr\\HiveParser.g:1085:1: alterViewSuffixProperties : (name= identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) |name= identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? ) );
	public final HiveParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
		HiveParser.alterViewSuffixProperties_return retval = new HiveParser.alterViewSuffixProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET251=null;
		Token KW_TBLPROPERTIES252=null;
		Token KW_UNSET254=null;
		Token KW_TBLPROPERTIES255=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope tableProperties253 =null;
		ParserRuleReturnScope ifExists256 =null;
		ParserRuleReturnScope tableProperties257 =null;

		CommonTree KW_SET251_tree=null;
		CommonTree KW_TBLPROPERTIES252_tree=null;
		CommonTree KW_UNSET254_tree=null;
		CommonTree KW_TBLPROPERTIES255_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("alter view properties statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1088:5: (name= identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) |name= identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? ) )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==Identifier) ) {
				int LA70_1 = input.LA(2);
				if ( (LA70_1==KW_SET) ) {
					alt70=1;
				}
				else if ( (LA70_1==KW_UNSET) ) {
					alt70=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA70_0 >= KW_ADD && LA70_0 <= KW_ANALYZE)||(LA70_0 >= KW_ARCHIVE && LA70_0 <= KW_CASCADE)||LA70_0==KW_CHANGE||(LA70_0 >= KW_CLUSTER && LA70_0 <= KW_COLLECTION)||(LA70_0 >= KW_COLUMNS && LA70_0 <= KW_CREATE)||LA70_0==KW_CUBE||(LA70_0 >= KW_CURSOR && LA70_0 <= KW_DATA)||(LA70_0 >= KW_DATABASES && LA70_0 <= KW_DISABLE)||(LA70_0 >= KW_DISTRIBUTE && LA70_0 <= KW_ELEM_TYPE)||LA70_0==KW_ENABLE||LA70_0==KW_ESCAPED||(LA70_0 >= KW_EXCLUSIVE && LA70_0 <= KW_EXPORT)||(LA70_0 >= KW_EXTERNAL && LA70_0 <= KW_FLOAT)||(LA70_0 >= KW_FOR && LA70_0 <= KW_FORMATTED)||LA70_0==KW_FULL||(LA70_0 >= KW_FUNCTIONS && LA70_0 <= KW_GROUPING)||(LA70_0 >= KW_HOLD_DDLTIME && LA70_0 <= KW_IDXPROPERTIES)||(LA70_0 >= KW_IGNORE && LA70_0 <= KW_JAR)||(LA70_0 >= KW_KEYS && LA70_0 <= KW_LEFT)||(LA70_0 >= KW_LIKE && LA70_0 <= KW_LONG)||(LA70_0 >= KW_MAPJOIN && LA70_0 <= KW_MINUS)||(LA70_0 >= KW_MSCK && LA70_0 <= KW_NOSCAN)||(LA70_0 >= KW_NO_DROP && LA70_0 <= KW_OFFLINE)||LA70_0==KW_OPTION||(LA70_0 >= KW_ORCFILE && LA70_0 <= KW_OUTPUTFORMAT)||(LA70_0 >= KW_OVERWRITE && LA70_0 <= KW_PARQUETFILE)||(LA70_0 >= KW_PARTITION && LA70_0 <= KW_PLUS)||(LA70_0 >= KW_PRETTY && LA70_0 <= KW_RECORDWRITER)||(LA70_0 >= KW_REGEXP && LA70_0 <= KW_SCHEMAS)||(LA70_0 >= KW_SEMI && LA70_0 <= KW_TABLES)||(LA70_0 >= KW_TBLPROPERTIES && LA70_0 <= KW_TEXTFILE)||(LA70_0 >= KW_TIMESTAMP && LA70_0 <= KW_TRANSACTIONS)||(LA70_0 >= KW_TRIGGER && LA70_0 <= KW_UNARCHIVE)||(LA70_0 >= KW_UNDO && LA70_0 <= KW_UNIONTYPE)||(LA70_0 >= KW_UNLOCK && LA70_0 <= KW_VALUE_TYPE)||LA70_0==KW_VIEW||LA70_0==KW_WHILE||LA70_0==KW_WITH) ) {
				int LA70_2 = input.LA(2);
				if ( (LA70_2==KW_SET) ) {
					alt70=1;
				}
				else if ( (LA70_2==KW_UNSET) ) {
					alt70=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1088:7: name= identifier KW_SET KW_TBLPROPERTIES tableProperties
					{
					pushFollow(FOLLOW_identifier_in_alterViewSuffixProperties4828);
					name=identifier();
					state._fsp--;

					stream_identifier.add(name.getTree());
					KW_SET251=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties4830);  
					stream_KW_SET.add(KW_SET251);

					KW_TBLPROPERTIES252=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4832);  
					stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES252);

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties4834);
					tableProperties253=tableProperties();
					state._fsp--;

					stream_tableProperties.add(tableProperties253.getTree());
					// AST REWRITE
					// elements: name, tableProperties
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1089:5: -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
					{
						// D:\\temp\\antlr\\HiveParser.g:1089:8: ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1090:7: name= identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					pushFollow(FOLLOW_identifier_in_alterViewSuffixProperties4859);
					name=identifier();
					state._fsp--;

					stream_identifier.add(name.getTree());
					KW_UNSET254=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterViewSuffixProperties4861);  
					stream_KW_UNSET.add(KW_UNSET254);

					KW_TBLPROPERTIES255=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4863);  
					stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES255);

					// D:\\temp\\antlr\\HiveParser.g:1090:49: ( ifExists )?
					int alt69=2;
					int LA69_0 = input.LA(1);
					if ( (LA69_0==KW_IF) ) {
						alt69=1;
					}
					switch (alt69) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1090:49: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterViewSuffixProperties4865);
							ifExists256=ifExists();
							state._fsp--;

							stream_ifExists.add(ifExists256.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties4868);
					tableProperties257=tableProperties();
					state._fsp--;

					stream_tableProperties.add(tableProperties257.getTree());
					// AST REWRITE
					// elements: ifExists, name, tableProperties
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1091:5: -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1091:8: ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPVIEW_PROPERTIES, "TOK_DROPVIEW_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1091:56: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewSuffixProperties"


	public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSerdeProperties"
	// D:\\temp\\antlr\\HiveParser.g:1094:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
	public final HiveParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
		HiveParser.alterStatementSuffixSerdeProperties_return retval = new HiveParser.alterStatementSuffixSerdeProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token serdeName=null;
		Token KW_SET258=null;
		Token KW_SERDE259=null;
		Token KW_WITH260=null;
		Token KW_SERDEPROPERTIES261=null;
		Token KW_SET263=null;
		Token KW_SERDEPROPERTIES264=null;
		ParserRuleReturnScope tableProperties262 =null;
		ParserRuleReturnScope tableProperties265 =null;

		CommonTree serdeName_tree=null;
		CommonTree KW_SET258_tree=null;
		CommonTree KW_SERDE259_tree=null;
		CommonTree KW_WITH260_tree=null;
		CommonTree KW_SERDEPROPERTIES261_tree=null;
		CommonTree KW_SET263_tree=null;
		CommonTree KW_SERDEPROPERTIES264_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("alter serdes statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1097:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==KW_SET) ) {
				int LA72_1 = input.LA(2);
				if ( (LA72_1==KW_SERDE) ) {
					alt72=1;
				}
				else if ( (LA72_1==KW_SERDEPROPERTIES) ) {
					alt72=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 72, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 72, 0, input);
				throw nvae;
			}

			switch (alt72) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1097:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					{
					KW_SET258=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4913);  
					stream_KW_SET.add(KW_SET258);

					KW_SERDE259=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4915);  
					stream_KW_SERDE.add(KW_SERDE259);

					serdeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4919);  
					stream_StringLiteral.add(serdeName);

					// D:\\temp\\antlr\\HiveParser.g:1097:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					int alt71=2;
					int LA71_0 = input.LA(1);
					if ( (LA71_0==KW_WITH) ) {
						alt71=1;
					}
					switch (alt71) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1097:48: KW_WITH KW_SERDEPROPERTIES tableProperties
							{
							KW_WITH260=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4922);  
							stream_KW_WITH.add(KW_WITH260);

							KW_SERDEPROPERTIES261=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4924);  
							stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES261);

							pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4926);
							tableProperties262=tableProperties();
							state._fsp--;

							stream_tableProperties.add(tableProperties262.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: serdeName, tableProperties
					// token labels: serdeName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1098:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1098:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_serdeName.nextNode());
						// D:\\temp\\antlr\\HiveParser.g:1098:47: ( tableProperties )?
						if ( stream_tableProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_tableProperties.nextTree());
						}
						stream_tableProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1099:7: KW_SET KW_SERDEPROPERTIES tableProperties
					{
					KW_SET263=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4952);  
					stream_KW_SET.add(KW_SET263);

					KW_SERDEPROPERTIES264=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4954);  
					stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES264);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4956);
					tableProperties265=tableProperties();
					state._fsp--;

					stream_tableProperties.add(tableProperties265.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1100:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
					{
						// D:\\temp\\antlr\\HiveParser.g:1100:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSerdeProperties"


	public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePartitionPrefix"
	// D:\\temp\\antlr\\HiveParser.g:1103:1: tablePartitionPrefix : name= identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) ;
	public final HiveParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
		HiveParser.tablePartitionPrefix_return retval = new HiveParser.tablePartitionPrefix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope name =null;
		ParserRuleReturnScope partitionSpec266 =null;

		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("table partition prefix", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1106:3: (name= identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1106:4: name= identifier ( partitionSpec )?
			{
			pushFollow(FOLLOW_identifier_in_tablePartitionPrefix4994);
			name=identifier();
			state._fsp--;

			stream_identifier.add(name.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1106:20: ( partitionSpec )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==KW_PARTITION) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1106:20: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix4996);
					partitionSpec266=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec266.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, name
			// token labels: 
			// rule labels: retval, name
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1107:3: -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1107:5: ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1107:33: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartitionPrefix"


	public static class alterTblPartitionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatement"
	// D:\\temp\\antlr\\HiveParser.g:1110:1: alterTblPartitionStatement : tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) ;
	public final HiveParser.alterTblPartitionStatement_return alterTblPartitionStatement() throws RecognitionException {
		HiveParser.alterTblPartitionStatement_return retval = new HiveParser.alterTblPartitionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tablePartitionPrefix267 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffix268 =null;

		RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
		RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");

		pushMsg("alter table partition statement", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1113:3: ( tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) )
			// D:\\temp\\antlr\\HiveParser.g:1113:5: tablePartitionPrefix alterTblPartitionStatementSuffix
			{
			pushFollow(FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement5033);
			tablePartitionPrefix267=tablePartitionPrefix();
			state._fsp--;

			stream_tablePartitionPrefix.add(tablePartitionPrefix267.getTree());
			pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement5035);
			alterTblPartitionStatementSuffix268=alterTblPartitionStatementSuffix();
			state._fsp--;

			stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix268.getTree());
			// AST REWRITE
			// elements: alterTblPartitionStatementSuffix, tablePartitionPrefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1114:3: -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
			{
				// D:\\temp\\antlr\\HiveParser.g:1114:6: ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PARTITION, "TOK_ALTERTABLE_PARTITION"), root_1);
				adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());
				adaptor.addChild(root_1, stream_alterTblPartitionStatementSuffix.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatement"


	public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffix"
	// D:\\temp\\antlr\\HiveParser.g:1117:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact );
	public final HiveParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
		HiveParser.alterTblPartitionStatementSuffix_return retval = new HiveParser.alterTblPartitionStatementSuffix_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterStatementSuffixFileFormat269 =null;
		ParserRuleReturnScope alterStatementSuffixLocation270 =null;
		ParserRuleReturnScope alterStatementSuffixProtectMode271 =null;
		ParserRuleReturnScope alterStatementSuffixMergeFiles272 =null;
		ParserRuleReturnScope alterStatementSuffixSerdeProperties273 =null;
		ParserRuleReturnScope alterStatementSuffixRenamePart274 =null;
		ParserRuleReturnScope alterStatementSuffixBucketNum275 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffixSkewedLocation276 =null;
		ParserRuleReturnScope alterStatementSuffixClusterbySortby277 =null;
		ParserRuleReturnScope alterStatementSuffixCompact278 =null;


		pushMsg("alter table partition statement suffix", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1120:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact )
			int alt74=10;
			switch ( input.LA(1) ) {
			case KW_SET:
				{
				switch ( input.LA(2) ) {
				case KW_FILEFORMAT:
					{
					alt74=1;
					}
					break;
				case KW_LOCATION:
					{
					alt74=2;
					}
					break;
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
					{
					alt74=5;
					}
					break;
				case KW_SKEWED:
					{
					alt74=8;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 74, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_DISABLE:
			case KW_ENABLE:
				{
				alt74=3;
				}
				break;
			case KW_CONCATENATE:
				{
				alt74=4;
				}
				break;
			case KW_RENAME:
				{
				alt74=6;
				}
				break;
			case KW_INTO:
				{
				alt74=7;
				}
				break;
			case KW_CLUSTERED:
			case KW_NOT:
				{
				alt74=9;
				}
				break;
			case KW_COMPACT:
				{
				alt74=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 74, 0, input);
				throw nvae;
			}
			switch (alt74) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1120:5: alterStatementSuffixFileFormat
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix5070);
					alterStatementSuffixFileFormat269=alterStatementSuffixFileFormat();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixFileFormat269.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1121:5: alterStatementSuffixLocation
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix5076);
					alterStatementSuffixLocation270=alterStatementSuffixLocation();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixLocation270.getTree());

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1122:5: alterStatementSuffixProtectMode
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix5082);
					alterStatementSuffixProtectMode271=alterStatementSuffixProtectMode();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixProtectMode271.getTree());

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:1123:5: alterStatementSuffixMergeFiles
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix5088);
					alterStatementSuffixMergeFiles272=alterStatementSuffixMergeFiles();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixMergeFiles272.getTree());

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:1124:5: alterStatementSuffixSerdeProperties
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix5094);
					alterStatementSuffixSerdeProperties273=alterStatementSuffixSerdeProperties();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixSerdeProperties273.getTree());

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:1125:5: alterStatementSuffixRenamePart
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix5100);
					alterStatementSuffixRenamePart274=alterStatementSuffixRenamePart();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixRenamePart274.getTree());

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:1126:5: alterStatementSuffixBucketNum
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix5106);
					alterStatementSuffixBucketNum275=alterStatementSuffixBucketNum();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixBucketNum275.getTree());

					}
					break;
				case 8 :
					// D:\\temp\\antlr\\HiveParser.g:1127:5: alterTblPartitionStatementSuffixSkewedLocation
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix5112);
					alterTblPartitionStatementSuffixSkewedLocation276=alterTblPartitionStatementSuffixSkewedLocation();
					state._fsp--;

					adaptor.addChild(root_0, alterTblPartitionStatementSuffixSkewedLocation276.getTree());

					}
					break;
				case 9 :
					// D:\\temp\\antlr\\HiveParser.g:1128:5: alterStatementSuffixClusterbySortby
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix5118);
					alterStatementSuffixClusterbySortby277=alterStatementSuffixClusterbySortby();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixClusterbySortby277.getTree());

					}
					break;
				case 10 :
					// D:\\temp\\antlr\\HiveParser.g:1129:5: alterStatementSuffixCompact
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix5124);
					alterStatementSuffixCompact278=alterStatementSuffixCompact();
					state._fsp--;

					adaptor.addChild(root_0, alterStatementSuffixCompact278.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffix"


	public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixFileFormat"
	// D:\\temp\\antlr\\HiveParser.g:1132:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
	public final HiveParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
		HiveParser.alterStatementSuffixFileFormat_return retval = new HiveParser.alterStatementSuffixFileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET279=null;
		Token KW_FILEFORMAT280=null;
		ParserRuleReturnScope fileFormat281 =null;

		CommonTree KW_SET279_tree=null;
		CommonTree KW_FILEFORMAT280_tree=null;
		RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");

		pushMsg("alter fileformat statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1135:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
			// D:\\temp\\antlr\\HiveParser.g:1135:4: KW_SET KW_FILEFORMAT fileFormat
			{
			KW_SET279=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat5146);  
			stream_KW_SET.add(KW_SET279);

			KW_FILEFORMAT280=(Token)match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat5148);  
			stream_KW_FILEFORMAT.add(KW_FILEFORMAT280);

			pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat5150);
			fileFormat281=fileFormat();
			state._fsp--;

			stream_fileFormat.add(fileFormat281.getTree());
			// AST REWRITE
			// elements: fileFormat
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1136:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
			{
				// D:\\temp\\antlr\\HiveParser.g:1136:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);
				adaptor.addChild(root_1, stream_fileFormat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixFileFormat"


	public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixClusterbySortby"
	// D:\\temp\\antlr\\HiveParser.g:1139:1: alterStatementSuffixClusterbySortby : ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) );
	public final HiveParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
		HiveParser.alterStatementSuffixClusterbySortby_return retval = new HiveParser.alterStatementSuffixClusterbySortby_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NOT282=null;
		Token KW_CLUSTERED283=null;
		Token KW_NOT284=null;
		Token KW_SORTED285=null;
		ParserRuleReturnScope tableBuckets286 =null;

		CommonTree KW_NOT282_tree=null;
		CommonTree KW_CLUSTERED283_tree=null;
		CommonTree KW_NOT284_tree=null;
		CommonTree KW_SORTED285_tree=null;
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");

		pushMsg("alter partition cluster by sort by statement", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1142:3: ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) )
			int alt75=3;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==KW_NOT) ) {
				int LA75_1 = input.LA(2);
				if ( (LA75_1==KW_CLUSTERED) ) {
					alt75=1;
				}
				else if ( (LA75_1==KW_SORTED) ) {
					alt75=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 75, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA75_0==KW_CLUSTERED) ) {
				alt75=3;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}

			switch (alt75) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1142:5: KW_NOT KW_CLUSTERED
					{
					KW_NOT282=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5181);  
					stream_KW_NOT.add(KW_NOT282);

					KW_CLUSTERED283=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5183);  
					stream_KW_CLUSTERED.add(KW_CLUSTERED283);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1142:25: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
					{
						// D:\\temp\\antlr\\HiveParser.g:1142:28: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NOT_CLUSTERED, "TOK_NOT_CLUSTERED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1143:5: KW_NOT KW_SORTED
					{
					KW_NOT284=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5197);  
					stream_KW_NOT.add(KW_NOT284);

					KW_SORTED285=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby5199);  
					stream_KW_SORTED.add(KW_SORTED285);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1143:22: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
					{
						// D:\\temp\\antlr\\HiveParser.g:1143:25: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NOT_SORTED, "TOK_NOT_SORTED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1144:5: tableBuckets
					{
					pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5213);
					tableBuckets286=tableBuckets();
					state._fsp--;

					stream_tableBuckets.add(tableBuckets286.getTree());
					// AST REWRITE
					// elements: tableBuckets
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1144:18: -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
					{
						// D:\\temp\\antlr\\HiveParser.g:1144:21: ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, stream_tableBuckets.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixClusterbySortby"


	public static class alterTblPartitionStatementSuffixSkewedLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffixSkewedLocation"
	// D:\\temp\\antlr\\HiveParser.g:1147:1: alterTblPartitionStatementSuffixSkewedLocation : KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations ) ;
	public final HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
		HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return retval = new HiveParser.alterTblPartitionStatementSuffixSkewedLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET287=null;
		Token KW_SKEWED288=null;
		Token KW_LOCATION289=null;
		ParserRuleReturnScope skewedLocations290 =null;

		CommonTree KW_SET287_tree=null;
		CommonTree KW_SKEWED288_tree=null;
		CommonTree KW_LOCATION289_tree=null;
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleSubtreeStream stream_skewedLocations=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocations");

		pushMsg("alter partition skewed location", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1150:3: ( KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations ) )
			// D:\\temp\\antlr\\HiveParser.g:1150:5: KW_SET KW_SKEWED KW_LOCATION skewedLocations
			{
			KW_SET287=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation5244);  
			stream_KW_SET.add(KW_SET287);

			KW_SKEWED288=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation5246);  
			stream_KW_SKEWED.add(KW_SKEWED288);

			KW_LOCATION289=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation5248);  
			stream_KW_LOCATION.add(KW_LOCATION289);

			pushFollow(FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation5250);
			skewedLocations290=skewedLocations();
			state._fsp--;

			stream_skewedLocations.add(skewedLocations290.getTree());
			// AST REWRITE
			// elements: skewedLocations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1151:3: -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations )
			{
				// D:\\temp\\antlr\\HiveParser.g:1151:6: ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTBLPART_SKEWED_LOCATION, "TOK_ALTERTBLPART_SKEWED_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_skewedLocations.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffixSkewedLocation"


	public static class skewedLocations_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedLocations"
	// D:\\temp\\antlr\\HiveParser.g:1154:1: skewedLocations : LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) ;
	public final HiveParser.skewedLocations_return skewedLocations() throws RecognitionException {
		HiveParser.skewedLocations_return retval = new HiveParser.skewedLocations_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN291=null;
		Token RPAREN293=null;
		ParserRuleReturnScope skewedLocationsList292 =null;

		CommonTree LPAREN291_tree=null;
		CommonTree RPAREN293_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_skewedLocationsList=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationsList");

		 pushMsg("skewed locations", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1157:5: ( LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) )
			// D:\\temp\\antlr\\HiveParser.g:1158:7: LPAREN skewedLocationsList RPAREN
			{
			LPAREN291=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedLocations5293);  
			stream_LPAREN.add(LPAREN291);

			pushFollow(FOLLOW_skewedLocationsList_in_skewedLocations5295);
			skewedLocationsList292=skewedLocationsList();
			state._fsp--;

			stream_skewedLocationsList.add(skewedLocationsList292.getTree());
			RPAREN293=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedLocations5297);  
			stream_RPAREN.add(RPAREN293);

			// AST REWRITE
			// elements: skewedLocationsList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1158:41: -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
			{
				// D:\\temp\\antlr\\HiveParser.g:1158:44: ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SKEWED_LOCATIONS, "TOK_SKEWED_LOCATIONS"), root_1);
				adaptor.addChild(root_1, stream_skewedLocationsList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocations"


	public static class skewedLocationsList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationsList"
	// D:\\temp\\antlr\\HiveParser.g:1161:1: skewedLocationsList : skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) ;
	public final HiveParser.skewedLocationsList_return skewedLocationsList() throws RecognitionException {
		HiveParser.skewedLocationsList_return retval = new HiveParser.skewedLocationsList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA295=null;
		ParserRuleReturnScope skewedLocationMap294 =null;
		ParserRuleReturnScope skewedLocationMap296 =null;

		CommonTree COMMA295_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedLocationMap=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationMap");

		 pushMsg("skewed locations list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1164:5: ( skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1165:7: skewedLocationMap ( COMMA skewedLocationMap )*
			{
			pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList5338);
			skewedLocationMap294=skewedLocationMap();
			state._fsp--;

			stream_skewedLocationMap.add(skewedLocationMap294.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1165:25: ( COMMA skewedLocationMap )*
			loop76:
			while (true) {
				int alt76=2;
				int LA76_0 = input.LA(1);
				if ( (LA76_0==COMMA) ) {
					alt76=1;
				}

				switch (alt76) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1165:26: COMMA skewedLocationMap
					{
					COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedLocationsList5341);  
					stream_COMMA.add(COMMA295);

					pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList5343);
					skewedLocationMap296=skewedLocationMap();
					state._fsp--;

					stream_skewedLocationMap.add(skewedLocationMap296.getTree());
					}
					break;

				default :
					break loop76;
				}
			}

			// AST REWRITE
			// elements: skewedLocationMap
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1165:52: -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1165:55: ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SKEWED_LOCATION_LIST, "TOK_SKEWED_LOCATION_LIST"), root_1);
				if ( !(stream_skewedLocationMap.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedLocationMap.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedLocationMap.nextTree());
				}
				stream_skewedLocationMap.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationsList"


	public static class skewedLocationMap_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationMap"
	// D:\\temp\\antlr\\HiveParser.g:1168:1: skewedLocationMap : key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) ;
	public final HiveParser.skewedLocationMap_return skewedLocationMap() throws RecognitionException {
		HiveParser.skewedLocationMap_return retval = new HiveParser.skewedLocationMap_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token value=null;
		Token EQUAL297=null;
		ParserRuleReturnScope key =null;

		CommonTree value_tree=null;
		CommonTree EQUAL297_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_skewedValueLocationElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueLocationElement");

		 pushMsg("specifying skewed location map", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1171:5: (key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) )
			// D:\\temp\\antlr\\HiveParser.g:1172:7: key= skewedValueLocationElement EQUAL value= StringLiteral
			{
			pushFollow(FOLLOW_skewedValueLocationElement_in_skewedLocationMap5389);
			key=skewedValueLocationElement();
			state._fsp--;

			stream_skewedValueLocationElement.add(key.getTree());
			EQUAL297=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_skewedLocationMap5391);  
			stream_EQUAL.add(EQUAL297);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_skewedLocationMap5395);  
			stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: value, key
			// token labels: value
			// rule labels: retval, key
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,"rule key",key!=null?key.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1172:64: -> ^( TOK_SKEWED_LOCATION_MAP $key $value)
			{
				// D:\\temp\\antlr\\HiveParser.g:1172:67: ^( TOK_SKEWED_LOCATION_MAP $key $value)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SKEWED_LOCATION_MAP, "TOK_SKEWED_LOCATION_MAP"), root_1);
				adaptor.addChild(root_1, stream_key.nextTree());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationMap"


	public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixLocation"
	// D:\\temp\\antlr\\HiveParser.g:1175:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
	public final HiveParser.alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
		HiveParser.alterStatementSuffixLocation_return retval = new HiveParser.alterStatementSuffixLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token newLoc=null;
		Token KW_SET298=null;
		Token KW_LOCATION299=null;

		CommonTree newLoc_tree=null;
		CommonTree KW_SET298_tree=null;
		CommonTree KW_LOCATION299_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		pushMsg("alter location", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1178:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
			// D:\\temp\\antlr\\HiveParser.g:1178:5: KW_SET KW_LOCATION newLoc= StringLiteral
			{
			KW_SET298=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation5432);  
			stream_KW_SET.add(KW_SET298);

			KW_LOCATION299=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5434);  
			stream_KW_LOCATION.add(KW_LOCATION299);

			newLoc=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation5438);  
			stream_StringLiteral.add(newLoc);

			// AST REWRITE
			// elements: newLoc
			// token labels: newLoc
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1179:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
			{
				// D:\\temp\\antlr\\HiveParser.g:1179:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_newLoc.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixLocation"


	public static class alterStatementSuffixSkewedby_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSkewedby"
	// D:\\temp\\antlr\\HiveParser.g:1183:1: alterStatementSuffixSkewedby : (name= identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) |name= identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) |name= identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) );
	public final HiveParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException {
		HiveParser.alterStatementSuffixSkewedby_return retval = new HiveParser.alterStatementSuffixSkewedby_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_NOT301=null;
		Token KW_SKEWED302=null;
		Token KW_NOT303=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope tableSkewed300 =null;
		ParserRuleReturnScope storedAsDirs304 =null;

		CommonTree KW_NOT301_tree=null;
		CommonTree KW_SKEWED302_tree=null;
		CommonTree KW_NOT303_tree=null;
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("alter skewed by statement", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1186:2: (name= identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) |name= identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) |name= identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) )
			int alt77=3;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==Identifier) ) {
				int LA77_1 = input.LA(2);
				if ( (LA77_1==KW_SKEWED) ) {
					alt77=1;
				}
				else if ( (LA77_1==KW_NOT) ) {
					int LA77_4 = input.LA(3);
					if ( (LA77_4==KW_SKEWED) ) {
						alt77=2;
					}
					else if ( (LA77_4==KW_STORED) ) {
						alt77=3;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 77, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 77, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA77_0 >= KW_ADD && LA77_0 <= KW_ANALYZE)||(LA77_0 >= KW_ARCHIVE && LA77_0 <= KW_CASCADE)||LA77_0==KW_CHANGE||(LA77_0 >= KW_CLUSTER && LA77_0 <= KW_COLLECTION)||(LA77_0 >= KW_COLUMNS && LA77_0 <= KW_CREATE)||LA77_0==KW_CUBE||(LA77_0 >= KW_CURSOR && LA77_0 <= KW_DATA)||(LA77_0 >= KW_DATABASES && LA77_0 <= KW_DISABLE)||(LA77_0 >= KW_DISTRIBUTE && LA77_0 <= KW_ELEM_TYPE)||LA77_0==KW_ENABLE||LA77_0==KW_ESCAPED||(LA77_0 >= KW_EXCLUSIVE && LA77_0 <= KW_EXPORT)||(LA77_0 >= KW_EXTERNAL && LA77_0 <= KW_FLOAT)||(LA77_0 >= KW_FOR && LA77_0 <= KW_FORMATTED)||LA77_0==KW_FULL||(LA77_0 >= KW_FUNCTIONS && LA77_0 <= KW_GROUPING)||(LA77_0 >= KW_HOLD_DDLTIME && LA77_0 <= KW_IDXPROPERTIES)||(LA77_0 >= KW_IGNORE && LA77_0 <= KW_JAR)||(LA77_0 >= KW_KEYS && LA77_0 <= KW_LEFT)||(LA77_0 >= KW_LIKE && LA77_0 <= KW_LONG)||(LA77_0 >= KW_MAPJOIN && LA77_0 <= KW_MINUS)||(LA77_0 >= KW_MSCK && LA77_0 <= KW_NOSCAN)||(LA77_0 >= KW_NO_DROP && LA77_0 <= KW_OFFLINE)||LA77_0==KW_OPTION||(LA77_0 >= KW_ORCFILE && LA77_0 <= KW_OUTPUTFORMAT)||(LA77_0 >= KW_OVERWRITE && LA77_0 <= KW_PARQUETFILE)||(LA77_0 >= KW_PARTITION && LA77_0 <= KW_PLUS)||(LA77_0 >= KW_PRETTY && LA77_0 <= KW_RECORDWRITER)||(LA77_0 >= KW_REGEXP && LA77_0 <= KW_SCHEMAS)||(LA77_0 >= KW_SEMI && LA77_0 <= KW_TABLES)||(LA77_0 >= KW_TBLPROPERTIES && LA77_0 <= KW_TEXTFILE)||(LA77_0 >= KW_TIMESTAMP && LA77_0 <= KW_TRANSACTIONS)||(LA77_0 >= KW_TRIGGER && LA77_0 <= KW_UNARCHIVE)||(LA77_0 >= KW_UNDO && LA77_0 <= KW_UNIONTYPE)||(LA77_0 >= KW_UNLOCK && LA77_0 <= KW_VALUE_TYPE)||LA77_0==KW_VIEW||LA77_0==KW_WHILE||LA77_0==KW_WITH) ) {
				int LA77_2 = input.LA(2);
				if ( (LA77_2==KW_SKEWED) ) {
					alt77=1;
				}
				else if ( (LA77_2==KW_NOT) ) {
					int LA77_6 = input.LA(3);
					if ( (LA77_6==KW_SKEWED) ) {
						alt77=2;
					}
					else if ( (LA77_6==KW_STORED) ) {
						alt77=3;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 77, 6, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 77, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 77, 0, input);
				throw nvae;
			}

			switch (alt77) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1186:3: name= identifier tableSkewed
					{
					pushFollow(FOLLOW_identifier_in_alterStatementSuffixSkewedby5473);
					name=identifier();
					state._fsp--;

					stream_identifier.add(name.getTree());
					pushFollow(FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5475);
					tableSkewed300=tableSkewed();
					state._fsp--;

					stream_tableSkewed.add(tableSkewed300.getTree());
					// AST REWRITE
					// elements: name, tableSkewed
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1187:2: -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed )
					{
						// D:\\temp\\antlr\\HiveParser.g:1187:4: ^( TOK_ALTERTABLE_SKEWED $name tableSkewed )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_1, stream_tableSkewed.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1189:2: name= identifier KW_NOT KW_SKEWED
					{
					pushFollow(FOLLOW_identifier_in_alterStatementSuffixSkewedby5494);
					name=identifier();
					state._fsp--;

					stream_identifier.add(name.getTree());
					KW_NOT301=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5496);  
					stream_KW_NOT.add(KW_NOT301);

					KW_SKEWED302=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5498);  
					stream_KW_SKEWED.add(KW_SKEWED302);

					// AST REWRITE
					// elements: name
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1190:2: -> ^( TOK_ALTERTABLE_SKEWED $name)
					{
						// D:\\temp\\antlr\\HiveParser.g:1190:4: ^( TOK_ALTERTABLE_SKEWED $name)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1192:2: name= identifier KW_NOT storedAsDirs
					{
					pushFollow(FOLLOW_identifier_in_alterStatementSuffixSkewedby5515);
					name=identifier();
					state._fsp--;

					stream_identifier.add(name.getTree());
					KW_NOT303=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5517);  
					stream_KW_NOT.add(KW_NOT303);

					pushFollow(FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby5519);
					storedAsDirs304=storedAsDirs();
					state._fsp--;

					stream_storedAsDirs.add(storedAsDirs304.getTree());
					// AST REWRITE
					// elements: name, storedAsDirs
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1193:2: -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs )
					{
						// D:\\temp\\antlr\\HiveParser.g:1193:4: ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSkewedby"


	public static class alterStatementSuffixExchangePartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixExchangePartition"
	// D:\\temp\\antlr\\HiveParser.g:1196:1: alterStatementSuffixExchangePartition : name= tableName KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_EXCHANGEPARTITION $name partitionSpec $exchangename) ;
	public final HiveParser.alterStatementSuffixExchangePartition_return alterStatementSuffixExchangePartition() throws RecognitionException {
		HiveParser.alterStatementSuffixExchangePartition_return retval = new HiveParser.alterStatementSuffixExchangePartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_EXCHANGE305=null;
		Token KW_WITH307=null;
		Token KW_TABLE308=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope exchangename =null;
		ParserRuleReturnScope partitionSpec306 =null;

		CommonTree KW_EXCHANGE305_tree=null;
		CommonTree KW_WITH307_tree=null;
		CommonTree KW_TABLE308_tree=null;
		RewriteRuleTokenStream stream_KW_EXCHANGE=new RewriteRuleTokenStream(adaptor,"token KW_EXCHANGE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		pushMsg("alter exchange partition", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1199:5: (name= tableName KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_EXCHANGEPARTITION $name partitionSpec $exchangename) )
			// D:\\temp\\antlr\\HiveParser.g:1199:7: name= tableName KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName
			{
			pushFollow(FOLLOW_tableName_in_alterStatementSuffixExchangePartition5555);
			name=tableName();
			state._fsp--;

			stream_tableName.add(name.getTree());
			KW_EXCHANGE305=(Token)match(input,KW_EXCHANGE,FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition5557);  
			stream_KW_EXCHANGE.add(KW_EXCHANGE305);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition5559);
			partitionSpec306=partitionSpec();
			state._fsp--;

			stream_partitionSpec.add(partitionSpec306.getTree());
			KW_WITH307=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition5561);  
			stream_KW_WITH.add(KW_WITH307);

			KW_TABLE308=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition5563);  
			stream_KW_TABLE.add(KW_TABLE308);

			pushFollow(FOLLOW_tableName_in_alterStatementSuffixExchangePartition5567);
			exchangename=tableName();
			state._fsp--;

			stream_tableName.add(exchangename.getTree());
			// AST REWRITE
			// elements: exchangename, partitionSpec, name
			// token labels: 
			// rule labels: exchangename, retval, name
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_exchangename=new RewriteRuleSubtreeStream(adaptor,"rule exchangename",exchangename!=null?exchangename.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1200:5: -> ^( TOK_EXCHANGEPARTITION $name partitionSpec $exchangename)
			{
				// D:\\temp\\antlr\\HiveParser.g:1200:8: ^( TOK_EXCHANGEPARTITION $name partitionSpec $exchangename)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_EXCHANGEPARTITION, "TOK_EXCHANGEPARTITION"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_1, stream_exchangename.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixExchangePartition"


	public static class alterStatementSuffixProtectMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixProtectMode"
	// D:\\temp\\antlr\\HiveParser.g:1203:1: alterStatementSuffixProtectMode : alterProtectMode -> ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode ) ;
	public final HiveParser.alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode() throws RecognitionException {
		HiveParser.alterStatementSuffixProtectMode_return retval = new HiveParser.alterStatementSuffixProtectMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope alterProtectMode309 =null;

		RewriteRuleSubtreeStream stream_alterProtectMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectMode");

		 pushMsg("alter partition protect mode statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1206:5: ( alterProtectMode -> ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode ) )
			// D:\\temp\\antlr\\HiveParser.g:1206:7: alterProtectMode
			{
			pushFollow(FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode5612);
			alterProtectMode309=alterProtectMode();
			state._fsp--;

			stream_alterProtectMode.add(alterProtectMode309.getTree());
			// AST REWRITE
			// elements: alterProtectMode
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1207:5: -> ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode )
			{
				// D:\\temp\\antlr\\HiveParser.g:1207:8: ^( TOK_ALTERTABLE_PROTECTMODE alterProtectMode )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_PROTECTMODE, "TOK_ALTERTABLE_PROTECTMODE"), root_1);
				adaptor.addChild(root_1, stream_alterProtectMode.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixProtectMode"


	public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenamePart"
	// D:\\temp\\antlr\\HiveParser.g:1210:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
	public final HiveParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
		HiveParser.alterStatementSuffixRenamePart_return retval = new HiveParser.alterStatementSuffixRenamePart_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RENAME310=null;
		Token KW_TO311=null;
		ParserRuleReturnScope partitionSpec312 =null;

		CommonTree KW_RENAME310_tree=null;
		CommonTree KW_TO311_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("alter table rename partition statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1213:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
			// D:\\temp\\antlr\\HiveParser.g:1213:7: KW_RENAME KW_TO partitionSpec
			{
			KW_RENAME310=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart5651);  
			stream_KW_RENAME.add(KW_RENAME310);

			KW_TO311=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart5653);  
			stream_KW_TO.add(KW_TO311);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart5655);
			partitionSpec312=partitionSpec();
			state._fsp--;

			stream_partitionSpec.add(partitionSpec312.getTree());
			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1214:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
			{
				// D:\\temp\\antlr\\HiveParser.g:1214:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenamePart"


	public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixMergeFiles"
	// D:\\temp\\antlr\\HiveParser.g:1217:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) ;
	public final HiveParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
		HiveParser.alterStatementSuffixMergeFiles_return retval = new HiveParser.alterStatementSuffixMergeFiles_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CONCATENATE313=null;

		CommonTree KW_CONCATENATE313_tree=null;
		RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

		 pushMsg("", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1220:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) )
			// D:\\temp\\antlr\\HiveParser.g:1220:7: KW_CONCATENATE
			{
			KW_CONCATENATE313=(Token)match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles5693);  
			stream_KW_CONCATENATE.add(KW_CONCATENATE313);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1221:5: -> ^( TOK_ALTERTABLE_MERGEFILES )
			{
				// D:\\temp\\antlr\\HiveParser.g:1221:8: ^( TOK_ALTERTABLE_MERGEFILES )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ALTERTABLE_MERGEFILES, "TOK_ALTERTABLE_MERGEFILES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixMergeFiles"


	public static class alterProtectMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterProtectMode"
	// D:\\temp\\antlr\\HiveParser.g:1224:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );
	public final HiveParser.alterProtectMode_return alterProtectMode() throws RecognitionException {
		HiveParser.alterProtectMode_return retval = new HiveParser.alterProtectMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ENABLE314=null;
		Token KW_DISABLE316=null;
		ParserRuleReturnScope alterProtectModeMode315 =null;
		ParserRuleReturnScope alterProtectModeMode317 =null;

		CommonTree KW_ENABLE314_tree=null;
		CommonTree KW_DISABLE316_tree=null;
		RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
		RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");
		RewriteRuleSubtreeStream stream_alterProtectModeMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectModeMode");

		 pushMsg("protect mode specification enable", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1227:5: ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) )
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==KW_ENABLE) ) {
				alt78=1;
			}
			else if ( (LA78_0==KW_DISABLE) ) {
				alt78=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 78, 0, input);
				throw nvae;
			}

			switch (alt78) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1227:7: KW_ENABLE alterProtectModeMode
					{
					KW_ENABLE314=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_alterProtectMode5730);  
					stream_KW_ENABLE.add(KW_ENABLE314);

					pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode5732);
					alterProtectModeMode315=alterProtectModeMode();
					state._fsp--;

					stream_alterProtectModeMode.add(alterProtectModeMode315.getTree());
					// AST REWRITE
					// elements: alterProtectModeMode
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1227:39: -> ^( TOK_ENABLE alterProtectModeMode )
					{
						// D:\\temp\\antlr\\HiveParser.g:1227:42: ^( TOK_ENABLE alterProtectModeMode )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);
						adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1228:7: KW_DISABLE alterProtectModeMode
					{
					KW_DISABLE316=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_alterProtectMode5749);  
					stream_KW_DISABLE.add(KW_DISABLE316);

					pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode5751);
					alterProtectModeMode317=alterProtectModeMode();
					state._fsp--;

					stream_alterProtectModeMode.add(alterProtectModeMode317.getTree());
					// AST REWRITE
					// elements: alterProtectModeMode
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1228:40: -> ^( TOK_DISABLE alterProtectModeMode )
					{
						// D:\\temp\\antlr\\HiveParser.g:1228:43: ^( TOK_DISABLE alterProtectModeMode )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);
						adaptor.addChild(root_1, stream_alterProtectModeMode.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterProtectMode"


	public static class alterProtectModeMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterProtectModeMode"
	// D:\\temp\\antlr\\HiveParser.g:1231:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );
	public final HiveParser.alterProtectModeMode_return alterProtectModeMode() throws RecognitionException {
		HiveParser.alterProtectModeMode_return retval = new HiveParser.alterProtectModeMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_OFFLINE318=null;
		Token KW_NO_DROP319=null;
		Token KW_CASCADE320=null;
		Token KW_READONLY321=null;

		CommonTree KW_OFFLINE318_tree=null;
		CommonTree KW_NO_DROP319_tree=null;
		CommonTree KW_CASCADE320_tree=null;
		CommonTree KW_READONLY321_tree=null;
		RewriteRuleTokenStream stream_KW_READONLY=new RewriteRuleTokenStream(adaptor,"token KW_READONLY");
		RewriteRuleTokenStream stream_KW_NO_DROP=new RewriteRuleTokenStream(adaptor,"token KW_NO_DROP");
		RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
		RewriteRuleTokenStream stream_KW_OFFLINE=new RewriteRuleTokenStream(adaptor,"token KW_OFFLINE");

		 pushMsg("protect mode specification enable", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1234:5: ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) )
			int alt80=3;
			switch ( input.LA(1) ) {
			case KW_OFFLINE:
				{
				alt80=1;
				}
				break;
			case KW_NO_DROP:
				{
				alt80=2;
				}
				break;
			case KW_READONLY:
				{
				alt80=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}
			switch (alt80) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1234:7: KW_OFFLINE
					{
					KW_OFFLINE318=(Token)match(input,KW_OFFLINE,FOLLOW_KW_OFFLINE_in_alterProtectModeMode5787);  
					stream_KW_OFFLINE.add(KW_OFFLINE318);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1234:19: -> ^( TOK_OFFLINE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1234:22: ^( TOK_OFFLINE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_OFFLINE, "TOK_OFFLINE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1235:7: KW_NO_DROP ( KW_CASCADE )?
					{
					KW_NO_DROP319=(Token)match(input,KW_NO_DROP,FOLLOW_KW_NO_DROP_in_alterProtectModeMode5802);  
					stream_KW_NO_DROP.add(KW_NO_DROP319);

					// D:\\temp\\antlr\\HiveParser.g:1235:18: ( KW_CASCADE )?
					int alt79=2;
					int LA79_0 = input.LA(1);
					if ( (LA79_0==KW_CASCADE) ) {
						alt79=1;
					}
					switch (alt79) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1235:18: KW_CASCADE
							{
							KW_CASCADE320=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_alterProtectModeMode5804);  
							stream_KW_CASCADE.add(KW_CASCADE320);

							}
							break;

					}

					// AST REWRITE
					// elements: KW_CASCADE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1235:30: -> ^( TOK_NO_DROP ( KW_CASCADE )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1235:33: ^( TOK_NO_DROP ( KW_CASCADE )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_NO_DROP, "TOK_NO_DROP"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:1235:47: ( KW_CASCADE )?
						if ( stream_KW_CASCADE.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_CASCADE.nextNode());
						}
						stream_KW_CASCADE.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1236:7: KW_READONLY
					{
					KW_READONLY321=(Token)match(input,KW_READONLY,FOLLOW_KW_READONLY_in_alterProtectModeMode5822);  
					stream_KW_READONLY.add(KW_READONLY321);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1236:20: -> ^( TOK_READONLY )
					{
						// D:\\temp\\antlr\\HiveParser.g:1236:23: ^( TOK_READONLY )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_READONLY, "TOK_READONLY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterProtectModeMode"


	public static class alterStatementSuffixBucketNum_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixBucketNum"
	// D:\\temp\\antlr\\HiveParser.g:1239:1: alterStatementSuffixBucketNum : KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $num) ;
	public final HiveParser.alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum() throws RecognitionException {
		HiveParser.alterStatementSuffixBucketNum_return retval = new HiveParser.alterStatementSuffixBucketNum_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token num=null;
		Token KW_INTO322=null;
		Token KW_BUCKETS323=null;

		CommonTree num_tree=null;
		CommonTree KW_INTO322_tree=null;
		CommonTree KW_BUCKETS323_tree=null;
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");

		 pushMsg("", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1242:5: ( KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $num) )
			// D:\\temp\\antlr\\HiveParser.g:1242:7: KW_INTO num= Number KW_BUCKETS
			{
			KW_INTO322=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum5856);  
			stream_KW_INTO.add(KW_INTO322);

			num=(Token)match(input,Number,FOLLOW_Number_in_alterStatementSuffixBucketNum5860);  
			stream_Number.add(num);

			KW_BUCKETS323=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum5862);  
			stream_KW_BUCKETS.add(KW_BUCKETS323);

			// AST REWRITE
			// elements: num
			// token labels: num
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1243:5: -> ^( TOK_TABLEBUCKETS $num)
			{
				// D:\\temp\\antlr\\HiveParser.g:1243:8: ^( TOK_TABLEBUCKETS $num)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS"), root_1);
				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixBucketNum"


	public static class alterStatementSuffixCompact_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixCompact"
	// D:\\temp\\antlr\\HiveParser.g:1246:1: alterStatementSuffixCompact : KW_COMPACT compactType= StringLiteral -> ^( TOK_COMPACT $compactType) ;
	public final HiveParser.alterStatementSuffixCompact_return alterStatementSuffixCompact() throws RecognitionException {
		HiveParser.alterStatementSuffixCompact_return retval = new HiveParser.alterStatementSuffixCompact_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token compactType=null;
		Token KW_COMPACT324=null;

		CommonTree compactType_tree=null;
		CommonTree KW_COMPACT324_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMPACT=new RewriteRuleTokenStream(adaptor,"token KW_COMPACT");

		 msgs.push("compaction request"); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1249:5: ( KW_COMPACT compactType= StringLiteral -> ^( TOK_COMPACT $compactType) )
			// D:\\temp\\antlr\\HiveParser.g:1249:7: KW_COMPACT compactType= StringLiteral
			{
			KW_COMPACT324=(Token)match(input,KW_COMPACT,FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact5902);  
			stream_KW_COMPACT.add(KW_COMPACT324);

			compactType=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixCompact5906);  
			stream_StringLiteral.add(compactType);

			// AST REWRITE
			// elements: compactType
			// token labels: compactType
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_compactType=new RewriteRuleTokenStream(adaptor,"token compactType",compactType);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1250:5: -> ^( TOK_COMPACT $compactType)
			{
				// D:\\temp\\antlr\\HiveParser.g:1250:8: ^( TOK_COMPACT $compactType)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_COMPACT, "TOK_COMPACT"), root_1);
				adaptor.addChild(root_1, stream_compactType.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 msgs.pop(); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixCompact"


	public static class fileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fileFormat"
	// D:\\temp\\antlr\\HiveParser.g:1254:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_ORCFILE -> ^( TOK_TBLORCFILE ) | KW_PARQUETFILE -> ^( TOK_TBLPARQUETFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.fileFormat_return fileFormat() throws RecognitionException {
		HiveParser.fileFormat_return retval = new HiveParser.fileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token inDriver=null;
		Token outDriver=null;
		Token KW_SEQUENCEFILE325=null;
		Token KW_TEXTFILE326=null;
		Token KW_RCFILE327=null;
		Token KW_ORCFILE328=null;
		Token KW_PARQUETFILE329=null;
		Token KW_INPUTFORMAT330=null;
		Token KW_OUTPUTFORMAT331=null;
		Token KW_INPUTDRIVER332=null;
		Token KW_OUTPUTDRIVER333=null;
		ParserRuleReturnScope genericSpec =null;

		CommonTree inFmt_tree=null;
		CommonTree outFmt_tree=null;
		CommonTree inDriver_tree=null;
		CommonTree outDriver_tree=null;
		CommonTree KW_SEQUENCEFILE325_tree=null;
		CommonTree KW_TEXTFILE326_tree=null;
		CommonTree KW_RCFILE327_tree=null;
		CommonTree KW_ORCFILE328_tree=null;
		CommonTree KW_PARQUETFILE329_tree=null;
		CommonTree KW_INPUTFORMAT330_tree=null;
		CommonTree KW_OUTPUTFORMAT331_tree=null;
		CommonTree KW_INPUTDRIVER332_tree=null;
		CommonTree KW_OUTPUTDRIVER333_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_PARQUETFILE=new RewriteRuleTokenStream(adaptor,"token KW_PARQUETFILE");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
		RewriteRuleTokenStream stream_KW_ORCFILE=new RewriteRuleTokenStream(adaptor,"token KW_ORCFILE");
		RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("file format specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1257:5: ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_ORCFILE -> ^( TOK_TBLORCFILE ) | KW_PARQUETFILE -> ^( TOK_TBLPARQUETFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt82=7;
			switch ( input.LA(1) ) {
			case KW_SEQUENCEFILE:
				{
				alt82=1;
				}
				break;
			case KW_TEXTFILE:
				{
				alt82=2;
				}
				break;
			case KW_RCFILE:
				{
				alt82=3;
				}
				break;
			case KW_ORCFILE:
				{
				alt82=4;
				}
				break;
			case KW_PARQUETFILE:
				{
				alt82=5;
				}
				break;
			case KW_INPUTFORMAT:
				{
				int LA82_6 = input.LA(2);
				if ( (LA82_6==StringLiteral) ) {
					alt82=6;
				}
				else if ( (LA82_6==EOF) ) {
					alt82=7;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case Identifier:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ALL:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ARRAY:
			case KW_AS:
			case KW_ASC:
			case KW_BEFORE:
			case KW_BETWEEN:
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_BOTH:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_BY:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_CREATE:
			case KW_CUBE:
			case KW_CURSOR:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DBPROPERTIES:
			case KW_DECIMAL:
			case KW_DEFAULT:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELETE:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DOUBLE:
			case KW_DROP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXISTS:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXTERNAL:
			case KW_FALSE:
			case KW_FETCH:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FLOAT:
			case KW_FOR:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FULL:
			case KW_FUNCTIONS:
			case KW_GRANT:
			case KW_GROUP:
			case KW_GROUPING:
			case KW_HOLD_DDLTIME:
			case KW_IDXPROPERTIES:
			case KW_IGNORE:
			case KW_IMPORT:
			case KW_IN:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INNER:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INSERT:
			case KW_INT:
			case KW_INTERSECT:
			case KW_INTO:
			case KW_IS:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LATERAL:
			case KW_LEFT:
			case KW_LIKE:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCAL:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MAPJOIN:
			case KW_MATERIALIZED:
			case KW_MINUS:
			case KW_MSCK:
			case KW_NONE:
			case KW_NOSCAN:
			case KW_NO_DROP:
			case KW_NULL:
			case KW_OF:
			case KW_OFFLINE:
			case KW_OPTION:
			case KW_ORDER:
			case KW_OUT:
			case KW_OUTER:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITION:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PERCENT:
			case KW_PLUS:
			case KW_PRETTY:
			case KW_PRINCIPALS:
			case KW_PROCEDURE:
			case KW_PROTECTION:
			case KW_PURGE:
			case KW_RANGE:
			case KW_READ:
			case KW_READONLY:
			case KW_READS:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_REGEXP:
			case KW_RENAME:
			case KW_REPAIR:
			case KW_REPLACE:
			case KW_RESTRICT:
			case KW_REVOKE:
			case KW_RIGHT:
			case KW_RLIKE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_ROLLUP:
			case KW_ROW:
			case KW_ROWS:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SET:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SMALLINT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TIMESTAMP:
			case KW_TINYINT:
			case KW_TO:
			case KW_TOUCH:
			case KW_TRANSACTIONS:
			case KW_TRIGGER:
			case KW_TRUE:
			case KW_TRUNCATE:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNION:
			case KW_UNIONTYPE:
			case KW_UNLOCK:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_UPDATE:
			case KW_USE:
			case KW_USER:
			case KW_USING:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALUE_TYPE:
			case KW_VIEW:
			case KW_WHILE:
			case KW_WITH:
				{
				alt82=7;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1257:7: KW_SEQUENCEFILE
					{
					KW_SEQUENCEFILE325=(Token)match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_fileFormat5947);  
					stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE325);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1257:24: -> ^( TOK_TBLSEQUENCEFILE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1257:27: ^( TOK_TBLSEQUENCEFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1258:7: KW_TEXTFILE
					{
					KW_TEXTFILE326=(Token)match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_fileFormat5962);  
					stream_KW_TEXTFILE.add(KW_TEXTFILE326);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1258:20: -> ^( TOK_TBLTEXTFILE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1258:23: ^( TOK_TBLTEXTFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1259:7: KW_RCFILE
					{
					KW_RCFILE327=(Token)match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_fileFormat5977);  
					stream_KW_RCFILE.add(KW_RCFILE327);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1259:18: -> ^( TOK_TBLRCFILE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1259:21: ^( TOK_TBLRCFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:1260:7: KW_ORCFILE
					{
					KW_ORCFILE328=(Token)match(input,KW_ORCFILE,FOLLOW_KW_ORCFILE_in_fileFormat5992);  
					stream_KW_ORCFILE.add(KW_ORCFILE328);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1260:18: -> ^( TOK_TBLORCFILE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1260:21: ^( TOK_TBLORCFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLORCFILE, "TOK_TBLORCFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:1261:7: KW_PARQUETFILE
					{
					KW_PARQUETFILE329=(Token)match(input,KW_PARQUETFILE,FOLLOW_KW_PARQUETFILE_in_fileFormat6006);  
					stream_KW_PARQUETFILE.add(KW_PARQUETFILE329);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1261:22: -> ^( TOK_TBLPARQUETFILE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1261:25: ^( TOK_TBLPARQUETFILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TBLPARQUETFILE, "TOK_TBLPARQUETFILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:1262:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_INPUTFORMAT330=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat6020);  
					stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT330);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6024);  
					stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT331=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat6026);  
					stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT331);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6030);  
					stream_StringLiteral.add(outFmt);

					// D:\\temp\\antlr\\HiveParser.g:1262:79: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt81=2;
					int LA81_0 = input.LA(1);
					if ( (LA81_0==KW_INPUTDRIVER) ) {
						alt81=1;
					}
					switch (alt81) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1262:80: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER332=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat6033);  
							stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER332);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6037);  
							stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER333=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat6039);  
							stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER333);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat6043);  
							stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: outDriver, inDriver, outFmt, inFmt
					// token labels: outDriver, outFmt, inDriver, inFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1263:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1263:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						// D:\\temp\\antlr\\HiveParser.g:1263:48: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// D:\\temp\\antlr\\HiveParser.g:1263:59: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:1264:7: genericSpec= identifier
					{
					pushFollow(FOLLOW_identifier_in_fileFormat6081);
					genericSpec=identifier();
					state._fsp--;

					stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: retval, genericSpec
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1264:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// D:\\temp\\antlr\\HiveParser.g:1264:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fileFormat"


	public static class tabTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tabTypeExpr"
	// D:\\temp\\antlr\\HiveParser.g:1267:1: tabTypeExpr : identifier ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )* ;
	public final HiveParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
		HiveParser.tabTypeExpr_return retval = new HiveParser.tabTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOT335=null;
		Token KW_ELEM_TYPE336=null;
		Token KW_KEY_TYPE337=null;
		Token KW_VALUE_TYPE338=null;
		ParserRuleReturnScope identifier334 =null;
		ParserRuleReturnScope identifier339 =null;

		CommonTree DOT335_tree=null;
		CommonTree KW_ELEM_TYPE336_tree=null;
		CommonTree KW_KEY_TYPE337_tree=null;
		CommonTree KW_VALUE_TYPE338_tree=null;

		 pushMsg("specifying table types", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1271:4: ( identifier ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )* )
			// D:\\temp\\antlr\\HiveParser.g:1271:6: identifier ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_tabTypeExpr6117);
			identifier334=identifier();
			state._fsp--;

			adaptor.addChild(root_0, identifier334.getTree());

			// D:\\temp\\antlr\\HiveParser.g:1271:17: ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )*
			loop84:
			while (true) {
				int alt84=2;
				int LA84_0 = input.LA(1);
				if ( (LA84_0==DOT) ) {
					alt84=1;
				}

				switch (alt84) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1271:18: DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier )
					{
					DOT335=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr6120); 
					DOT335_tree = (CommonTree)adaptor.create(DOT335);
					root_0 = (CommonTree)adaptor.becomeRoot(DOT335_tree, root_0);

					// D:\\temp\\antlr\\HiveParser.g:1271:23: ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier )
					int alt83=4;
					switch ( input.LA(1) ) {
					case KW_ELEM_TYPE:
						{
						alt83=1;
						}
						break;
					case KW_KEY_TYPE:
						{
						alt83=2;
						}
						break;
					case KW_VALUE_TYPE:
						{
						alt83=3;
						}
						break;
					case Identifier:
					case KW_ADD:
					case KW_ADMIN:
					case KW_AFTER:
					case KW_ALL:
					case KW_ALTER:
					case KW_ANALYZE:
					case KW_ARCHIVE:
					case KW_ARRAY:
					case KW_AS:
					case KW_ASC:
					case KW_BEFORE:
					case KW_BETWEEN:
					case KW_BIGINT:
					case KW_BINARY:
					case KW_BOOLEAN:
					case KW_BOTH:
					case KW_BUCKET:
					case KW_BUCKETS:
					case KW_BY:
					case KW_CASCADE:
					case KW_CHANGE:
					case KW_CLUSTER:
					case KW_CLUSTERED:
					case KW_CLUSTERSTATUS:
					case KW_COLLECTION:
					case KW_COLUMNS:
					case KW_COMMENT:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_COMPUTE:
					case KW_CONCATENATE:
					case KW_CONTINUE:
					case KW_CREATE:
					case KW_CUBE:
					case KW_CURSOR:
					case KW_DATA:
					case KW_DATABASES:
					case KW_DATE:
					case KW_DATETIME:
					case KW_DBPROPERTIES:
					case KW_DECIMAL:
					case KW_DEFAULT:
					case KW_DEFERRED:
					case KW_DEFINED:
					case KW_DELETE:
					case KW_DELIMITED:
					case KW_DEPENDENCY:
					case KW_DESC:
					case KW_DESCRIBE:
					case KW_DIRECTORIES:
					case KW_DIRECTORY:
					case KW_DISABLE:
					case KW_DISTRIBUTE:
					case KW_DOUBLE:
					case KW_DROP:
					case KW_ENABLE:
					case KW_ESCAPED:
					case KW_EXCLUSIVE:
					case KW_EXISTS:
					case KW_EXPLAIN:
					case KW_EXPORT:
					case KW_EXTERNAL:
					case KW_FALSE:
					case KW_FETCH:
					case KW_FIELDS:
					case KW_FILE:
					case KW_FILEFORMAT:
					case KW_FIRST:
					case KW_FLOAT:
					case KW_FOR:
					case KW_FORMAT:
					case KW_FORMATTED:
					case KW_FULL:
					case KW_FUNCTIONS:
					case KW_GRANT:
					case KW_GROUP:
					case KW_GROUPING:
					case KW_HOLD_DDLTIME:
					case KW_IDXPROPERTIES:
					case KW_IGNORE:
					case KW_IMPORT:
					case KW_IN:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_INNER:
					case KW_INPATH:
					case KW_INPUTDRIVER:
					case KW_INPUTFORMAT:
					case KW_INSERT:
					case KW_INT:
					case KW_INTERSECT:
					case KW_INTO:
					case KW_IS:
					case KW_ITEMS:
					case KW_JAR:
					case KW_KEYS:
					case KW_LATERAL:
					case KW_LEFT:
					case KW_LIKE:
					case KW_LIMIT:
					case KW_LINES:
					case KW_LOAD:
					case KW_LOCAL:
					case KW_LOCATION:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_LOGICAL:
					case KW_LONG:
					case KW_MAPJOIN:
					case KW_MATERIALIZED:
					case KW_MINUS:
					case KW_MSCK:
					case KW_NONE:
					case KW_NOSCAN:
					case KW_NO_DROP:
					case KW_NULL:
					case KW_OF:
					case KW_OFFLINE:
					case KW_OPTION:
					case KW_ORCFILE:
					case KW_ORDER:
					case KW_OUT:
					case KW_OUTER:
					case KW_OUTPUTDRIVER:
					case KW_OUTPUTFORMAT:
					case KW_OVERWRITE:
					case KW_OWNER:
					case KW_PARQUETFILE:
					case KW_PARTITION:
					case KW_PARTITIONED:
					case KW_PARTITIONS:
					case KW_PERCENT:
					case KW_PLUS:
					case KW_PRETTY:
					case KW_PRINCIPALS:
					case KW_PROCEDURE:
					case KW_PROTECTION:
					case KW_PURGE:
					case KW_RANGE:
					case KW_RCFILE:
					case KW_READ:
					case KW_READONLY:
					case KW_READS:
					case KW_REBUILD:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_REGEXP:
					case KW_RENAME:
					case KW_REPAIR:
					case KW_REPLACE:
					case KW_RESTRICT:
					case KW_REVOKE:
					case KW_RIGHT:
					case KW_RLIKE:
					case KW_ROLE:
					case KW_ROLES:
					case KW_ROLLUP:
					case KW_ROW:
					case KW_ROWS:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_SEMI:
					case KW_SEQUENCEFILE:
					case KW_SERDE:
					case KW_SERDEPROPERTIES:
					case KW_SET:
					case KW_SETS:
					case KW_SHARED:
					case KW_SHOW:
					case KW_SHOW_DATABASE:
					case KW_SKEWED:
					case KW_SMALLINT:
					case KW_SORT:
					case KW_SORTED:
					case KW_SSL:
					case KW_STATISTICS:
					case KW_STORED:
					case KW_STREAMTABLE:
					case KW_STRING:
					case KW_STRUCT:
					case KW_TABLE:
					case KW_TABLES:
					case KW_TBLPROPERTIES:
					case KW_TEMPORARY:
					case KW_TERMINATED:
					case KW_TEXTFILE:
					case KW_TIMESTAMP:
					case KW_TINYINT:
					case KW_TO:
					case KW_TOUCH:
					case KW_TRANSACTIONS:
					case KW_TRIGGER:
					case KW_TRUE:
					case KW_TRUNCATE:
					case KW_UNARCHIVE:
					case KW_UNDO:
					case KW_UNION:
					case KW_UNIONTYPE:
					case KW_UNLOCK:
					case KW_UNSET:
					case KW_UNSIGNED:
					case KW_UPDATE:
					case KW_USE:
					case KW_USER:
					case KW_USING:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_VIEW:
					case KW_WHILE:
					case KW_WITH:
						{
						alt83=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 83, 0, input);
						throw nvae;
					}
					switch (alt83) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1271:24: KW_ELEM_TYPE
							{
							KW_ELEM_TYPE336=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr6124); 
							KW_ELEM_TYPE336_tree = (CommonTree)adaptor.create(KW_ELEM_TYPE336);
							adaptor.addChild(root_0, KW_ELEM_TYPE336_tree);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1271:39: KW_KEY_TYPE
							{
							KW_KEY_TYPE337=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_tabTypeExpr6128); 
							KW_KEY_TYPE337_tree = (CommonTree)adaptor.create(KW_KEY_TYPE337);
							adaptor.addChild(root_0, KW_KEY_TYPE337_tree);

							}
							break;
						case 3 :
							// D:\\temp\\antlr\\HiveParser.g:1271:53: KW_VALUE_TYPE
							{
							KW_VALUE_TYPE338=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr6132); 
							KW_VALUE_TYPE338_tree = (CommonTree)adaptor.create(KW_VALUE_TYPE338);
							adaptor.addChild(root_0, KW_VALUE_TYPE338_tree);

							}
							break;
						case 4 :
							// D:\\temp\\antlr\\HiveParser.g:1271:69: identifier
							{
							pushFollow(FOLLOW_identifier_in_tabTypeExpr6136);
							identifier339=identifier();
							state._fsp--;

							adaptor.addChild(root_0, identifier339.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop84;
				}
			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabTypeExpr"


	public static class descTabTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "descTabTypeExpr"
	// D:\\temp\\antlr\\HiveParser.g:1274:1: descTabTypeExpr : identifier ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )* ( identifier )? ;
	public final HiveParser.descTabTypeExpr_return descTabTypeExpr() throws RecognitionException {
		HiveParser.descTabTypeExpr_return retval = new HiveParser.descTabTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOT341=null;
		Token KW_ELEM_TYPE342=null;
		Token KW_KEY_TYPE343=null;
		Token KW_VALUE_TYPE344=null;
		ParserRuleReturnScope identifier340 =null;
		ParserRuleReturnScope identifier345 =null;
		ParserRuleReturnScope identifier346 =null;

		CommonTree DOT341_tree=null;
		CommonTree KW_ELEM_TYPE342_tree=null;
		CommonTree KW_KEY_TYPE343_tree=null;
		CommonTree KW_VALUE_TYPE344_tree=null;

		 pushMsg("specifying describe table types", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1278:4: ( identifier ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )* ( identifier )? )
			// D:\\temp\\antlr\\HiveParser.g:1278:6: identifier ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )* ( identifier )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_descTabTypeExpr6165);
			identifier340=identifier();
			state._fsp--;

			adaptor.addChild(root_0, identifier340.getTree());

			// D:\\temp\\antlr\\HiveParser.g:1278:17: ( DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier ) )*
			loop86:
			while (true) {
				int alt86=2;
				int LA86_0 = input.LA(1);
				if ( (LA86_0==DOT) ) {
					alt86=1;
				}

				switch (alt86) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1278:18: DOT ^ ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier )
					{
					DOT341=(Token)match(input,DOT,FOLLOW_DOT_in_descTabTypeExpr6168); 
					DOT341_tree = (CommonTree)adaptor.create(DOT341);
					root_0 = (CommonTree)adaptor.becomeRoot(DOT341_tree, root_0);

					// D:\\temp\\antlr\\HiveParser.g:1278:23: ( KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE | identifier )
					int alt85=4;
					switch ( input.LA(1) ) {
					case KW_ELEM_TYPE:
						{
						alt85=1;
						}
						break;
					case KW_KEY_TYPE:
						{
						alt85=2;
						}
						break;
					case KW_VALUE_TYPE:
						{
						alt85=3;
						}
						break;
					case Identifier:
					case KW_ADD:
					case KW_ADMIN:
					case KW_AFTER:
					case KW_ALL:
					case KW_ALTER:
					case KW_ANALYZE:
					case KW_ARCHIVE:
					case KW_ARRAY:
					case KW_AS:
					case KW_ASC:
					case KW_BEFORE:
					case KW_BETWEEN:
					case KW_BIGINT:
					case KW_BINARY:
					case KW_BOOLEAN:
					case KW_BOTH:
					case KW_BUCKET:
					case KW_BUCKETS:
					case KW_BY:
					case KW_CASCADE:
					case KW_CHANGE:
					case KW_CLUSTER:
					case KW_CLUSTERED:
					case KW_CLUSTERSTATUS:
					case KW_COLLECTION:
					case KW_COLUMNS:
					case KW_COMMENT:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_COMPUTE:
					case KW_CONCATENATE:
					case KW_CONTINUE:
					case KW_CREATE:
					case KW_CUBE:
					case KW_CURSOR:
					case KW_DATA:
					case KW_DATABASES:
					case KW_DATE:
					case KW_DATETIME:
					case KW_DBPROPERTIES:
					case KW_DECIMAL:
					case KW_DEFAULT:
					case KW_DEFERRED:
					case KW_DEFINED:
					case KW_DELETE:
					case KW_DELIMITED:
					case KW_DEPENDENCY:
					case KW_DESC:
					case KW_DESCRIBE:
					case KW_DIRECTORIES:
					case KW_DIRECTORY:
					case KW_DISABLE:
					case KW_DISTRIBUTE:
					case KW_DOUBLE:
					case KW_DROP:
					case KW_ENABLE:
					case KW_ESCAPED:
					case KW_EXCLUSIVE:
					case KW_EXISTS:
					case KW_EXPLAIN:
					case KW_EXPORT:
					case KW_EXTERNAL:
					case KW_FALSE:
					case KW_FETCH:
					case KW_FIELDS:
					case KW_FILE:
					case KW_FILEFORMAT:
					case KW_FIRST:
					case KW_FLOAT:
					case KW_FOR:
					case KW_FORMAT:
					case KW_FORMATTED:
					case KW_FULL:
					case KW_FUNCTIONS:
					case KW_GRANT:
					case KW_GROUP:
					case KW_GROUPING:
					case KW_HOLD_DDLTIME:
					case KW_IDXPROPERTIES:
					case KW_IGNORE:
					case KW_IMPORT:
					case KW_IN:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_INNER:
					case KW_INPATH:
					case KW_INPUTDRIVER:
					case KW_INPUTFORMAT:
					case KW_INSERT:
					case KW_INT:
					case KW_INTERSECT:
					case KW_INTO:
					case KW_IS:
					case KW_ITEMS:
					case KW_JAR:
					case KW_KEYS:
					case KW_LATERAL:
					case KW_LEFT:
					case KW_LIKE:
					case KW_LIMIT:
					case KW_LINES:
					case KW_LOAD:
					case KW_LOCAL:
					case KW_LOCATION:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_LOGICAL:
					case KW_LONG:
					case KW_MAPJOIN:
					case KW_MATERIALIZED:
					case KW_MINUS:
					case KW_MSCK:
					case KW_NONE:
					case KW_NOSCAN:
					case KW_NO_DROP:
					case KW_NULL:
					case KW_OF:
					case KW_OFFLINE:
					case KW_OPTION:
					case KW_ORCFILE:
					case KW_ORDER:
					case KW_OUT:
					case KW_OUTER:
					case KW_OUTPUTDRIVER:
					case KW_OUTPUTFORMAT:
					case KW_OVERWRITE:
					case KW_OWNER:
					case KW_PARQUETFILE:
					case KW_PARTITION:
					case KW_PARTITIONED:
					case KW_PARTITIONS:
					case KW_PERCENT:
					case KW_PLUS:
					case KW_PRETTY:
					case KW_PRINCIPALS:
					case KW_PROCEDURE:
					case KW_PROTECTION:
					case KW_PURGE:
					case KW_RANGE:
					case KW_RCFILE:
					case KW_READ:
					case KW_READONLY:
					case KW_READS:
					case KW_REBUILD:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_REGEXP:
					case KW_RENAME:
					case KW_REPAIR:
					case KW_REPLACE:
					case KW_RESTRICT:
					case KW_REVOKE:
					case KW_RIGHT:
					case KW_RLIKE:
					case KW_ROLE:
					case KW_ROLES:
					case KW_ROLLUP:
					case KW_ROW:
					case KW_ROWS:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_SEMI:
					case KW_SEQUENCEFILE:
					case KW_SERDE:
					case KW_SERDEPROPERTIES:
					case KW_SET:
					case KW_SETS:
					case KW_SHARED:
					case KW_SHOW:
					case KW_SHOW_DATABASE:
					case KW_SKEWED:
					case KW_SMALLINT:
					case KW_SORT:
					case KW_SORTED:
					case KW_SSL:
					case KW_STATISTICS:
					case KW_STORED:
					case KW_STREAMTABLE:
					case KW_STRING:
					case KW_STRUCT:
					case KW_TABLE:
					case KW_TABLES:
					case KW_TBLPROPERTIES:
					case KW_TEMPORARY:
					case KW_TERMINATED:
					case KW_TEXTFILE:
					case KW_TIMESTAMP:
					case KW_TINYINT:
					case KW_TO:
					case KW_TOUCH:
					case KW_TRANSACTIONS:
					case KW_TRIGGER:
					case KW_TRUE:
					case KW_TRUNCATE:
					case KW_UNARCHIVE:
					case KW_UNDO:
					case KW_UNION:
					case KW_UNIONTYPE:
					case KW_UNLOCK:
					case KW_UNSET:
					case KW_UNSIGNED:
					case KW_UPDATE:
					case KW_USE:
					case KW_USER:
					case KW_USING:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_VIEW:
					case KW_WHILE:
					case KW_WITH:
						{
						alt85=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 85, 0, input);
						throw nvae;
					}
					switch (alt85) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1278:24: KW_ELEM_TYPE
							{
							KW_ELEM_TYPE342=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_descTabTypeExpr6172); 
							KW_ELEM_TYPE342_tree = (CommonTree)adaptor.create(KW_ELEM_TYPE342);
							adaptor.addChild(root_0, KW_ELEM_TYPE342_tree);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1278:39: KW_KEY_TYPE
							{
							KW_KEY_TYPE343=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_descTabTypeExpr6176); 
							KW_KEY_TYPE343_tree = (CommonTree)adaptor.create(KW_KEY_TYPE343);
							adaptor.addChild(root_0, KW_KEY_TYPE343_tree);

							}
							break;
						case 3 :
							// D:\\temp\\antlr\\HiveParser.g:1278:53: KW_VALUE_TYPE
							{
							KW_VALUE_TYPE344=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_descTabTypeExpr6180); 
							KW_VALUE_TYPE344_tree = (CommonTree)adaptor.create(KW_VALUE_TYPE344);
							adaptor.addChild(root_0, KW_VALUE_TYPE344_tree);

							}
							break;
						case 4 :
							// D:\\temp\\antlr\\HiveParser.g:1278:69: identifier
							{
							pushFollow(FOLLOW_identifier_in_descTabTypeExpr6184);
							identifier345=identifier();
							state._fsp--;

							adaptor.addChild(root_0, identifier345.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop86;
				}
			}

			// D:\\temp\\antlr\\HiveParser.g:1278:83: ( identifier )?
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( ((LA87_0 >= Identifier && LA87_0 <= KW_ANALYZE)||(LA87_0 >= KW_ARCHIVE && LA87_0 <= KW_CASCADE)||LA87_0==KW_CHANGE||(LA87_0 >= KW_CLUSTER && LA87_0 <= KW_COLLECTION)||(LA87_0 >= KW_COLUMNS && LA87_0 <= KW_CREATE)||LA87_0==KW_CUBE||(LA87_0 >= KW_CURSOR && LA87_0 <= KW_DATA)||(LA87_0 >= KW_DATABASES && LA87_0 <= KW_DISABLE)||(LA87_0 >= KW_DISTRIBUTE && LA87_0 <= KW_ELEM_TYPE)||LA87_0==KW_ENABLE||LA87_0==KW_ESCAPED||(LA87_0 >= KW_EXCLUSIVE && LA87_0 <= KW_EXPORT)||(LA87_0 >= KW_EXTERNAL && LA87_0 <= KW_FLOAT)||(LA87_0 >= KW_FOR && LA87_0 <= KW_FORMATTED)||LA87_0==KW_FULL||(LA87_0 >= KW_FUNCTIONS && LA87_0 <= KW_GROUPING)||(LA87_0 >= KW_HOLD_DDLTIME && LA87_0 <= KW_IDXPROPERTIES)||(LA87_0 >= KW_IGNORE && LA87_0 <= KW_JAR)||(LA87_0 >= KW_KEYS && LA87_0 <= KW_LEFT)||(LA87_0 >= KW_LIKE && LA87_0 <= KW_LONG)||(LA87_0 >= KW_MAPJOIN && LA87_0 <= KW_MINUS)||(LA87_0 >= KW_MSCK && LA87_0 <= KW_NOSCAN)||(LA87_0 >= KW_NO_DROP && LA87_0 <= KW_OFFLINE)||LA87_0==KW_OPTION||(LA87_0 >= KW_ORCFILE && LA87_0 <= KW_OUTPUTFORMAT)||(LA87_0 >= KW_OVERWRITE && LA87_0 <= KW_PARQUETFILE)||(LA87_0 >= KW_PARTITIONED && LA87_0 <= KW_PLUS)||(LA87_0 >= KW_PRETTY && LA87_0 <= KW_RECORDWRITER)||(LA87_0 >= KW_REGEXP && LA87_0 <= KW_SCHEMAS)||(LA87_0 >= KW_SEMI && LA87_0 <= KW_TABLES)||(LA87_0 >= KW_TBLPROPERTIES && LA87_0 <= KW_TEXTFILE)||(LA87_0 >= KW_TIMESTAMP && LA87_0 <= KW_TRANSACTIONS)||(LA87_0 >= KW_TRIGGER && LA87_0 <= KW_UNARCHIVE)||(LA87_0 >= KW_UNDO && LA87_0 <= KW_UNIONTYPE)||(LA87_0 >= KW_UNLOCK && LA87_0 <= KW_VALUE_TYPE)||LA87_0==KW_VIEW||LA87_0==KW_WHILE||LA87_0==KW_WITH) ) {
				alt87=1;
			}
			else if ( (LA87_0==KW_PARTITION) ) {
				int LA87_2 = input.LA(2);
				if ( (LA87_2==EOF||LA87_2==KW_PARTITION) ) {
					alt87=1;
				}
			}
			switch (alt87) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1278:83: identifier
					{
					pushFollow(FOLLOW_identifier_in_descTabTypeExpr6189);
					identifier346=identifier();
					state._fsp--;

					adaptor.addChild(root_0, identifier346.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descTabTypeExpr"


	public static class partTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "partTypeExpr"
	// D:\\temp\\antlr\\HiveParser.g:1281:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
	public final HiveParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
		HiveParser.partTypeExpr_return retval = new HiveParser.partTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope tabTypeExpr347 =null;
		ParserRuleReturnScope partitionSpec348 =null;

		RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("specifying table partitions", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1284:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1284:8: tabTypeExpr ( partitionSpec )?
			{
			pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr6217);
			tabTypeExpr347=tabTypeExpr();
			state._fsp--;

			stream_tabTypeExpr.add(tabTypeExpr347.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1284:20: ( partitionSpec )?
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==KW_PARTITION) ) {
				alt88=1;
			}
			switch (alt88) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1284:20: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_partTypeExpr6219);
					partitionSpec348=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec348.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tabTypeExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1284:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1284:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1284:64: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partTypeExpr"


	public static class descPartTypeExpr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "descPartTypeExpr"
	// D:\\temp\\antlr\\HiveParser.g:1287:1: descPartTypeExpr : descTabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? ) ;
	public final HiveParser.descPartTypeExpr_return descPartTypeExpr() throws RecognitionException {
		HiveParser.descPartTypeExpr_return retval = new HiveParser.descPartTypeExpr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope descTabTypeExpr349 =null;
		ParserRuleReturnScope partitionSpec350 =null;

		RewriteRuleSubtreeStream stream_descTabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule descTabTypeExpr");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("specifying describe table partitions", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1290:5: ( descTabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1290:8: descTabTypeExpr ( partitionSpec )?
			{
			pushFollow(FOLLOW_descTabTypeExpr_in_descPartTypeExpr6259);
			descTabTypeExpr349=descTabTypeExpr();
			state._fsp--;

			stream_descTabTypeExpr.add(descTabTypeExpr349.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1290:24: ( partitionSpec )?
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==KW_PARTITION) ) {
				alt89=1;
			}
			switch (alt89) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1290:24: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_descPartTypeExpr6261);
					partitionSpec350=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec350.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: descTabTypeExpr, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1290:39: -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1290:42: ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_descTabTypeExpr.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1290:72: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descPartTypeExpr"


	public static class descStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "descStatement"
	// D:\\temp\\antlr\\HiveParser.g:1293:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );
	public final HiveParser.descStatement_return descStatement() throws RecognitionException {
		HiveParser.descStatement_return retval = new HiveParser.descStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token descOptions=null;
		Token KW_DESCRIBE351=null;
		Token KW_DESC352=null;
		Token KW_DESCRIBE353=null;
		Token KW_DESC354=null;
		Token KW_FUNCTION355=null;
		Token KW_EXTENDED356=null;
		Token KW_DESCRIBE357=null;
		Token KW_DESC358=null;
		Token KW_DATABASE359=null;
		Token KW_EXTENDED360=null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbName =null;

		CommonTree descOptions_tree=null;
		CommonTree KW_DESCRIBE351_tree=null;
		CommonTree KW_DESC352_tree=null;
		CommonTree KW_DESCRIBE353_tree=null;
		CommonTree KW_DESC354_tree=null;
		CommonTree KW_FUNCTION355_tree=null;
		CommonTree KW_EXTENDED356_tree=null;
		CommonTree KW_DESCRIBE357_tree=null;
		CommonTree KW_DESC358_tree=null;
		CommonTree KW_DATABASE359_tree=null;
		CommonTree KW_EXTENDED360_tree=null;
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_PRETTY=new RewriteRuleTokenStream(adaptor,"token KW_PRETTY");
		RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
		RewriteRuleSubtreeStream stream_descPartTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule descPartTypeExpr");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");

		 pushMsg("describe statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1296:5: ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) )
			int alt96=3;
			int LA96_0 = input.LA(1);
			if ( (LA96_0==KW_DESCRIBE) ) {
				switch ( input.LA(2) ) {
				case Identifier:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALL:
				case KW_ALTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ARRAY:
				case KW_AS:
				case KW_ASC:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BOTH:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_BY:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_CREATE:
				case KW_CUBE:
				case KW_CURSOR:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DBPROPERTIES:
				case KW_DECIMAL:
				case KW_DEFAULT:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELETE:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DESCRIBE:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOUBLE:
				case KW_DROP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXISTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXTENDED:
				case KW_EXTERNAL:
				case KW_FALSE:
				case KW_FETCH:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FLOAT:
				case KW_FOR:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FULL:
				case KW_FUNCTIONS:
				case KW_GRANT:
				case KW_GROUP:
				case KW_GROUPING:
				case KW_HOLD_DDLTIME:
				case KW_IDXPROPERTIES:
				case KW_IGNORE:
				case KW_IMPORT:
				case KW_IN:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INNER:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_INSERT:
				case KW_INT:
				case KW_INTERSECT:
				case KW_INTO:
				case KW_IS:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LATERAL:
				case KW_LEFT:
				case KW_LIKE:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCAL:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATERIALIZED:
				case KW_MINUS:
				case KW_MSCK:
				case KW_NONE:
				case KW_NOSCAN:
				case KW_NO_DROP:
				case KW_NULL:
				case KW_OF:
				case KW_OFFLINE:
				case KW_OPTION:
				case KW_ORCFILE:
				case KW_ORDER:
				case KW_OUT:
				case KW_OUTER:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARQUETFILE:
				case KW_PARTITION:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PERCENT:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRINCIPALS:
				case KW_PROCEDURE:
				case KW_PROTECTION:
				case KW_PURGE:
				case KW_RANGE:
				case KW_RCFILE:
				case KW_READ:
				case KW_READONLY:
				case KW_READS:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_REGEXP:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPLACE:
				case KW_RESTRICT:
				case KW_REVOKE:
				case KW_RIGHT:
				case KW_RLIKE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_ROLLUP:
				case KW_ROW:
				case KW_ROWS:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SEMI:
				case KW_SEQUENCEFILE:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SET:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SMALLINT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_TABLE:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TEXTFILE:
				case KW_TIMESTAMP:
				case KW_TINYINT:
				case KW_TO:
				case KW_TOUCH:
				case KW_TRANSACTIONS:
				case KW_TRIGGER:
				case KW_TRUE:
				case KW_TRUNCATE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNION:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_UPDATE:
				case KW_USE:
				case KW_USER:
				case KW_USING:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALUE_TYPE:
				case KW_VIEW:
				case KW_WHILE:
				case KW_WITH:
					{
					alt96=1;
					}
					break;
				case KW_FUNCTION:
					{
					alt96=2;
					}
					break;
				case KW_DATABASE:
					{
					alt96=3;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 96, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA96_0==KW_DESC) ) {
				switch ( input.LA(2) ) {
				case Identifier:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ALL:
				case KW_ALTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ARRAY:
				case KW_AS:
				case KW_ASC:
				case KW_BEFORE:
				case KW_BETWEEN:
				case KW_BIGINT:
				case KW_BINARY:
				case KW_BOOLEAN:
				case KW_BOTH:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_BY:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_CREATE:
				case KW_CUBE:
				case KW_CURSOR:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATE:
				case KW_DATETIME:
				case KW_DBPROPERTIES:
				case KW_DECIMAL:
				case KW_DEFAULT:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELETE:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DESCRIBE:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOUBLE:
				case KW_DROP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXISTS:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXTENDED:
				case KW_EXTERNAL:
				case KW_FALSE:
				case KW_FETCH:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FLOAT:
				case KW_FOR:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FULL:
				case KW_FUNCTIONS:
				case KW_GRANT:
				case KW_GROUP:
				case KW_GROUPING:
				case KW_HOLD_DDLTIME:
				case KW_IDXPROPERTIES:
				case KW_IGNORE:
				case KW_IMPORT:
				case KW_IN:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INNER:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_INSERT:
				case KW_INT:
				case KW_INTERSECT:
				case KW_INTO:
				case KW_IS:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LATERAL:
				case KW_LEFT:
				case KW_LIKE:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCAL:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATERIALIZED:
				case KW_MINUS:
				case KW_MSCK:
				case KW_NONE:
				case KW_NOSCAN:
				case KW_NO_DROP:
				case KW_NULL:
				case KW_OF:
				case KW_OFFLINE:
				case KW_OPTION:
				case KW_ORCFILE:
				case KW_ORDER:
				case KW_OUT:
				case KW_OUTER:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARQUETFILE:
				case KW_PARTITION:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PERCENT:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRINCIPALS:
				case KW_PROCEDURE:
				case KW_PROTECTION:
				case KW_PURGE:
				case KW_RANGE:
				case KW_RCFILE:
				case KW_READ:
				case KW_READONLY:
				case KW_READS:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_REGEXP:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPLACE:
				case KW_RESTRICT:
				case KW_REVOKE:
				case KW_RIGHT:
				case KW_RLIKE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_ROLLUP:
				case KW_ROW:
				case KW_ROWS:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SEMI:
				case KW_SEQUENCEFILE:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SET:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SMALLINT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_TABLE:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TEXTFILE:
				case KW_TIMESTAMP:
				case KW_TINYINT:
				case KW_TO:
				case KW_TOUCH:
				case KW_TRANSACTIONS:
				case KW_TRIGGER:
				case KW_TRUE:
				case KW_TRUNCATE:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNION:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_UPDATE:
				case KW_USE:
				case KW_USER:
				case KW_USING:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALUE_TYPE:
				case KW_VIEW:
				case KW_WHILE:
				case KW_WITH:
					{
					alt96=1;
					}
					break;
				case KW_FUNCTION:
					{
					alt96=2;
					}
					break;
				case KW_DATABASE:
					{
					alt96=3;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 96, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 96, 0, input);
				throw nvae;
			}

			switch (alt96) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1296:7: ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY )? (parttype= descPartTypeExpr )
					{
					// D:\\temp\\antlr\\HiveParser.g:1296:7: ( KW_DESCRIBE | KW_DESC )
					int alt90=2;
					int LA90_0 = input.LA(1);
					if ( (LA90_0==KW_DESCRIBE) ) {
						alt90=1;
					}
					else if ( (LA90_0==KW_DESC) ) {
						alt90=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 90, 0, input);
						throw nvae;
					}

					switch (alt90) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1296:8: KW_DESCRIBE
							{
							KW_DESCRIBE351=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement6301);  
							stream_KW_DESCRIBE.add(KW_DESCRIBE351);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1296:20: KW_DESC
							{
							KW_DESC352=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement6303);  
							stream_KW_DESC.add(KW_DESC352);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1296:29: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY )?
					int alt91=4;
					switch ( input.LA(1) ) {
						case KW_FORMATTED:
							{
							switch ( input.LA(2) ) {
								case Identifier:
									{
									alt91=1;
									}
									break;
								case KW_PARTITION:
									{
									alt91=1;
									}
									break;
								case KW_ADD:
								case KW_ADMIN:
								case KW_AFTER:
								case KW_ALL:
								case KW_ALTER:
								case KW_ANALYZE:
								case KW_ARCHIVE:
								case KW_ARRAY:
								case KW_AS:
								case KW_ASC:
								case KW_BEFORE:
								case KW_BETWEEN:
								case KW_BIGINT:
								case KW_BINARY:
								case KW_BOOLEAN:
								case KW_BOTH:
								case KW_BUCKET:
								case KW_BUCKETS:
								case KW_BY:
								case KW_CASCADE:
								case KW_CHANGE:
								case KW_CLUSTER:
								case KW_CLUSTERED:
								case KW_CLUSTERSTATUS:
								case KW_COLLECTION:
								case KW_COLUMNS:
								case KW_COMMENT:
								case KW_COMPACT:
								case KW_COMPACTIONS:
								case KW_COMPUTE:
								case KW_CONCATENATE:
								case KW_CONTINUE:
								case KW_CREATE:
								case KW_CUBE:
								case KW_CURSOR:
								case KW_DATA:
								case KW_DATABASES:
								case KW_DATE:
								case KW_DATETIME:
								case KW_DBPROPERTIES:
								case KW_DECIMAL:
								case KW_DEFAULT:
								case KW_DEFERRED:
								case KW_DEFINED:
								case KW_DELETE:
								case KW_DELIMITED:
								case KW_DEPENDENCY:
								case KW_DESC:
								case KW_DESCRIBE:
								case KW_DIRECTORIES:
								case KW_DIRECTORY:
								case KW_DISABLE:
								case KW_DISTRIBUTE:
								case KW_DOUBLE:
								case KW_DROP:
								case KW_ELEM_TYPE:
								case KW_ENABLE:
								case KW_ESCAPED:
								case KW_EXCLUSIVE:
								case KW_EXISTS:
								case KW_EXPLAIN:
								case KW_EXPORT:
								case KW_EXTERNAL:
								case KW_FALSE:
								case KW_FETCH:
								case KW_FIELDS:
								case KW_FILE:
								case KW_FILEFORMAT:
								case KW_FIRST:
								case KW_FLOAT:
								case KW_FOR:
								case KW_FORMAT:
								case KW_FORMATTED:
								case KW_FULL:
								case KW_FUNCTIONS:
								case KW_GRANT:
								case KW_GROUP:
								case KW_GROUPING:
								case KW_HOLD_DDLTIME:
								case KW_IDXPROPERTIES:
								case KW_IGNORE:
								case KW_IMPORT:
								case KW_IN:
								case KW_INDEX:
								case KW_INDEXES:
								case KW_INNER:
								case KW_INPATH:
								case KW_INPUTDRIVER:
								case KW_INPUTFORMAT:
								case KW_INSERT:
								case KW_INT:
								case KW_INTERSECT:
								case KW_INTO:
								case KW_IS:
								case KW_ITEMS:
								case KW_JAR:
								case KW_KEYS:
								case KW_KEY_TYPE:
								case KW_LATERAL:
								case KW_LEFT:
								case KW_LIKE:
								case KW_LIMIT:
								case KW_LINES:
								case KW_LOAD:
								case KW_LOCAL:
								case KW_LOCATION:
								case KW_LOCK:
								case KW_LOCKS:
								case KW_LOGICAL:
								case KW_LONG:
								case KW_MAPJOIN:
								case KW_MATERIALIZED:
								case KW_MINUS:
								case KW_MSCK:
								case KW_NONE:
								case KW_NOSCAN:
								case KW_NO_DROP:
								case KW_NULL:
								case KW_OF:
								case KW_OFFLINE:
								case KW_OPTION:
								case KW_ORCFILE:
								case KW_ORDER:
								case KW_OUT:
								case KW_OUTER:
								case KW_OUTPUTDRIVER:
								case KW_OUTPUTFORMAT:
								case KW_OVERWRITE:
								case KW_OWNER:
								case KW_PARQUETFILE:
								case KW_PARTITIONED:
								case KW_PARTITIONS:
								case KW_PERCENT:
								case KW_PLUS:
								case KW_PRETTY:
								case KW_PRINCIPALS:
								case KW_PROCEDURE:
								case KW_PROTECTION:
								case KW_PURGE:
								case KW_RANGE:
								case KW_RCFILE:
								case KW_READ:
								case KW_READONLY:
								case KW_READS:
								case KW_REBUILD:
								case KW_RECORDREADER:
								case KW_RECORDWRITER:
								case KW_REGEXP:
								case KW_RENAME:
								case KW_REPAIR:
								case KW_REPLACE:
								case KW_RESTRICT:
								case KW_REVOKE:
								case KW_RIGHT:
								case KW_RLIKE:
								case KW_ROLE:
								case KW_ROLES:
								case KW_ROLLUP:
								case KW_ROW:
								case KW_ROWS:
								case KW_SCHEMA:
								case KW_SCHEMAS:
								case KW_SEMI:
								case KW_SEQUENCEFILE:
								case KW_SERDE:
								case KW_SERDEPROPERTIES:
								case KW_SET:
								case KW_SETS:
								case KW_SHARED:
								case KW_SHOW:
								case KW_SHOW_DATABASE:
								case KW_SKEWED:
								case KW_SMALLINT:
								case KW_SORT:
								case KW_SORTED:
								case KW_SSL:
								case KW_STATISTICS:
								case KW_STORED:
								case KW_STREAMTABLE:
								case KW_STRING:
								case KW_STRUCT:
								case KW_TABLE:
								case KW_TABLES:
								case KW_TBLPROPERTIES:
								case KW_TEMPORARY:
								case KW_TERMINATED:
								case KW_TEXTFILE:
								case KW_TIMESTAMP:
								case KW_TINYINT:
								case KW_TO:
								case KW_TOUCH:
								case KW_TRANSACTIONS:
								case KW_TRIGGER:
								case KW_TRUE:
								case KW_TRUNCATE:
								case KW_UNARCHIVE:
								case KW_UNDO:
								case KW_UNION:
								case KW_UNIONTYPE:
								case KW_UNLOCK:
								case KW_UNSET:
								case KW_UNSIGNED:
								case KW_UPDATE:
								case KW_USE:
								case KW_USER:
								case KW_USING:
								case KW_UTC:
								case KW_UTCTIMESTAMP:
								case KW_VALUE_TYPE:
								case KW_VIEW:
								case KW_WHILE:
								case KW_WITH:
									{
									alt91=1;
									}
									break;
							}
							}
							break;
						case KW_EXTENDED:
							{
							alt91=2;
							}
							break;
						case KW_PRETTY:
							{
							switch ( input.LA(2) ) {
								case Identifier:
									{
									alt91=3;
									}
									break;
								case KW_PARTITION:
									{
									alt91=3;
									}
									break;
								case KW_ADD:
								case KW_ADMIN:
								case KW_AFTER:
								case KW_ALL:
								case KW_ALTER:
								case KW_ANALYZE:
								case KW_ARCHIVE:
								case KW_ARRAY:
								case KW_AS:
								case KW_ASC:
								case KW_BEFORE:
								case KW_BETWEEN:
								case KW_BIGINT:
								case KW_BINARY:
								case KW_BOOLEAN:
								case KW_BOTH:
								case KW_BUCKET:
								case KW_BUCKETS:
								case KW_BY:
								case KW_CASCADE:
								case KW_CHANGE:
								case KW_CLUSTER:
								case KW_CLUSTERED:
								case KW_CLUSTERSTATUS:
								case KW_COLLECTION:
								case KW_COLUMNS:
								case KW_COMMENT:
								case KW_COMPACT:
								case KW_COMPACTIONS:
								case KW_COMPUTE:
								case KW_CONCATENATE:
								case KW_CONTINUE:
								case KW_CREATE:
								case KW_CUBE:
								case KW_CURSOR:
								case KW_DATA:
								case KW_DATABASES:
								case KW_DATE:
								case KW_DATETIME:
								case KW_DBPROPERTIES:
								case KW_DECIMAL:
								case KW_DEFAULT:
								case KW_DEFERRED:
								case KW_DEFINED:
								case KW_DELETE:
								case KW_DELIMITED:
								case KW_DEPENDENCY:
								case KW_DESC:
								case KW_DESCRIBE:
								case KW_DIRECTORIES:
								case KW_DIRECTORY:
								case KW_DISABLE:
								case KW_DISTRIBUTE:
								case KW_DOUBLE:
								case KW_DROP:
								case KW_ELEM_TYPE:
								case KW_ENABLE:
								case KW_ESCAPED:
								case KW_EXCLUSIVE:
								case KW_EXISTS:
								case KW_EXPLAIN:
								case KW_EXPORT:
								case KW_EXTERNAL:
								case KW_FALSE:
								case KW_FETCH:
								case KW_FIELDS:
								case KW_FILE:
								case KW_FILEFORMAT:
								case KW_FIRST:
								case KW_FLOAT:
								case KW_FOR:
								case KW_FORMAT:
								case KW_FORMATTED:
								case KW_FULL:
								case KW_FUNCTIONS:
								case KW_GRANT:
								case KW_GROUP:
								case KW_GROUPING:
								case KW_HOLD_DDLTIME:
								case KW_IDXPROPERTIES:
								case KW_IGNORE:
								case KW_IMPORT:
								case KW_IN:
								case KW_INDEX:
								case KW_INDEXES:
								case KW_INNER:
								case KW_INPATH:
								case KW_INPUTDRIVER:
								case KW_INPUTFORMAT:
								case KW_INSERT:
								case KW_INT:
								case KW_INTERSECT:
								case KW_INTO:
								case KW_IS:
								case KW_ITEMS:
								case KW_JAR:
								case KW_KEYS:
								case KW_KEY_TYPE:
								case KW_LATERAL:
								case KW_LEFT:
								case KW_LIKE:
								case KW_LIMIT:
								case KW_LINES:
								case KW_LOAD:
								case KW_LOCAL:
								case KW_LOCATION:
								case KW_LOCK:
								case KW_LOCKS:
								case KW_LOGICAL:
								case KW_LONG:
								case KW_MAPJOIN:
								case KW_MATERIALIZED:
								case KW_MINUS:
								case KW_MSCK:
								case KW_NONE:
								case KW_NOSCAN:
								case KW_NO_DROP:
								case KW_NULL:
								case KW_OF:
								case KW_OFFLINE:
								case KW_OPTION:
								case KW_ORCFILE:
								case KW_ORDER:
								case KW_OUT:
								case KW_OUTER:
								case KW_OUTPUTDRIVER:
								case KW_OUTPUTFORMAT:
								case KW_OVERWRITE:
								case KW_OWNER:
								case KW_PARQUETFILE:
								case KW_PARTITIONED:
								case KW_PARTITIONS:
								case KW_PERCENT:
								case KW_PLUS:
								case KW_PRETTY:
								case KW_PRINCIPALS:
								case KW_PROCEDURE:
								case KW_PROTECTION:
								case KW_PURGE:
								case KW_RANGE:
								case KW_RCFILE:
								case KW_READ:
								case KW_READONLY:
								case KW_READS:
								case KW_REBUILD:
								case KW_RECORDREADER:
								case KW_RECORDWRITER:
								case KW_REGEXP:
								case KW_RENAME:
								case KW_REPAIR:
								case KW_REPLACE:
								case KW_RESTRICT:
								case KW_REVOKE:
								case KW_RIGHT:
								case KW_RLIKE:
								case KW_ROLE:
								case KW_ROLES:
								case KW_ROLLUP:
								case KW_ROW:
								case KW_ROWS:
								case KW_SCHEMA:
								case KW_SCHEMAS:
								case KW_SEMI:
								case KW_SEQUENCEFILE:
								case KW_SERDE:
								case KW_SERDEPROPERTIES:
								case KW_SET:
								case KW_SETS:
								case KW_SHARED:
								case KW_SHOW:
								case KW_SHOW_DATABASE:
								case KW_SKEWED:
								case KW_SMALLINT:
								case KW_SORT:
								case KW_SORTED:
								case KW_SSL:
								case KW_STATISTICS:
								case KW_STORED:
								case KW_STREAMTABLE:
								case KW_STRING:
								case KW_STRUCT:
								case KW_TABLE:
								case KW_TABLES:
								case KW_TBLPROPERTIES:
								case KW_TEMPORARY:
								case KW_TERMINATED:
								case KW_TEXTFILE:
								case KW_TIMESTAMP:
								case KW_TINYINT:
								case KW_TO:
								case KW_TOUCH:
								case KW_TRANSACTIONS:
								case KW_TRIGGER:
								case KW_TRUE:
								case KW_TRUNCATE:
								case KW_UNARCHIVE:
								case KW_UNDO:
								case KW_UNION:
								case KW_UNIONTYPE:
								case KW_UNLOCK:
								case KW_UNSET:
								case KW_UNSIGNED:
								case KW_UPDATE:
								case KW_USE:
								case KW_USER:
								case KW_USING:
								case KW_UTC:
								case KW_UTCTIMESTAMP:
								case KW_VALUE_TYPE:
								case KW_VIEW:
								case KW_WHILE:
								case KW_WITH:
									{
									alt91=3;
									}
									break;
							}
							}
							break;
					}
					switch (alt91) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1296:30: descOptions= KW_FORMATTED
							{
							descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement6309);  
							stream_KW_FORMATTED.add(descOptions);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1296:55: descOptions= KW_EXTENDED
							{
							descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6313);  
							stream_KW_EXTENDED.add(descOptions);

							}
							break;
						case 3 :
							// D:\\temp\\antlr\\HiveParser.g:1296:79: descOptions= KW_PRETTY
							{
							descOptions=(Token)match(input,KW_PRETTY,FOLLOW_KW_PRETTY_in_descStatement6317);  
							stream_KW_PRETTY.add(descOptions);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1296:103: (parttype= descPartTypeExpr )
					// D:\\temp\\antlr\\HiveParser.g:1296:104: parttype= descPartTypeExpr
					{
					pushFollow(FOLLOW_descPartTypeExpr_in_descStatement6324);
					parttype=descPartTypeExpr();
					state._fsp--;

					stream_descPartTypeExpr.add(parttype.getTree());
					}

					// AST REWRITE
					// elements: parttype, descOptions
					// token labels: descOptions
					// rule labels: retval, parttype
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1296:131: -> ^( TOK_DESCTABLE $parttype ( $descOptions)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1296:134: ^( TOK_DESCTABLE $parttype ( $descOptions)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1296:161: ( $descOptions)?
						if ( stream_descOptions.hasNext() ) {
							adaptor.addChild(root_1, stream_descOptions.nextNode());
						}
						stream_descOptions.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1297:7: ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
					{
					// D:\\temp\\antlr\\HiveParser.g:1297:7: ( KW_DESCRIBE | KW_DESC )
					int alt92=2;
					int LA92_0 = input.LA(1);
					if ( (LA92_0==KW_DESCRIBE) ) {
						alt92=1;
					}
					else if ( (LA92_0==KW_DESC) ) {
						alt92=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 92, 0, input);
						throw nvae;
					}

					switch (alt92) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1297:8: KW_DESCRIBE
							{
							KW_DESCRIBE353=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement6347);  
							stream_KW_DESCRIBE.add(KW_DESCRIBE353);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1297:20: KW_DESC
							{
							KW_DESC354=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement6349);  
							stream_KW_DESC.add(KW_DESC354);

							}
							break;

					}

					KW_FUNCTION355=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement6352);  
					stream_KW_FUNCTION.add(KW_FUNCTION355);

					// D:\\temp\\antlr\\HiveParser.g:1297:41: ( KW_EXTENDED )?
					int alt93=2;
					int LA93_0 = input.LA(1);
					if ( (LA93_0==KW_EXTENDED) ) {
						alt93=1;
					}
					switch (alt93) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1297:41: KW_EXTENDED
							{
							KW_EXTENDED356=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6354);  
							stream_KW_EXTENDED.add(KW_EXTENDED356);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1297:54: (name= descFuncNames )
					// D:\\temp\\antlr\\HiveParser.g:1297:55: name= descFuncNames
					{
					pushFollow(FOLLOW_descFuncNames_in_descStatement6360);
					name=descFuncNames();
					state._fsp--;

					stream_descFuncNames.add(name.getTree());
					}

					// AST REWRITE
					// elements: name, KW_EXTENDED
					// token labels: 
					// rule labels: retval, name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1297:75: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1297:78: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1297:103: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1298:7: ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= identifier )
					{
					// D:\\temp\\antlr\\HiveParser.g:1298:7: ( KW_DESCRIBE | KW_DESC )
					int alt94=2;
					int LA94_0 = input.LA(1);
					if ( (LA94_0==KW_DESCRIBE) ) {
						alt94=1;
					}
					else if ( (LA94_0==KW_DESC) ) {
						alt94=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 94, 0, input);
						throw nvae;
					}

					switch (alt94) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1298:8: KW_DESCRIBE
							{
							KW_DESCRIBE357=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement6382);  
							stream_KW_DESCRIBE.add(KW_DESCRIBE357);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1298:20: KW_DESC
							{
							KW_DESC358=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement6384);  
							stream_KW_DESC.add(KW_DESC358);

							}
							break;

					}

					KW_DATABASE359=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement6387);  
					stream_KW_DATABASE.add(KW_DATABASE359);

					// D:\\temp\\antlr\\HiveParser.g:1298:41: ( KW_EXTENDED )?
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==KW_EXTENDED) ) {
						alt95=1;
					}
					switch (alt95) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1298:41: KW_EXTENDED
							{
							KW_EXTENDED360=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement6389);  
							stream_KW_EXTENDED.add(KW_EXTENDED360);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1298:54: (dbName= identifier )
					// D:\\temp\\antlr\\HiveParser.g:1298:55: dbName= identifier
					{
					pushFollow(FOLLOW_identifier_in_descStatement6395);
					dbName=identifier();
					state._fsp--;

					stream_identifier.add(dbName.getTree());
					}

					// AST REWRITE
					// elements: dbName, KW_EXTENDED
					// token labels: 
					// rule labels: retval, dbName
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1298:74: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1298:77: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE"), root_1);
						adaptor.addChild(root_1, stream_dbName.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1298:104: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descStatement"


	public static class analyzeStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "analyzeStatement"
	// D:\\temp\\antlr\\HiveParser.g:1301:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS statsColumnName= columnNameList ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( $statsColumnName)? ) ;
	public final HiveParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
		HiveParser.analyzeStatement_return retval = new HiveParser.analyzeStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token noscan=null;
		Token partialscan=null;
		Token KW_ANALYZE361=null;
		Token KW_TABLE362=null;
		Token KW_COMPUTE363=null;
		Token KW_STATISTICS364=null;
		Token KW_FOR365=null;
		Token KW_COLUMNS366=null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope statsColumnName =null;

		CommonTree noscan_tree=null;
		CommonTree partialscan_tree=null;
		CommonTree KW_ANALYZE361_tree=null;
		CommonTree KW_TABLE362_tree=null;
		CommonTree KW_COMPUTE363_tree=null;
		CommonTree KW_STATISTICS364_tree=null;
		CommonTree KW_FOR365_tree=null;
		CommonTree KW_COLUMNS366_tree=null;
		RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
		RewriteRuleTokenStream stream_KW_NOSCAN=new RewriteRuleTokenStream(adaptor,"token KW_NOSCAN");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
		RewriteRuleTokenStream stream_KW_PARTIALSCAN=new RewriteRuleTokenStream(adaptor,"token KW_PARTIALSCAN");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("analyze statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1304:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS statsColumnName= columnNameList ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( $statsColumnName)? ) )
			// D:\\temp\\antlr\\HiveParser.g:1304:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS statsColumnName= columnNameList ) )?
			{
			KW_ANALYZE361=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement6435);  
			stream_KW_ANALYZE.add(KW_ANALYZE361);

			KW_TABLE362=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement6437);  
			stream_KW_TABLE.add(KW_TABLE362);

			// D:\\temp\\antlr\\HiveParser.g:1304:27: (parttype= tableOrPartition )
			// D:\\temp\\antlr\\HiveParser.g:1304:28: parttype= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement6442);
			parttype=tableOrPartition();
			state._fsp--;

			stream_tableOrPartition.add(parttype.getTree());
			}

			KW_COMPUTE363=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement6445);  
			stream_KW_COMPUTE.add(KW_COMPUTE363);

			KW_STATISTICS364=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement6447);  
			stream_KW_STATISTICS.add(KW_STATISTICS364);

			// D:\\temp\\antlr\\HiveParser.g:1304:80: ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS statsColumnName= columnNameList ) )?
			int alt97=4;
			switch ( input.LA(1) ) {
				case KW_NOSCAN:
					{
					alt97=1;
					}
					break;
				case KW_PARTIALSCAN:
					{
					alt97=2;
					}
					break;
				case KW_FOR:
					{
					alt97=3;
					}
					break;
			}
			switch (alt97) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1304:81: (noscan= KW_NOSCAN )
					{
					// D:\\temp\\antlr\\HiveParser.g:1304:81: (noscan= KW_NOSCAN )
					// D:\\temp\\antlr\\HiveParser.g:1304:82: noscan= KW_NOSCAN
					{
					noscan=(Token)match(input,KW_NOSCAN,FOLLOW_KW_NOSCAN_in_analyzeStatement6453);  
					stream_KW_NOSCAN.add(noscan);

					}

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1304:102: (partialscan= KW_PARTIALSCAN )
					{
					// D:\\temp\\antlr\\HiveParser.g:1304:102: (partialscan= KW_PARTIALSCAN )
					// D:\\temp\\antlr\\HiveParser.g:1304:103: partialscan= KW_PARTIALSCAN
					{
					partialscan=(Token)match(input,KW_PARTIALSCAN,FOLLOW_KW_PARTIALSCAN_in_analyzeStatement6461);  
					stream_KW_PARTIALSCAN.add(partialscan);

					}

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1304:133: ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )
					{
					// D:\\temp\\antlr\\HiveParser.g:1304:133: ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )
					// D:\\temp\\antlr\\HiveParser.g:1304:134: KW_FOR KW_COLUMNS statsColumnName= columnNameList
					{
					KW_FOR365=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement6467);  
					stream_KW_FOR.add(KW_FOR365);

					KW_COLUMNS366=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement6469);  
					stream_KW_COLUMNS.add(KW_COLUMNS366);

					pushFollow(FOLLOW_columnNameList_in_analyzeStatement6473);
					statsColumnName=columnNameList();
					state._fsp--;

					stream_columnNameList.add(statsColumnName.getTree());
					}

					}
					break;

			}

			// AST REWRITE
			// elements: noscan, partialscan, parttype, statsColumnName
			// token labels: partialscan, noscan
			// rule labels: retval, parttype, statsColumnName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_partialscan=new RewriteRuleTokenStream(adaptor,"token partialscan",partialscan);
			RewriteRuleTokenStream stream_noscan=new RewriteRuleTokenStream(adaptor,"token noscan",noscan);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
			RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"rule statsColumnName",statsColumnName!=null?statsColumnName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1304:186: -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( $statsColumnName)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1304:189: ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( $statsColumnName)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE"), root_1);
				adaptor.addChild(root_1, stream_parttype.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1304:214: ( $noscan)?
				if ( stream_noscan.hasNext() ) {
					adaptor.addChild(root_1, stream_noscan.nextNode());
				}
				stream_noscan.reset();

				// D:\\temp\\antlr\\HiveParser.g:1304:223: ( $partialscan)?
				if ( stream_partialscan.hasNext() ) {
					adaptor.addChild(root_1, stream_partialscan.nextNode());
				}
				stream_partialscan.reset();

				// D:\\temp\\antlr\\HiveParser.g:1304:237: ( $statsColumnName)?
				if ( stream_statsColumnName.hasNext() ) {
					adaptor.addChild(root_1, stream_statsColumnName.nextTree());
				}
				stream_statsColumnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "analyzeStatement"


	public static class showStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showStatement"
	// D:\\temp\\antlr\\HiveParser.g:1307:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW KW_LOCKS KW_DATABASE (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) );
	public final HiveParser.showStatement_return showStatement() throws RecognitionException {
		HiveParser.showStatement_return retval = new HiveParser.showStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token prptyName=null;
		Token isExtended=null;
		Token dbName=null;
		Token showOptions=null;
		Token KW_SHOW367=null;
		Token KW_DATABASES368=null;
		Token KW_SCHEMAS369=null;
		Token KW_LIKE370=null;
		Token KW_SHOW372=null;
		Token KW_TABLES373=null;
		Token KW_FROM374=null;
		Token KW_IN375=null;
		Token KW_LIKE376=null;
		Token KW_SHOW379=null;
		Token KW_COLUMNS380=null;
		Token KW_FROM381=null;
		Token KW_IN382=null;
		Token KW_FROM383=null;
		Token KW_IN384=null;
		Token KW_SHOW385=null;
		Token KW_FUNCTIONS386=null;
		Token KW_SHOW388=null;
		Token KW_PARTITIONS389=null;
		Token KW_SHOW391=null;
		Token KW_CREATE392=null;
		Token KW_TABLE393=null;
		Token KW_SHOW394=null;
		Token KW_TABLE395=null;
		Token KW_EXTENDED396=null;
		Token KW_FROM397=null;
		Token KW_IN398=null;
		Token KW_LIKE399=null;
		Token KW_SHOW402=null;
		Token KW_TBLPROPERTIES403=null;
		Token LPAREN404=null;
		Token RPAREN405=null;
		Token KW_SHOW406=null;
		Token KW_LOCKS407=null;
		Token KW_SHOW408=null;
		Token KW_LOCKS409=null;
		Token KW_DATABASE410=null;
		Token KW_SHOW411=null;
		Token KW_INDEX412=null;
		Token KW_INDEXES413=null;
		Token KW_ON414=null;
		Token KW_FROM416=null;
		Token KW_IN417=null;
		Token KW_SHOW418=null;
		Token KW_COMPACTIONS419=null;
		Token KW_SHOW420=null;
		Token KW_TRANSACTIONS421=null;
		ParserRuleReturnScope db_name =null;
		ParserRuleReturnScope tabname =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope tblName =null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope showStmtIdentifier371 =null;
		ParserRuleReturnScope showStmtIdentifier377 =null;
		ParserRuleReturnScope showStmtIdentifier378 =null;
		ParserRuleReturnScope showFunctionIdentifier387 =null;
		ParserRuleReturnScope partitionSpec390 =null;
		ParserRuleReturnScope showStmtIdentifier400 =null;
		ParserRuleReturnScope partitionSpec401 =null;
		ParserRuleReturnScope showStmtIdentifier415 =null;

		CommonTree prptyName_tree=null;
		CommonTree isExtended_tree=null;
		CommonTree dbName_tree=null;
		CommonTree showOptions_tree=null;
		CommonTree KW_SHOW367_tree=null;
		CommonTree KW_DATABASES368_tree=null;
		CommonTree KW_SCHEMAS369_tree=null;
		CommonTree KW_LIKE370_tree=null;
		CommonTree KW_SHOW372_tree=null;
		CommonTree KW_TABLES373_tree=null;
		CommonTree KW_FROM374_tree=null;
		CommonTree KW_IN375_tree=null;
		CommonTree KW_LIKE376_tree=null;
		CommonTree KW_SHOW379_tree=null;
		CommonTree KW_COLUMNS380_tree=null;
		CommonTree KW_FROM381_tree=null;
		CommonTree KW_IN382_tree=null;
		CommonTree KW_FROM383_tree=null;
		CommonTree KW_IN384_tree=null;
		CommonTree KW_SHOW385_tree=null;
		CommonTree KW_FUNCTIONS386_tree=null;
		CommonTree KW_SHOW388_tree=null;
		CommonTree KW_PARTITIONS389_tree=null;
		CommonTree KW_SHOW391_tree=null;
		CommonTree KW_CREATE392_tree=null;
		CommonTree KW_TABLE393_tree=null;
		CommonTree KW_SHOW394_tree=null;
		CommonTree KW_TABLE395_tree=null;
		CommonTree KW_EXTENDED396_tree=null;
		CommonTree KW_FROM397_tree=null;
		CommonTree KW_IN398_tree=null;
		CommonTree KW_LIKE399_tree=null;
		CommonTree KW_SHOW402_tree=null;
		CommonTree KW_TBLPROPERTIES403_tree=null;
		CommonTree LPAREN404_tree=null;
		CommonTree RPAREN405_tree=null;
		CommonTree KW_SHOW406_tree=null;
		CommonTree KW_LOCKS407_tree=null;
		CommonTree KW_SHOW408_tree=null;
		CommonTree KW_LOCKS409_tree=null;
		CommonTree KW_DATABASE410_tree=null;
		CommonTree KW_SHOW411_tree=null;
		CommonTree KW_INDEX412_tree=null;
		CommonTree KW_INDEXES413_tree=null;
		CommonTree KW_ON414_tree=null;
		CommonTree KW_FROM416_tree=null;
		CommonTree KW_IN417_tree=null;
		CommonTree KW_SHOW418_tree=null;
		CommonTree KW_COMPACTIONS419_tree=null;
		CommonTree KW_SHOW420_tree=null;
		CommonTree KW_TRANSACTIONS421_tree=null;
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
		RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_COMPACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_COMPACTIONS");
		RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
		RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_showFunctionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showFunctionIdentifier");
		RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("show statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1310:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW KW_LOCKS KW_DATABASE (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) )
			int alt119=13;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==KW_SHOW) ) {
				switch ( input.LA(2) ) {
				case KW_TABLES:
					{
					alt119=2;
					}
					break;
				case KW_COLUMNS:
					{
					alt119=3;
					}
					break;
				case KW_FUNCTIONS:
					{
					alt119=4;
					}
					break;
				case KW_PARTITIONS:
					{
					alt119=5;
					}
					break;
				case KW_CREATE:
					{
					alt119=6;
					}
					break;
				case KW_TABLE:
					{
					alt119=7;
					}
					break;
				case KW_TBLPROPERTIES:
					{
					alt119=8;
					}
					break;
				case KW_LOCKS:
					{
					int LA119_9 = input.LA(3);
					if ( (LA119_9==KW_DATABASE) ) {
						alt119=10;
					}
					else if ( (LA119_9==EOF||(LA119_9 >= Identifier && LA119_9 <= KW_ANALYZE)||(LA119_9 >= KW_ARCHIVE && LA119_9 <= KW_CASCADE)||LA119_9==KW_CHANGE||(LA119_9 >= KW_CLUSTER && LA119_9 <= KW_COLLECTION)||(LA119_9 >= KW_COLUMNS && LA119_9 <= KW_CREATE)||LA119_9==KW_CUBE||(LA119_9 >= KW_CURSOR && LA119_9 <= KW_DATA)||(LA119_9 >= KW_DATABASES && LA119_9 <= KW_DISABLE)||(LA119_9 >= KW_DISTRIBUTE && LA119_9 <= KW_ELEM_TYPE)||LA119_9==KW_ENABLE||LA119_9==KW_ESCAPED||(LA119_9 >= KW_EXCLUSIVE && LA119_9 <= KW_FLOAT)||(LA119_9 >= KW_FOR && LA119_9 <= KW_FORMATTED)||LA119_9==KW_FULL||(LA119_9 >= KW_FUNCTIONS && LA119_9 <= KW_GROUPING)||(LA119_9 >= KW_HOLD_DDLTIME && LA119_9 <= KW_IDXPROPERTIES)||(LA119_9 >= KW_IGNORE && LA119_9 <= KW_JAR)||(LA119_9 >= KW_KEYS && LA119_9 <= KW_LEFT)||(LA119_9 >= KW_LIKE && LA119_9 <= KW_LONG)||(LA119_9 >= KW_MAPJOIN && LA119_9 <= KW_MINUS)||(LA119_9 >= KW_MSCK && LA119_9 <= KW_NOSCAN)||(LA119_9 >= KW_NO_DROP && LA119_9 <= KW_OFFLINE)||LA119_9==KW_OPTION||(LA119_9 >= KW_ORCFILE && LA119_9 <= KW_OUTPUTFORMAT)||(LA119_9 >= KW_OVERWRITE && LA119_9 <= KW_PARQUETFILE)||(LA119_9 >= KW_PARTITION && LA119_9 <= KW_PLUS)||(LA119_9 >= KW_PRETTY && LA119_9 <= KW_RECORDWRITER)||(LA119_9 >= KW_REGEXP && LA119_9 <= KW_SCHEMAS)||(LA119_9 >= KW_SEMI && LA119_9 <= KW_TABLES)||(LA119_9 >= KW_TBLPROPERTIES && LA119_9 <= KW_TEXTFILE)||(LA119_9 >= KW_TIMESTAMP && LA119_9 <= KW_TRANSACTIONS)||(LA119_9 >= KW_TRIGGER && LA119_9 <= KW_UNARCHIVE)||(LA119_9 >= KW_UNDO && LA119_9 <= KW_UNIONTYPE)||(LA119_9 >= KW_UNLOCK && LA119_9 <= KW_VALUE_TYPE)||LA119_9==KW_VIEW||LA119_9==KW_WHILE||LA119_9==KW_WITH) ) {
						alt119=9;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 119, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case KW_COMPACTIONS:
					{
					alt119=12;
					}
					break;
				case KW_TRANSACTIONS:
					{
					alt119=13;
					}
					break;
				case KW_DATABASES:
				case KW_SCHEMAS:
					{
					alt119=1;
					}
					break;
				case KW_FORMATTED:
				case KW_INDEX:
				case KW_INDEXES:
					{
					alt119=11;
					}
					break;
				default:
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 119, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 119, 0, input);
				throw nvae;
			}

			switch (alt119) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1310:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
					{
					KW_SHOW367=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6524);  
					stream_KW_SHOW.add(KW_SHOW367);

					// D:\\temp\\antlr\\HiveParser.g:1310:15: ( KW_DATABASES | KW_SCHEMAS )
					int alt98=2;
					int LA98_0 = input.LA(1);
					if ( (LA98_0==KW_DATABASES) ) {
						alt98=1;
					}
					else if ( (LA98_0==KW_SCHEMAS) ) {
						alt98=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 98, 0, input);
						throw nvae;
					}

					switch (alt98) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1310:16: KW_DATABASES
							{
							KW_DATABASES368=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement6527);  
							stream_KW_DATABASES.add(KW_DATABASES368);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1310:29: KW_SCHEMAS
							{
							KW_SCHEMAS369=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement6529);  
							stream_KW_SCHEMAS.add(KW_SCHEMAS369);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1310:41: ( KW_LIKE showStmtIdentifier )?
					int alt99=2;
					int LA99_0 = input.LA(1);
					if ( (LA99_0==KW_LIKE) ) {
						alt99=1;
					}
					switch (alt99) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1310:42: KW_LIKE showStmtIdentifier
							{
							KW_LIKE370=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement6533);  
							stream_KW_LIKE.add(KW_LIKE370);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6535);
							showStmtIdentifier371=showStmtIdentifier();
							state._fsp--;

							stream_showStmtIdentifier.add(showStmtIdentifier371.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1310:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1310:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:1310:94: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1311:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW372=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6554);  
					stream_KW_SHOW.add(KW_SHOW372);

					KW_TABLES373=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement6556);  
					stream_KW_TABLES.add(KW_TABLES373);

					// D:\\temp\\antlr\\HiveParser.g:1311:25: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt101=2;
					int LA101_0 = input.LA(1);
					if ( (LA101_0==KW_FROM) ) {
						alt101=1;
					}
					else if ( (LA101_0==KW_IN) ) {
						int LA101_2 = input.LA(2);
						if ( ((LA101_2 >= Identifier && LA101_2 <= KW_ANALYZE)||(LA101_2 >= KW_ARCHIVE && LA101_2 <= KW_CASCADE)||LA101_2==KW_CHANGE||(LA101_2 >= KW_CLUSTER && LA101_2 <= KW_COLLECTION)||(LA101_2 >= KW_COLUMNS && LA101_2 <= KW_CREATE)||LA101_2==KW_CUBE||(LA101_2 >= KW_CURSOR && LA101_2 <= KW_DATA)||(LA101_2 >= KW_DATABASES && LA101_2 <= KW_DISABLE)||(LA101_2 >= KW_DISTRIBUTE && LA101_2 <= KW_ELEM_TYPE)||LA101_2==KW_ENABLE||LA101_2==KW_ESCAPED||(LA101_2 >= KW_EXCLUSIVE && LA101_2 <= KW_EXPORT)||(LA101_2 >= KW_EXTERNAL && LA101_2 <= KW_FLOAT)||(LA101_2 >= KW_FOR && LA101_2 <= KW_FORMATTED)||LA101_2==KW_FULL||(LA101_2 >= KW_FUNCTIONS && LA101_2 <= KW_GROUPING)||(LA101_2 >= KW_HOLD_DDLTIME && LA101_2 <= KW_IDXPROPERTIES)||(LA101_2 >= KW_IGNORE && LA101_2 <= KW_JAR)||(LA101_2 >= KW_KEYS && LA101_2 <= KW_LEFT)||(LA101_2 >= KW_LIKE && LA101_2 <= KW_LONG)||(LA101_2 >= KW_MAPJOIN && LA101_2 <= KW_MINUS)||(LA101_2 >= KW_MSCK && LA101_2 <= KW_NOSCAN)||(LA101_2 >= KW_NO_DROP && LA101_2 <= KW_OFFLINE)||LA101_2==KW_OPTION||(LA101_2 >= KW_ORCFILE && LA101_2 <= KW_OUTPUTFORMAT)||(LA101_2 >= KW_OVERWRITE && LA101_2 <= KW_PARQUETFILE)||(LA101_2 >= KW_PARTITION && LA101_2 <= KW_PLUS)||(LA101_2 >= KW_PRETTY && LA101_2 <= KW_RECORDWRITER)||(LA101_2 >= KW_REGEXP && LA101_2 <= KW_SCHEMAS)||(LA101_2 >= KW_SEMI && LA101_2 <= KW_TABLES)||(LA101_2 >= KW_TBLPROPERTIES && LA101_2 <= KW_TEXTFILE)||(LA101_2 >= KW_TIMESTAMP && LA101_2 <= KW_TRANSACTIONS)||(LA101_2 >= KW_TRIGGER && LA101_2 <= KW_UNARCHIVE)||(LA101_2 >= KW_UNDO && LA101_2 <= KW_UNIONTYPE)||(LA101_2 >= KW_UNLOCK && LA101_2 <= KW_VALUE_TYPE)||LA101_2==KW_VIEW||LA101_2==KW_WHILE||LA101_2==KW_WITH) ) {
							alt101=1;
						}
					}
					switch (alt101) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1311:26: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// D:\\temp\\antlr\\HiveParser.g:1311:26: ( KW_FROM | KW_IN )
							int alt100=2;
							int LA100_0 = input.LA(1);
							if ( (LA100_0==KW_FROM) ) {
								alt100=1;
							}
							else if ( (LA100_0==KW_IN) ) {
								alt100=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 100, 0, input);
								throw nvae;
							}

							switch (alt100) {
								case 1 :
									// D:\\temp\\antlr\\HiveParser.g:1311:27: KW_FROM
									{
									KW_FROM374=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6560);  
									stream_KW_FROM.add(KW_FROM374);

									}
									break;
								case 2 :
									// D:\\temp\\antlr\\HiveParser.g:1311:35: KW_IN
									{
									KW_IN375=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6562);  
									stream_KW_IN.add(KW_IN375);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement6567);
							db_name=identifier();
							state._fsp--;

							stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1311:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt102=3;
					int LA102_0 = input.LA(1);
					if ( (LA102_0==KW_LIKE) ) {
						int LA102_1 = input.LA(2);
						if ( ((LA102_1 >= Identifier && LA102_1 <= KW_ANALYZE)||(LA102_1 >= KW_ARCHIVE && LA102_1 <= KW_CASCADE)||LA102_1==KW_CHANGE||(LA102_1 >= KW_CLUSTER && LA102_1 <= KW_COLLECTION)||(LA102_1 >= KW_COLUMNS && LA102_1 <= KW_CREATE)||LA102_1==KW_CUBE||(LA102_1 >= KW_CURSOR && LA102_1 <= KW_DATA)||(LA102_1 >= KW_DATABASES && LA102_1 <= KW_DISABLE)||(LA102_1 >= KW_DISTRIBUTE && LA102_1 <= KW_ELEM_TYPE)||LA102_1==KW_ENABLE||LA102_1==KW_ESCAPED||(LA102_1 >= KW_EXCLUSIVE && LA102_1 <= KW_EXPORT)||(LA102_1 >= KW_EXTERNAL && LA102_1 <= KW_FLOAT)||(LA102_1 >= KW_FOR && LA102_1 <= KW_FORMATTED)||LA102_1==KW_FULL||(LA102_1 >= KW_FUNCTIONS && LA102_1 <= KW_GROUPING)||(LA102_1 >= KW_HOLD_DDLTIME && LA102_1 <= KW_IDXPROPERTIES)||(LA102_1 >= KW_IGNORE && LA102_1 <= KW_JAR)||(LA102_1 >= KW_KEYS && LA102_1 <= KW_LEFT)||(LA102_1 >= KW_LIKE && LA102_1 <= KW_LONG)||(LA102_1 >= KW_MAPJOIN && LA102_1 <= KW_MINUS)||(LA102_1 >= KW_MSCK && LA102_1 <= KW_NOSCAN)||(LA102_1 >= KW_NO_DROP && LA102_1 <= KW_OFFLINE)||LA102_1==KW_OPTION||(LA102_1 >= KW_ORCFILE && LA102_1 <= KW_OUTPUTFORMAT)||(LA102_1 >= KW_OVERWRITE && LA102_1 <= KW_PARQUETFILE)||(LA102_1 >= KW_PARTITION && LA102_1 <= KW_PLUS)||(LA102_1 >= KW_PRETTY && LA102_1 <= KW_RECORDWRITER)||(LA102_1 >= KW_REGEXP && LA102_1 <= KW_SCHEMAS)||(LA102_1 >= KW_SEMI && LA102_1 <= KW_TABLES)||(LA102_1 >= KW_TBLPROPERTIES && LA102_1 <= KW_TEXTFILE)||(LA102_1 >= KW_TIMESTAMP && LA102_1 <= KW_TRANSACTIONS)||(LA102_1 >= KW_TRIGGER && LA102_1 <= KW_UNARCHIVE)||(LA102_1 >= KW_UNDO && LA102_1 <= KW_UNIONTYPE)||(LA102_1 >= KW_UNLOCK && LA102_1 <= KW_VALUE_TYPE)||LA102_1==KW_VIEW||LA102_1==KW_WHILE||LA102_1==KW_WITH||LA102_1==StringLiteral) ) {
							alt102=1;
						}
						else if ( (LA102_1==EOF) ) {
							alt102=2;
						}
					}
					else if ( ((LA102_0 >= Identifier && LA102_0 <= KW_ANALYZE)||(LA102_0 >= KW_ARCHIVE && LA102_0 <= KW_CASCADE)||LA102_0==KW_CHANGE||(LA102_0 >= KW_CLUSTER && LA102_0 <= KW_COLLECTION)||(LA102_0 >= KW_COLUMNS && LA102_0 <= KW_CREATE)||LA102_0==KW_CUBE||(LA102_0 >= KW_CURSOR && LA102_0 <= KW_DATA)||(LA102_0 >= KW_DATABASES && LA102_0 <= KW_DISABLE)||(LA102_0 >= KW_DISTRIBUTE && LA102_0 <= KW_ELEM_TYPE)||LA102_0==KW_ENABLE||LA102_0==KW_ESCAPED||(LA102_0 >= KW_EXCLUSIVE && LA102_0 <= KW_EXPORT)||(LA102_0 >= KW_EXTERNAL && LA102_0 <= KW_FLOAT)||(LA102_0 >= KW_FOR && LA102_0 <= KW_FORMATTED)||LA102_0==KW_FULL||(LA102_0 >= KW_FUNCTIONS && LA102_0 <= KW_GROUPING)||(LA102_0 >= KW_HOLD_DDLTIME && LA102_0 <= KW_IDXPROPERTIES)||(LA102_0 >= KW_IGNORE && LA102_0 <= KW_JAR)||(LA102_0 >= KW_KEYS && LA102_0 <= KW_LEFT)||(LA102_0 >= KW_LIMIT && LA102_0 <= KW_LONG)||(LA102_0 >= KW_MAPJOIN && LA102_0 <= KW_MINUS)||(LA102_0 >= KW_MSCK && LA102_0 <= KW_NOSCAN)||(LA102_0 >= KW_NO_DROP && LA102_0 <= KW_OFFLINE)||LA102_0==KW_OPTION||(LA102_0 >= KW_ORCFILE && LA102_0 <= KW_OUTPUTFORMAT)||(LA102_0 >= KW_OVERWRITE && LA102_0 <= KW_PARQUETFILE)||(LA102_0 >= KW_PARTITION && LA102_0 <= KW_PLUS)||(LA102_0 >= KW_PRETTY && LA102_0 <= KW_RECORDWRITER)||(LA102_0 >= KW_REGEXP && LA102_0 <= KW_SCHEMAS)||(LA102_0 >= KW_SEMI && LA102_0 <= KW_TABLES)||(LA102_0 >= KW_TBLPROPERTIES && LA102_0 <= KW_TEXTFILE)||(LA102_0 >= KW_TIMESTAMP && LA102_0 <= KW_TRANSACTIONS)||(LA102_0 >= KW_TRIGGER && LA102_0 <= KW_UNARCHIVE)||(LA102_0 >= KW_UNDO && LA102_0 <= KW_UNIONTYPE)||(LA102_0 >= KW_UNLOCK && LA102_0 <= KW_VALUE_TYPE)||LA102_0==KW_VIEW||LA102_0==KW_WHILE||LA102_0==KW_WITH||LA102_0==StringLiteral) ) {
						alt102=2;
					}
					switch (alt102) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1311:64: KW_LIKE showStmtIdentifier
							{
							KW_LIKE376=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement6572);  
							stream_KW_LIKE.add(KW_LIKE376);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6574);
							showStmtIdentifier377=showStmtIdentifier();
							state._fsp--;

							stream_showStmtIdentifier.add(showStmtIdentifier377.getTree());
							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1311:91: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6576);
							showStmtIdentifier378=showStmtIdentifier();
							state._fsp--;

							stream_showStmtIdentifier.add(showStmtIdentifier378.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name
					// token labels: 
					// rule labels: retval, db_name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1311:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1311:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:1311:133: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// D:\\temp\\antlr\\HiveParser.g:1311:154: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1312:7: KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= identifier )?
					{
					KW_SHOW379=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6604);  
					stream_KW_SHOW.add(KW_SHOW379);

					KW_COLUMNS380=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement6606);  
					stream_KW_COLUMNS.add(KW_COLUMNS380);

					// D:\\temp\\antlr\\HiveParser.g:1312:26: ( KW_FROM | KW_IN )
					int alt103=2;
					int LA103_0 = input.LA(1);
					if ( (LA103_0==KW_FROM) ) {
						alt103=1;
					}
					else if ( (LA103_0==KW_IN) ) {
						alt103=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 103, 0, input);
						throw nvae;
					}

					switch (alt103) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1312:27: KW_FROM
							{
							KW_FROM381=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6609);  
							stream_KW_FROM.add(KW_FROM381);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1312:35: KW_IN
							{
							KW_IN382=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6611);  
							stream_KW_IN.add(KW_IN382);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_showStatement6616);
					tabname=tableName();
					state._fsp--;

					stream_tableName.add(tabname.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1312:60: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt105=2;
					int LA105_0 = input.LA(1);
					if ( (LA105_0==KW_FROM||LA105_0==KW_IN) ) {
						alt105=1;
					}
					switch (alt105) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1312:61: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// D:\\temp\\antlr\\HiveParser.g:1312:61: ( KW_FROM | KW_IN )
							int alt104=2;
							int LA104_0 = input.LA(1);
							if ( (LA104_0==KW_FROM) ) {
								alt104=1;
							}
							else if ( (LA104_0==KW_IN) ) {
								alt104=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 104, 0, input);
								throw nvae;
							}

							switch (alt104) {
								case 1 :
									// D:\\temp\\antlr\\HiveParser.g:1312:62: KW_FROM
									{
									KW_FROM383=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6620);  
									stream_KW_FROM.add(KW_FROM383);

									}
									break;
								case 2 :
									// D:\\temp\\antlr\\HiveParser.g:1312:70: KW_IN
									{
									KW_IN384=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6622);  
									stream_KW_IN.add(KW_IN384);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement6627);
							db_name=identifier();
							state._fsp--;

							stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tabname, db_name
					// token labels: 
					// rule labels: retval, db_name, tabname
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_tabname=new RewriteRuleSubtreeStream(adaptor,"rule tabname",tabname!=null?tabname.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1313:5: -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname)
					{
						// D:\\temp\\antlr\\HiveParser.g:1313:8: ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:1313:27: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						adaptor.addChild(root_1, stream_tabname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:1314:7: KW_SHOW KW_FUNCTIONS ( showFunctionIdentifier )?
					{
					KW_SHOW385=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6655);  
					stream_KW_SHOW.add(KW_SHOW385);

					KW_FUNCTIONS386=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement6657);  
					stream_KW_FUNCTIONS.add(KW_FUNCTIONS386);

					// D:\\temp\\antlr\\HiveParser.g:1314:28: ( showFunctionIdentifier )?
					int alt106=2;
					int LA106_0 = input.LA(1);
					if ( ((LA106_0 >= Identifier && LA106_0 <= KW_ANALYZE)||(LA106_0 >= KW_ARCHIVE && LA106_0 <= KW_CASCADE)||LA106_0==KW_CHANGE||(LA106_0 >= KW_CLUSTER && LA106_0 <= KW_COLLECTION)||(LA106_0 >= KW_COLUMNS && LA106_0 <= KW_CREATE)||LA106_0==KW_CUBE||(LA106_0 >= KW_CURSOR && LA106_0 <= KW_DATA)||(LA106_0 >= KW_DATABASES && LA106_0 <= KW_DISABLE)||(LA106_0 >= KW_DISTRIBUTE && LA106_0 <= KW_ELEM_TYPE)||LA106_0==KW_ENABLE||LA106_0==KW_ESCAPED||(LA106_0 >= KW_EXCLUSIVE && LA106_0 <= KW_EXPORT)||(LA106_0 >= KW_EXTERNAL && LA106_0 <= KW_FLOAT)||(LA106_0 >= KW_FOR && LA106_0 <= KW_FORMATTED)||LA106_0==KW_FULL||(LA106_0 >= KW_FUNCTIONS && LA106_0 <= KW_GROUPING)||(LA106_0 >= KW_HOLD_DDLTIME && LA106_0 <= KW_IDXPROPERTIES)||(LA106_0 >= KW_IGNORE && LA106_0 <= KW_JAR)||(LA106_0 >= KW_KEYS && LA106_0 <= KW_LEFT)||(LA106_0 >= KW_LIKE && LA106_0 <= KW_LONG)||(LA106_0 >= KW_MAPJOIN && LA106_0 <= KW_MINUS)||(LA106_0 >= KW_MSCK && LA106_0 <= KW_NOSCAN)||(LA106_0 >= KW_NO_DROP && LA106_0 <= KW_OFFLINE)||LA106_0==KW_OPTION||(LA106_0 >= KW_ORCFILE && LA106_0 <= KW_OUTPUTFORMAT)||(LA106_0 >= KW_OVERWRITE && LA106_0 <= KW_PARQUETFILE)||(LA106_0 >= KW_PARTITION && LA106_0 <= KW_PLUS)||(LA106_0 >= KW_PRETTY && LA106_0 <= KW_RECORDWRITER)||(LA106_0 >= KW_REGEXP && LA106_0 <= KW_SCHEMAS)||(LA106_0 >= KW_SEMI && LA106_0 <= KW_TABLES)||(LA106_0 >= KW_TBLPROPERTIES && LA106_0 <= KW_TEXTFILE)||(LA106_0 >= KW_TIMESTAMP && LA106_0 <= KW_TRANSACTIONS)||(LA106_0 >= KW_TRIGGER && LA106_0 <= KW_UNARCHIVE)||(LA106_0 >= KW_UNDO && LA106_0 <= KW_UNIONTYPE)||(LA106_0 >= KW_UNLOCK && LA106_0 <= KW_VALUE_TYPE)||LA106_0==KW_VIEW||LA106_0==KW_WHILE||LA106_0==KW_WITH||LA106_0==StringLiteral) ) {
						alt106=1;
					}
					switch (alt106) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1314:28: showFunctionIdentifier
							{
							pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement6659);
							showFunctionIdentifier387=showFunctionIdentifier();
							state._fsp--;

							stream_showFunctionIdentifier.add(showFunctionIdentifier387.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showFunctionIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1314:53: -> ^( TOK_SHOWFUNCTIONS ( showFunctionIdentifier )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1314:56: ^( TOK_SHOWFUNCTIONS ( showFunctionIdentifier )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:1314:76: ( showFunctionIdentifier )?
						if ( stream_showFunctionIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showFunctionIdentifier.nextTree());
						}
						stream_showFunctionIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:1315:7: KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )?
					{
					KW_SHOW388=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6678);  
					stream_KW_SHOW.add(KW_SHOW388);

					KW_PARTITIONS389=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement6680);  
					stream_KW_PARTITIONS.add(KW_PARTITIONS389);

					pushFollow(FOLLOW_tableName_in_showStatement6684);
					tabName=tableName();
					state._fsp--;

					stream_tableName.add(tabName.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1315:47: ( partitionSpec )?
					int alt107=2;
					int LA107_0 = input.LA(1);
					if ( (LA107_0==KW_PARTITION) ) {
						alt107=1;
					}
					switch (alt107) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1315:47: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement6686);
							partitionSpec390=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec390.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: partitionSpec, tabName
					// token labels: 
					// rule labels: retval, tabName
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1315:62: -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1315:65: ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);
						adaptor.addChild(root_1, stream_tabName.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1315:95: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:1316:7: KW_SHOW KW_CREATE KW_TABLE tabName= tableName
					{
					KW_SHOW391=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6708);  
					stream_KW_SHOW.add(KW_SHOW391);

					KW_CREATE392=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement6710);  
					stream_KW_CREATE.add(KW_CREATE392);

					KW_TABLE393=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement6712);  
					stream_KW_TABLE.add(KW_TABLE393);

					pushFollow(FOLLOW_tableName_in_showStatement6716);
					tabName=tableName();
					state._fsp--;

					stream_tableName.add(tabName.getTree());
					// AST REWRITE
					// elements: tabName
					// token labels: 
					// rule labels: retval, tabName
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1316:52: -> ^( TOK_SHOW_CREATETABLE $tabName)
					{
						// D:\\temp\\antlr\\HiveParser.g:1316:55: ^( TOK_SHOW_CREATETABLE $tabName)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE"), root_1);
						adaptor.addChild(root_1, stream_tabName.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:1317:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
					{
					KW_SHOW394=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6733);  
					stream_KW_SHOW.add(KW_SHOW394);

					KW_TABLE395=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement6735);  
					stream_KW_TABLE.add(KW_TABLE395);

					KW_EXTENDED396=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement6737);  
					stream_KW_EXTENDED.add(KW_EXTENDED396);

					// D:\\temp\\antlr\\HiveParser.g:1317:36: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt109=2;
					int LA109_0 = input.LA(1);
					if ( (LA109_0==KW_FROM||LA109_0==KW_IN) ) {
						alt109=1;
					}
					switch (alt109) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1317:37: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// D:\\temp\\antlr\\HiveParser.g:1317:37: ( KW_FROM | KW_IN )
							int alt108=2;
							int LA108_0 = input.LA(1);
							if ( (LA108_0==KW_FROM) ) {
								alt108=1;
							}
							else if ( (LA108_0==KW_IN) ) {
								alt108=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 108, 0, input);
								throw nvae;
							}

							switch (alt108) {
								case 1 :
									// D:\\temp\\antlr\\HiveParser.g:1317:38: KW_FROM
									{
									KW_FROM397=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6741);  
									stream_KW_FROM.add(KW_FROM397);

									}
									break;
								case 2 :
									// D:\\temp\\antlr\\HiveParser.g:1317:46: KW_IN
									{
									KW_IN398=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6743);  
									stream_KW_IN.add(KW_IN398);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement6748);
							db_name=identifier();
							state._fsp--;

							stream_identifier.add(db_name.getTree());
							}
							break;

					}

					KW_LIKE399=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement6752);  
					stream_KW_LIKE.add(KW_LIKE399);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6754);
					showStmtIdentifier400=showStmtIdentifier();
					state._fsp--;

					stream_showStmtIdentifier.add(showStmtIdentifier400.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1317:101: ( partitionSpec )?
					int alt110=2;
					int LA110_0 = input.LA(1);
					if ( (LA110_0==KW_PARTITION) ) {
						alt110=1;
					}
					switch (alt110) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1317:101: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement6756);
							partitionSpec401=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec401.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: partitionSpec, db_name, showStmtIdentifier
					// token labels: 
					// rule labels: retval, db_name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1318:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1318:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1318:51: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// D:\\temp\\antlr\\HiveParser.g:1318:60: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 8 :
					// D:\\temp\\antlr\\HiveParser.g:1319:7: KW_SHOW KW_TBLPROPERTIES tblName= identifier ( LPAREN prptyName= StringLiteral RPAREN )?
					{
					KW_SHOW402=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6784);  
					stream_KW_SHOW.add(KW_SHOW402);

					KW_TBLPROPERTIES403=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement6786);  
					stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES403);

					pushFollow(FOLLOW_identifier_in_showStatement6790);
					tblName=identifier();
					state._fsp--;

					stream_identifier.add(tblName.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1319:51: ( LPAREN prptyName= StringLiteral RPAREN )?
					int alt111=2;
					int LA111_0 = input.LA(1);
					if ( (LA111_0==LPAREN) ) {
						alt111=1;
					}
					switch (alt111) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1319:52: LPAREN prptyName= StringLiteral RPAREN
							{
							LPAREN404=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_showStatement6793);  
							stream_LPAREN.add(LPAREN404);

							prptyName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement6797);  
							stream_StringLiteral.add(prptyName);

							RPAREN405=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_showStatement6799);  
							stream_RPAREN.add(RPAREN405);

							}
							break;

					}

					// AST REWRITE
					// elements: tblName, prptyName
					// token labels: prptyName
					// rule labels: retval, tblName
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_tblName=new RewriteRuleSubtreeStream(adaptor,"rule tblName",tblName!=null?tblName.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1319:92: -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1319:95: ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tblName.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1319:130: ( $prptyName)?
						if ( stream_prptyName.hasNext() ) {
							adaptor.addChild(root_1, stream_prptyName.nextNode());
						}
						stream_prptyName.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 9 :
					// D:\\temp\\antlr\\HiveParser.g:1320:7: KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
					{
					KW_SHOW406=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6822);  
					stream_KW_SHOW.add(KW_SHOW406);

					KW_LOCKS407=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement6824);  
					stream_KW_LOCKS.add(KW_LOCKS407);

					// D:\\temp\\antlr\\HiveParser.g:1320:24: (parttype= partTypeExpr )?
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( ((LA112_0 >= Identifier && LA112_0 <= KW_ANALYZE)||(LA112_0 >= KW_ARCHIVE && LA112_0 <= KW_CASCADE)||LA112_0==KW_CHANGE||(LA112_0 >= KW_CLUSTER && LA112_0 <= KW_COLLECTION)||(LA112_0 >= KW_COLUMNS && LA112_0 <= KW_CREATE)||LA112_0==KW_CUBE||(LA112_0 >= KW_CURSOR && LA112_0 <= KW_DATA)||(LA112_0 >= KW_DATABASES && LA112_0 <= KW_DISABLE)||(LA112_0 >= KW_DISTRIBUTE && LA112_0 <= KW_ELEM_TYPE)||LA112_0==KW_ENABLE||LA112_0==KW_ESCAPED||(LA112_0 >= KW_EXCLUSIVE && LA112_0 <= KW_EXPORT)||(LA112_0 >= KW_EXTERNAL && LA112_0 <= KW_FLOAT)||(LA112_0 >= KW_FOR && LA112_0 <= KW_FORMATTED)||LA112_0==KW_FULL||(LA112_0 >= KW_FUNCTIONS && LA112_0 <= KW_GROUPING)||(LA112_0 >= KW_HOLD_DDLTIME && LA112_0 <= KW_IDXPROPERTIES)||(LA112_0 >= KW_IGNORE && LA112_0 <= KW_JAR)||(LA112_0 >= KW_KEYS && LA112_0 <= KW_LEFT)||(LA112_0 >= KW_LIKE && LA112_0 <= KW_LONG)||(LA112_0 >= KW_MAPJOIN && LA112_0 <= KW_MINUS)||(LA112_0 >= KW_MSCK && LA112_0 <= KW_NOSCAN)||(LA112_0 >= KW_NO_DROP && LA112_0 <= KW_OFFLINE)||LA112_0==KW_OPTION||(LA112_0 >= KW_ORCFILE && LA112_0 <= KW_OUTPUTFORMAT)||(LA112_0 >= KW_OVERWRITE && LA112_0 <= KW_PARQUETFILE)||(LA112_0 >= KW_PARTITION && LA112_0 <= KW_PLUS)||(LA112_0 >= KW_PRETTY && LA112_0 <= KW_RECORDWRITER)||(LA112_0 >= KW_REGEXP && LA112_0 <= KW_SCHEMAS)||(LA112_0 >= KW_SEMI && LA112_0 <= KW_TABLES)||(LA112_0 >= KW_TBLPROPERTIES && LA112_0 <= KW_TEXTFILE)||(LA112_0 >= KW_TIMESTAMP && LA112_0 <= KW_TRANSACTIONS)||(LA112_0 >= KW_TRIGGER && LA112_0 <= KW_UNARCHIVE)||(LA112_0 >= KW_UNDO && LA112_0 <= KW_UNIONTYPE)||(LA112_0 >= KW_UNLOCK && LA112_0 <= KW_VALUE_TYPE)||LA112_0==KW_VIEW||LA112_0==KW_WHILE||LA112_0==KW_WITH) ) {
						alt112=1;
					}
					switch (alt112) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1320:25: parttype= partTypeExpr
							{
							pushFollow(FOLLOW_partTypeExpr_in_showStatement6829);
							parttype=partTypeExpr();
							state._fsp--;

							stream_partTypeExpr.add(parttype.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1320:49: (isExtended= KW_EXTENDED )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==KW_EXTENDED) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1320:50: isExtended= KW_EXTENDED
							{
							isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement6836);  
							stream_KW_EXTENDED.add(isExtended);

							}
							break;

					}

					// AST REWRITE
					// elements: parttype, isExtended
					// token labels: isExtended
					// rule labels: retval, parttype
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1320:75: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1320:78: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:1320:95: ( $parttype)?
						if ( stream_parttype.hasNext() ) {
							adaptor.addChild(root_1, stream_parttype.nextTree());
						}
						stream_parttype.reset();

						// D:\\temp\\antlr\\HiveParser.g:1320:106: ( $isExtended)?
						if ( stream_isExtended.hasNext() ) {
							adaptor.addChild(root_1, stream_isExtended.nextNode());
						}
						stream_isExtended.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 10 :
					// D:\\temp\\antlr\\HiveParser.g:1321:7: KW_SHOW KW_LOCKS KW_DATABASE (dbName= Identifier ) (isExtended= KW_EXTENDED )?
					{
					KW_SHOW408=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6860);  
					stream_KW_SHOW.add(KW_SHOW408);

					KW_LOCKS409=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement6862);  
					stream_KW_LOCKS.add(KW_LOCKS409);

					KW_DATABASE410=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement6864);  
					stream_KW_DATABASE.add(KW_DATABASE410);

					// D:\\temp\\antlr\\HiveParser.g:1321:36: (dbName= Identifier )
					// D:\\temp\\antlr\\HiveParser.g:1321:37: dbName= Identifier
					{
					dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement6869);  
					stream_Identifier.add(dbName);

					}

					// D:\\temp\\antlr\\HiveParser.g:1321:56: (isExtended= KW_EXTENDED )?
					int alt114=2;
					int LA114_0 = input.LA(1);
					if ( (LA114_0==KW_EXTENDED) ) {
						alt114=1;
					}
					switch (alt114) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1321:57: isExtended= KW_EXTENDED
							{
							isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement6875);  
							stream_KW_EXTENDED.add(isExtended);

							}
							break;

					}

					// AST REWRITE
					// elements: isExtended, dbName
					// token labels: isExtended, dbName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
					RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1321:82: -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1321:85: ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWDBLOCKS, "TOK_SHOWDBLOCKS"), root_1);
						adaptor.addChild(root_1, stream_dbName.nextNode());
						// D:\\temp\\antlr\\HiveParser.g:1321:112: ( $isExtended)?
						if ( stream_isExtended.hasNext() ) {
							adaptor.addChild(root_1, stream_isExtended.nextNode());
						}
						stream_isExtended.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 11 :
					// D:\\temp\\antlr\\HiveParser.g:1322:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )?
					{
					KW_SHOW411=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6898);  
					stream_KW_SHOW.add(KW_SHOW411);

					// D:\\temp\\antlr\\HiveParser.g:1322:15: (showOptions= KW_FORMATTED )?
					int alt115=2;
					int LA115_0 = input.LA(1);
					if ( (LA115_0==KW_FORMATTED) ) {
						alt115=1;
					}
					switch (alt115) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1322:16: showOptions= KW_FORMATTED
							{
							showOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement6903);  
							stream_KW_FORMATTED.add(showOptions);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1322:43: ( KW_INDEX | KW_INDEXES )
					int alt116=2;
					int LA116_0 = input.LA(1);
					if ( (LA116_0==KW_INDEX) ) {
						alt116=1;
					}
					else if ( (LA116_0==KW_INDEXES) ) {
						alt116=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 116, 0, input);
						throw nvae;
					}

					switch (alt116) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1322:44: KW_INDEX
							{
							KW_INDEX412=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement6908);  
							stream_KW_INDEX.add(KW_INDEX412);

							}
							break;
						case 2 :
							// D:\\temp\\antlr\\HiveParser.g:1322:53: KW_INDEXES
							{
							KW_INDEXES413=(Token)match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement6910);  
							stream_KW_INDEXES.add(KW_INDEXES413);

							}
							break;

					}

					KW_ON414=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showStatement6913);  
					stream_KW_ON.add(KW_ON414);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6915);
					showStmtIdentifier415=showStmtIdentifier();
					state._fsp--;

					stream_showStmtIdentifier.add(showStmtIdentifier415.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1322:90: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt118=2;
					int LA118_0 = input.LA(1);
					if ( (LA118_0==KW_FROM||LA118_0==KW_IN) ) {
						alt118=1;
					}
					switch (alt118) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1322:91: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// D:\\temp\\antlr\\HiveParser.g:1322:91: ( KW_FROM | KW_IN )
							int alt117=2;
							int LA117_0 = input.LA(1);
							if ( (LA117_0==KW_FROM) ) {
								alt117=1;
							}
							else if ( (LA117_0==KW_IN) ) {
								alt117=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 117, 0, input);
								throw nvae;
							}

							switch (alt117) {
								case 1 :
									// D:\\temp\\antlr\\HiveParser.g:1322:92: KW_FROM
									{
									KW_FROM416=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6919);  
									stream_KW_FROM.add(KW_FROM416);

									}
									break;
								case 2 :
									// D:\\temp\\antlr\\HiveParser.g:1322:100: KW_IN
									{
									KW_IN417=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6921);  
									stream_KW_IN.add(KW_IN417);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement6926);
							db_name=identifier();
							state._fsp--;

							stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, showOptions, db_name
					// token labels: showOptions
					// rule labels: retval, db_name
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1323:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1323:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1323:46: ( $showOptions)?
						if ( stream_showOptions.hasNext() ) {
							adaptor.addChild(root_1, stream_showOptions.nextNode());
						}
						stream_showOptions.reset();

						// D:\\temp\\antlr\\HiveParser.g:1323:60: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 12 :
					// D:\\temp\\antlr\\HiveParser.g:1324:7: KW_SHOW KW_COMPACTIONS
					{
					KW_SHOW418=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6956);  
					stream_KW_SHOW.add(KW_SHOW418);

					KW_COMPACTIONS419=(Token)match(input,KW_COMPACTIONS,FOLLOW_KW_COMPACTIONS_in_showStatement6958);  
					stream_KW_COMPACTIONS.add(KW_COMPACTIONS419);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1324:30: -> ^( TOK_SHOW_COMPACTIONS )
					{
						// D:\\temp\\antlr\\HiveParser.g:1324:33: ^( TOK_SHOW_COMPACTIONS )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 13 :
					// D:\\temp\\antlr\\HiveParser.g:1325:7: KW_SHOW KW_TRANSACTIONS
					{
					KW_SHOW420=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6972);  
					stream_KW_SHOW.add(KW_SHOW420);

					KW_TRANSACTIONS421=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_showStatement6974);  
					stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS421);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1325:31: -> ^( TOK_SHOW_TRANSACTIONS )
					{
						// D:\\temp\\antlr\\HiveParser.g:1325:34: ^( TOK_SHOW_TRANSACTIONS )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_TRANSACTIONS, "TOK_SHOW_TRANSACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStatement"


	public static class lockStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockStatement"
	// D:\\temp\\antlr\\HiveParser.g:1328:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
	public final HiveParser.lockStatement_return lockStatement() throws RecognitionException {
		HiveParser.lockStatement_return retval = new HiveParser.lockStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_LOCK422=null;
		Token KW_TABLE423=null;
		ParserRuleReturnScope tableName424 =null;
		ParserRuleReturnScope partitionSpec425 =null;
		ParserRuleReturnScope lockMode426 =null;

		CommonTree KW_LOCK422_tree=null;
		CommonTree KW_TABLE423_tree=null;
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");

		 pushMsg("lock statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1331:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1331:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
			{
			KW_LOCK422=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement7007);  
			stream_KW_LOCK.add(KW_LOCK422);

			KW_TABLE423=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement7009);  
			stream_KW_TABLE.add(KW_TABLE423);

			pushFollow(FOLLOW_tableName_in_lockStatement7011);
			tableName424=tableName();
			state._fsp--;

			stream_tableName.add(tableName424.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1331:34: ( partitionSpec )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==KW_PARTITION) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1331:34: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_lockStatement7013);
					partitionSpec425=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec425.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_lockMode_in_lockStatement7016);
			lockMode426=lockMode();
			state._fsp--;

			stream_lockMode.add(lockMode426.getTree());
			// AST REWRITE
			// elements: lockMode, partitionSpec, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1331:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1331:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1331:96: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockStatement"


	public static class lockDatabase_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockDatabase"
	// D:\\temp\\antlr\\HiveParser.g:1334:1: lockDatabase : KW_LOCK KW_DATABASE (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) ;
	public final HiveParser.lockDatabase_return lockDatabase() throws RecognitionException {
		HiveParser.lockDatabase_return retval = new HiveParser.lockDatabase_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token dbName=null;
		Token KW_LOCK427=null;
		Token KW_DATABASE428=null;
		ParserRuleReturnScope lockMode429 =null;

		CommonTree dbName_tree=null;
		CommonTree KW_LOCK427_tree=null;
		CommonTree KW_DATABASE428_tree=null;
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");

		 pushMsg("lock database statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1337:5: ( KW_LOCK KW_DATABASE (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) )
			// D:\\temp\\antlr\\HiveParser.g:1337:7: KW_LOCK KW_DATABASE (dbName= Identifier ) lockMode
			{
			KW_LOCK427=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockDatabase7056);  
			stream_KW_LOCK.add(KW_LOCK427);

			KW_DATABASE428=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_lockDatabase7058);  
			stream_KW_DATABASE.add(KW_DATABASE428);

			// D:\\temp\\antlr\\HiveParser.g:1337:27: (dbName= Identifier )
			// D:\\temp\\antlr\\HiveParser.g:1337:28: dbName= Identifier
			{
			dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_lockDatabase7063);  
			stream_Identifier.add(dbName);

			}

			pushFollow(FOLLOW_lockMode_in_lockDatabase7066);
			lockMode429=lockMode();
			state._fsp--;

			stream_lockMode.add(lockMode429.getTree());
			// AST REWRITE
			// elements: lockMode, dbName
			// token labels: dbName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1337:56: -> ^( TOK_LOCKDB $dbName lockMode )
			{
				// D:\\temp\\antlr\\HiveParser.g:1337:59: ^( TOK_LOCKDB $dbName lockMode )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOCKDB, "TOK_LOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextNode());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockDatabase"


	public static class lockMode_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "lockMode"
	// D:\\temp\\antlr\\HiveParser.g:1340:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
	public final HiveParser.lockMode_return lockMode() throws RecognitionException {
		HiveParser.lockMode_return retval = new HiveParser.lockMode_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set430=null;

		CommonTree set430_tree=null;

		 pushMsg("lock mode", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1343:5: ( KW_SHARED | KW_EXCLUSIVE )
			// D:\\temp\\antlr\\HiveParser.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set430=input.LT(1);
			if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
				input.consume();
				adaptor.addChild(root_0, (CommonTree)adaptor.create(set430));
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockMode"


	public static class unlockStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unlockStatement"
	// D:\\temp\\antlr\\HiveParser.g:1346:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
	public final HiveParser.unlockStatement_return unlockStatement() throws RecognitionException {
		HiveParser.unlockStatement_return retval = new HiveParser.unlockStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNLOCK431=null;
		Token KW_TABLE432=null;
		ParserRuleReturnScope tableName433 =null;
		ParserRuleReturnScope partitionSpec434 =null;

		CommonTree KW_UNLOCK431_tree=null;
		CommonTree KW_TABLE432_tree=null;
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("unlock statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1349:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1349:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
			{
			KW_UNLOCK431=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement7135);  
			stream_KW_UNLOCK.add(KW_UNLOCK431);

			KW_TABLE432=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement7137);  
			stream_KW_TABLE.add(KW_TABLE432);

			pushFollow(FOLLOW_tableName_in_unlockStatement7139);
			tableName433=tableName();
			state._fsp--;

			stream_tableName.add(tableName433.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1349:36: ( partitionSpec )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==KW_PARTITION) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1349:36: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_unlockStatement7141);
					partitionSpec434=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec434.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1349:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1349:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1349:83: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockStatement"


	public static class unlockDatabase_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unlockDatabase"
	// D:\\temp\\antlr\\HiveParser.g:1352:1: unlockDatabase : KW_UNLOCK KW_DATABASE (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) ;
	public final HiveParser.unlockDatabase_return unlockDatabase() throws RecognitionException {
		HiveParser.unlockDatabase_return retval = new HiveParser.unlockDatabase_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token dbName=null;
		Token KW_UNLOCK435=null;
		Token KW_DATABASE436=null;

		CommonTree dbName_tree=null;
		CommonTree KW_UNLOCK435_tree=null;
		CommonTree KW_DATABASE436_tree=null;
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

		 pushMsg("unlock database statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1355:5: ( KW_UNLOCK KW_DATABASE (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) )
			// D:\\temp\\antlr\\HiveParser.g:1355:7: KW_UNLOCK KW_DATABASE (dbName= Identifier )
			{
			KW_UNLOCK435=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockDatabase7181);  
			stream_KW_UNLOCK.add(KW_UNLOCK435);

			KW_DATABASE436=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_unlockDatabase7183);  
			stream_KW_DATABASE.add(KW_DATABASE436);

			// D:\\temp\\antlr\\HiveParser.g:1355:29: (dbName= Identifier )
			// D:\\temp\\antlr\\HiveParser.g:1355:30: dbName= Identifier
			{
			dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_unlockDatabase7188);  
			stream_Identifier.add(dbName);

			}

			// AST REWRITE
			// elements: dbName
			// token labels: dbName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1355:49: -> ^( TOK_UNLOCKDB $dbName)
			{
				// D:\\temp\\antlr\\HiveParser.g:1355:52: ^( TOK_UNLOCKDB $dbName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNLOCKDB, "TOK_UNLOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockDatabase"


	public static class createRoleStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createRoleStatement"
	// D:\\temp\\antlr\\HiveParser.g:1358:1: createRoleStatement : KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) ;
	public final HiveParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
		HiveParser.createRoleStatement_return retval = new HiveParser.createRoleStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE437=null;
		Token KW_ROLE438=null;
		ParserRuleReturnScope roleName =null;

		CommonTree KW_CREATE437_tree=null;
		CommonTree KW_ROLE438_tree=null;
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("create role", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1361:5: ( KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) )
			// D:\\temp\\antlr\\HiveParser.g:1361:7: KW_CREATE KW_ROLE roleName= identifier
			{
			KW_CREATE437=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement7225);  
			stream_KW_CREATE.add(KW_CREATE437);

			KW_ROLE438=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_createRoleStatement7227);  
			stream_KW_ROLE.add(KW_ROLE438);

			pushFollow(FOLLOW_identifier_in_createRoleStatement7231);
			roleName=identifier();
			state._fsp--;

			stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: retval, roleName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1362:5: -> ^( TOK_CREATEROLE $roleName)
			{
				// D:\\temp\\antlr\\HiveParser.g:1362:8: ^( TOK_CREATEROLE $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createRoleStatement"


	public static class dropRoleStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropRoleStatement"
	// D:\\temp\\antlr\\HiveParser.g:1365:1: dropRoleStatement : KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) ;
	public final HiveParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
		HiveParser.dropRoleStatement_return retval = new HiveParser.dropRoleStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP439=null;
		Token KW_ROLE440=null;
		ParserRuleReturnScope roleName =null;

		CommonTree KW_DROP439_tree=null;
		CommonTree KW_ROLE440_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("drop role", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1368:5: ( KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) )
			// D:\\temp\\antlr\\HiveParser.g:1368:7: KW_DROP KW_ROLE roleName= identifier
			{
			KW_DROP439=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement7271);  
			stream_KW_DROP.add(KW_DROP439);

			KW_ROLE440=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_dropRoleStatement7273);  
			stream_KW_ROLE.add(KW_ROLE440);

			pushFollow(FOLLOW_identifier_in_dropRoleStatement7277);
			roleName=identifier();
			state._fsp--;

			stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: retval, roleName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1369:5: -> ^( TOK_DROPROLE $roleName)
			{
				// D:\\temp\\antlr\\HiveParser.g:1369:8: ^( TOK_DROPROLE $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropRoleStatement"


	public static class grantPrivileges_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantPrivileges"
	// D:\\temp\\antlr\\HiveParser.g:1372:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) ;
	public final HiveParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
		HiveParser.grantPrivileges_return retval = new HiveParser.grantPrivileges_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT441=null;
		Token KW_TO443=null;
		ParserRuleReturnScope privList =null;
		ParserRuleReturnScope privilegeObject442 =null;
		ParserRuleReturnScope principalSpecification444 =null;
		ParserRuleReturnScope withGrantOption445 =null;

		CommonTree KW_GRANT441_tree=null;
		CommonTree KW_TO443_tree=null;
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_withGrantOption=new RewriteRuleSubtreeStream(adaptor,"rule withGrantOption");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("grant privileges", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1375:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1375:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )?
			{
			KW_GRANT441=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges7317);  
			stream_KW_GRANT.add(KW_GRANT441);

			pushFollow(FOLLOW_privilegeList_in_grantPrivileges7321);
			privList=privilegeList();
			state._fsp--;

			stream_privilegeList.add(privList.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1376:7: ( privilegeObject )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==KW_ON) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1376:7: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_grantPrivileges7329);
					privilegeObject442=privilegeObject();
					state._fsp--;

					stream_privilegeObject.add(privilegeObject442.getTree());
					}
					break;

			}

			KW_TO443=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges7338);  
			stream_KW_TO.add(KW_TO443);

			pushFollow(FOLLOW_principalSpecification_in_grantPrivileges7340);
			principalSpecification444=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification444.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1378:7: ( withGrantOption )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==KW_WITH) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1378:7: withGrantOption
					{
					pushFollow(FOLLOW_withGrantOption_in_grantPrivileges7348);
					withGrantOption445=withGrantOption();
					state._fsp--;

					stream_withGrantOption.add(withGrantOption445.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: principalSpecification, privilegeObject, withGrantOption, privList
			// token labels: 
			// rule labels: retval, privList
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1379:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1379:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);
				adaptor.addChild(root_1, stream_privList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1379:53: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// D:\\temp\\antlr\\HiveParser.g:1379:70: ( withGrantOption )?
				if ( stream_withGrantOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withGrantOption.nextTree());
				}
				stream_withGrantOption.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantPrivileges"


	public static class revokePrivileges_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "revokePrivileges"
	// D:\\temp\\antlr\\HiveParser.g:1382:1: revokePrivileges : KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) ;
	public final HiveParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
		HiveParser.revokePrivileges_return retval = new HiveParser.revokePrivileges_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_REVOKE446=null;
		Token KW_FROM449=null;
		ParserRuleReturnScope privilegeList447 =null;
		ParserRuleReturnScope privilegeObject448 =null;
		ParserRuleReturnScope principalSpecification450 =null;

		CommonTree KW_REVOKE446_tree=null;
		CommonTree KW_FROM449_tree=null;
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("revoke privileges", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1385:5: ( KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1385:7: KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification
			{
			KW_REVOKE446=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges7397);  
			stream_KW_REVOKE.add(KW_REVOKE446);

			pushFollow(FOLLOW_privilegeList_in_revokePrivileges7399);
			privilegeList447=privilegeList();
			state._fsp--;

			stream_privilegeList.add(privilegeList447.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1385:31: ( privilegeObject )?
			int alt124=2;
			int LA124_0 = input.LA(1);
			if ( (LA124_0==KW_ON) ) {
				alt124=1;
			}
			switch (alt124) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1385:31: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_revokePrivileges7401);
					privilegeObject448=privilegeObject();
					state._fsp--;

					stream_privilegeObject.add(privilegeObject448.getTree());
					}
					break;

			}

			KW_FROM449=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges7404);  
			stream_KW_FROM.add(KW_FROM449);

			pushFollow(FOLLOW_principalSpecification_in_revokePrivileges7406);
			principalSpecification450=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification450.getTree());
			// AST REWRITE
			// elements: privilegeList, principalSpecification, privilegeObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1386:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1386:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);
				adaptor.addChild(root_1, stream_privilegeList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1386:58: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokePrivileges"


	public static class grantRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "grantRole"
	// D:\\temp\\antlr\\HiveParser.g:1389:1: grantRole : KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) ;
	public final HiveParser.grantRole_return grantRole() throws RecognitionException {
		HiveParser.grantRole_return retval = new HiveParser.grantRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_GRANT451=null;
		Token KW_ROLE452=null;
		Token COMMA454=null;
		Token KW_TO456=null;
		ParserRuleReturnScope identifier453 =null;
		ParserRuleReturnScope identifier455 =null;
		ParserRuleReturnScope principalSpecification457 =null;
		ParserRuleReturnScope withAdminOption458 =null;

		CommonTree KW_GRANT451_tree=null;
		CommonTree KW_ROLE452_tree=null;
		CommonTree COMMA454_tree=null;
		CommonTree KW_TO456_tree=null;
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_withAdminOption=new RewriteRuleSubtreeStream(adaptor,"rule withAdminOption");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("grant role", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1392:5: ( KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1392:7: KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )?
			{
			KW_GRANT451=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole7450);  
			stream_KW_GRANT.add(KW_GRANT451);

			// D:\\temp\\antlr\\HiveParser.g:1392:16: ( KW_ROLE )?
			int alt125=2;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==KW_ROLE) ) {
				int LA125_1 = input.LA(2);
				if ( ((LA125_1 >= Identifier && LA125_1 <= KW_ANALYZE)||(LA125_1 >= KW_ARCHIVE && LA125_1 <= KW_CASCADE)||LA125_1==KW_CHANGE||(LA125_1 >= KW_CLUSTER && LA125_1 <= KW_COLLECTION)||(LA125_1 >= KW_COLUMNS && LA125_1 <= KW_CREATE)||LA125_1==KW_CUBE||(LA125_1 >= KW_CURSOR && LA125_1 <= KW_DATA)||(LA125_1 >= KW_DATABASES && LA125_1 <= KW_DISABLE)||(LA125_1 >= KW_DISTRIBUTE && LA125_1 <= KW_ELEM_TYPE)||LA125_1==KW_ENABLE||LA125_1==KW_ESCAPED||(LA125_1 >= KW_EXCLUSIVE && LA125_1 <= KW_EXPORT)||(LA125_1 >= KW_EXTERNAL && LA125_1 <= KW_FLOAT)||(LA125_1 >= KW_FOR && LA125_1 <= KW_FORMATTED)||LA125_1==KW_FULL||(LA125_1 >= KW_FUNCTIONS && LA125_1 <= KW_GROUPING)||(LA125_1 >= KW_HOLD_DDLTIME && LA125_1 <= KW_IDXPROPERTIES)||(LA125_1 >= KW_IGNORE && LA125_1 <= KW_JAR)||(LA125_1 >= KW_KEYS && LA125_1 <= KW_LEFT)||(LA125_1 >= KW_LIKE && LA125_1 <= KW_LONG)||(LA125_1 >= KW_MAPJOIN && LA125_1 <= KW_MINUS)||(LA125_1 >= KW_MSCK && LA125_1 <= KW_NOSCAN)||(LA125_1 >= KW_NO_DROP && LA125_1 <= KW_OFFLINE)||LA125_1==KW_OPTION||(LA125_1 >= KW_ORCFILE && LA125_1 <= KW_OUTPUTFORMAT)||(LA125_1 >= KW_OVERWRITE && LA125_1 <= KW_PARQUETFILE)||(LA125_1 >= KW_PARTITION && LA125_1 <= KW_PLUS)||(LA125_1 >= KW_PRETTY && LA125_1 <= KW_RECORDWRITER)||(LA125_1 >= KW_REGEXP && LA125_1 <= KW_SCHEMAS)||(LA125_1 >= KW_SEMI && LA125_1 <= KW_TABLES)||(LA125_1 >= KW_TBLPROPERTIES && LA125_1 <= KW_TEXTFILE)||(LA125_1 >= KW_TIMESTAMP && LA125_1 <= KW_TINYINT)||(LA125_1 >= KW_TOUCH && LA125_1 <= KW_TRANSACTIONS)||(LA125_1 >= KW_TRIGGER && LA125_1 <= KW_UNARCHIVE)||(LA125_1 >= KW_UNDO && LA125_1 <= KW_UNIONTYPE)||(LA125_1 >= KW_UNLOCK && LA125_1 <= KW_VALUE_TYPE)||LA125_1==KW_VIEW||LA125_1==KW_WHILE||LA125_1==KW_WITH) ) {
					alt125=1;
				}
				else if ( (LA125_1==KW_TO) ) {
					int LA125_5 = input.LA(3);
					if ( (LA125_5==COMMA||LA125_5==KW_TO) ) {
						alt125=1;
					}
				}
			}
			switch (alt125) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1392:16: KW_ROLE
					{
					KW_ROLE452=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_grantRole7452);  
					stream_KW_ROLE.add(KW_ROLE452);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_grantRole7455);
			identifier453=identifier();
			state._fsp--;

			stream_identifier.add(identifier453.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1392:36: ( COMMA identifier )*
			loop126:
			while (true) {
				int alt126=2;
				int LA126_0 = input.LA(1);
				if ( (LA126_0==COMMA) ) {
					alt126=1;
				}

				switch (alt126) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1392:37: COMMA identifier
					{
					COMMA454=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole7458);  
					stream_COMMA.add(COMMA454);

					pushFollow(FOLLOW_identifier_in_grantRole7460);
					identifier455=identifier();
					state._fsp--;

					stream_identifier.add(identifier455.getTree());
					}
					break;

				default :
					break loop126;
				}
			}

			KW_TO456=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole7464);  
			stream_KW_TO.add(KW_TO456);

			pushFollow(FOLLOW_principalSpecification_in_grantRole7466);
			principalSpecification457=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification457.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1392:85: ( withAdminOption )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==KW_WITH) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1392:85: withAdminOption
					{
					pushFollow(FOLLOW_withAdminOption_in_grantRole7468);
					withAdminOption458=withAdminOption();
					state._fsp--;

					stream_withAdminOption.add(withAdminOption458.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: withAdminOption, principalSpecification, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1393:5: -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1393:8: ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1393:48: ( withAdminOption )?
				if ( stream_withAdminOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withAdminOption.nextTree());
				}
				stream_withAdminOption.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantRole"


	public static class revokeRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "revokeRole"
	// D:\\temp\\antlr\\HiveParser.g:1396:1: revokeRole : KW_REVOKE ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification ( withAdminOption )? -> ^( TOK_REVOKE_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) ;
	public final HiveParser.revokeRole_return revokeRole() throws RecognitionException {
		HiveParser.revokeRole_return retval = new HiveParser.revokeRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_REVOKE459=null;
		Token KW_ROLE460=null;
		Token COMMA462=null;
		Token KW_FROM464=null;
		ParserRuleReturnScope identifier461 =null;
		ParserRuleReturnScope identifier463 =null;
		ParserRuleReturnScope principalSpecification465 =null;
		ParserRuleReturnScope withAdminOption466 =null;

		CommonTree KW_REVOKE459_tree=null;
		CommonTree KW_ROLE460_tree=null;
		CommonTree COMMA462_tree=null;
		CommonTree KW_FROM464_tree=null;
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_withAdminOption=new RewriteRuleSubtreeStream(adaptor,"rule withAdminOption");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("revoke role", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1399:5: ( KW_REVOKE ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification ( withAdminOption )? -> ^( TOK_REVOKE_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1399:7: KW_REVOKE ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification ( withAdminOption )?
			{
			KW_REVOKE459=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole7514);  
			stream_KW_REVOKE.add(KW_REVOKE459);

			// D:\\temp\\antlr\\HiveParser.g:1399:17: ( KW_ROLE )?
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==KW_ROLE) ) {
				int LA128_1 = input.LA(2);
				if ( ((LA128_1 >= Identifier && LA128_1 <= KW_ANALYZE)||(LA128_1 >= KW_ARCHIVE && LA128_1 <= KW_CASCADE)||LA128_1==KW_CHANGE||(LA128_1 >= KW_CLUSTER && LA128_1 <= KW_COLLECTION)||(LA128_1 >= KW_COLUMNS && LA128_1 <= KW_CREATE)||LA128_1==KW_CUBE||(LA128_1 >= KW_CURSOR && LA128_1 <= KW_DATA)||(LA128_1 >= KW_DATABASES && LA128_1 <= KW_DISABLE)||(LA128_1 >= KW_DISTRIBUTE && LA128_1 <= KW_ELEM_TYPE)||LA128_1==KW_ENABLE||LA128_1==KW_ESCAPED||(LA128_1 >= KW_EXCLUSIVE && LA128_1 <= KW_EXPORT)||(LA128_1 >= KW_EXTERNAL && LA128_1 <= KW_FLOAT)||(LA128_1 >= KW_FOR && LA128_1 <= KW_FORMATTED)||LA128_1==KW_FULL||(LA128_1 >= KW_FUNCTIONS && LA128_1 <= KW_GROUPING)||(LA128_1 >= KW_HOLD_DDLTIME && LA128_1 <= KW_IDXPROPERTIES)||(LA128_1 >= KW_IGNORE && LA128_1 <= KW_JAR)||(LA128_1 >= KW_KEYS && LA128_1 <= KW_LEFT)||(LA128_1 >= KW_LIKE && LA128_1 <= KW_LONG)||(LA128_1 >= KW_MAPJOIN && LA128_1 <= KW_MINUS)||(LA128_1 >= KW_MSCK && LA128_1 <= KW_NOSCAN)||(LA128_1 >= KW_NO_DROP && LA128_1 <= KW_OFFLINE)||LA128_1==KW_OPTION||(LA128_1 >= KW_ORCFILE && LA128_1 <= KW_OUTPUTFORMAT)||(LA128_1 >= KW_OVERWRITE && LA128_1 <= KW_PARQUETFILE)||(LA128_1 >= KW_PARTITION && LA128_1 <= KW_PLUS)||(LA128_1 >= KW_PRETTY && LA128_1 <= KW_RECORDWRITER)||(LA128_1 >= KW_REGEXP && LA128_1 <= KW_SCHEMAS)||(LA128_1 >= KW_SEMI && LA128_1 <= KW_TABLES)||(LA128_1 >= KW_TBLPROPERTIES && LA128_1 <= KW_TEXTFILE)||(LA128_1 >= KW_TIMESTAMP && LA128_1 <= KW_TRANSACTIONS)||(LA128_1 >= KW_TRIGGER && LA128_1 <= KW_UNARCHIVE)||(LA128_1 >= KW_UNDO && LA128_1 <= KW_UNIONTYPE)||(LA128_1 >= KW_UNLOCK && LA128_1 <= KW_VALUE_TYPE)||LA128_1==KW_VIEW||LA128_1==KW_WHILE||LA128_1==KW_WITH) ) {
					alt128=1;
				}
			}
			switch (alt128) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1399:17: KW_ROLE
					{
					KW_ROLE460=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_revokeRole7516);  
					stream_KW_ROLE.add(KW_ROLE460);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_revokeRole7519);
			identifier461=identifier();
			state._fsp--;

			stream_identifier.add(identifier461.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1399:37: ( COMMA identifier )*
			loop129:
			while (true) {
				int alt129=2;
				int LA129_0 = input.LA(1);
				if ( (LA129_0==COMMA) ) {
					alt129=1;
				}

				switch (alt129) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1399:38: COMMA identifier
					{
					COMMA462=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole7522);  
					stream_COMMA.add(COMMA462);

					pushFollow(FOLLOW_identifier_in_revokeRole7524);
					identifier463=identifier();
					state._fsp--;

					stream_identifier.add(identifier463.getTree());
					}
					break;

				default :
					break loop129;
				}
			}

			KW_FROM464=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole7528);  
			stream_KW_FROM.add(KW_FROM464);

			pushFollow(FOLLOW_principalSpecification_in_revokeRole7530);
			principalSpecification465=principalSpecification();
			state._fsp--;

			stream_principalSpecification.add(principalSpecification465.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1399:88: ( withAdminOption )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==KW_WITH) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1399:88: withAdminOption
					{
					pushFollow(FOLLOW_withAdminOption_in_revokeRole7532);
					withAdminOption466=withAdminOption();
					state._fsp--;

					stream_withAdminOption.add(withAdminOption466.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: withAdminOption, identifier, principalSpecification
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1400:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1400:8: ^( TOK_REVOKE_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1400:49: ( withAdminOption )?
				if ( stream_withAdminOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withAdminOption.nextTree());
				}
				stream_withAdminOption.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokeRole"


	public static class showRoleGrants_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showRoleGrants"
	// D:\\temp\\antlr\\HiveParser.g:1403:1: showRoleGrants : KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
	public final HiveParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
		HiveParser.showRoleGrants_return retval = new HiveParser.showRoleGrants_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW467=null;
		Token KW_ROLE468=null;
		Token KW_GRANT469=null;
		ParserRuleReturnScope principalName470 =null;

		CommonTree KW_SHOW467_tree=null;
		CommonTree KW_ROLE468_tree=null;
		CommonTree KW_GRANT469_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		pushMsg("show role grants", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1406:5: ( KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
			// D:\\temp\\antlr\\HiveParser.g:1406:7: KW_SHOW KW_ROLE KW_GRANT principalName
			{
			KW_SHOW467=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants7578);  
			stream_KW_SHOW.add(KW_SHOW467);

			KW_ROLE468=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_showRoleGrants7580);  
			stream_KW_ROLE.add(KW_ROLE468);

			KW_GRANT469=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants7582);  
			stream_KW_GRANT.add(KW_GRANT469);

			pushFollow(FOLLOW_principalName_in_showRoleGrants7584);
			principalName470=principalName();
			state._fsp--;

			stream_principalName.add(principalName470.getTree());
			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1407:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
			{
				// D:\\temp\\antlr\\HiveParser.g:1407:8: ^( TOK_SHOW_ROLE_GRANT principalName )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT"), root_1);
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoleGrants"


	public static class showRoles_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showRoles"
	// D:\\temp\\antlr\\HiveParser.g:1411:1: showRoles : KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) ;
	public final HiveParser.showRoles_return showRoles() throws RecognitionException {
		HiveParser.showRoles_return retval = new HiveParser.showRoles_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW471=null;
		Token KW_ROLES472=null;

		CommonTree KW_SHOW471_tree=null;
		CommonTree KW_ROLES472_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");

		pushMsg("show roles", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1414:5: ( KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) )
			// D:\\temp\\antlr\\HiveParser.g:1414:7: KW_SHOW KW_ROLES
			{
			KW_SHOW471=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoles7624);  
			stream_KW_SHOW.add(KW_SHOW471);

			KW_ROLES472=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showRoles7626);  
			stream_KW_ROLES.add(KW_ROLES472);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1415:5: -> ^( TOK_SHOW_ROLES )
			{
				// D:\\temp\\antlr\\HiveParser.g:1415:8: ^( TOK_SHOW_ROLES )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_ROLES, "TOK_SHOW_ROLES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoles"


	public static class showCurrentRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showCurrentRole"
	// D:\\temp\\antlr\\HiveParser.g:1418:1: showCurrentRole : KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) ;
	public final HiveParser.showCurrentRole_return showCurrentRole() throws RecognitionException {
		HiveParser.showCurrentRole_return retval = new HiveParser.showCurrentRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW473=null;
		Token KW_CURRENT474=null;
		Token KW_ROLES475=null;

		CommonTree KW_SHOW473_tree=null;
		CommonTree KW_CURRENT474_tree=null;
		CommonTree KW_ROLES475_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_CURRENT=new RewriteRuleTokenStream(adaptor,"token KW_CURRENT");
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");

		pushMsg("show current role", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1421:5: ( KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) )
			// D:\\temp\\antlr\\HiveParser.g:1421:7: KW_SHOW KW_CURRENT KW_ROLES
			{
			KW_SHOW473=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showCurrentRole7663);  
			stream_KW_SHOW.add(KW_SHOW473);

			KW_CURRENT474=(Token)match(input,KW_CURRENT,FOLLOW_KW_CURRENT_in_showCurrentRole7665);  
			stream_KW_CURRENT.add(KW_CURRENT474);

			KW_ROLES475=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showCurrentRole7667);  
			stream_KW_ROLES.add(KW_ROLES475);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1422:5: -> ^( TOK_SHOW_SET_ROLE )
			{
				// D:\\temp\\antlr\\HiveParser.g:1422:8: ^( TOK_SHOW_SET_ROLE )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showCurrentRole"


	public static class setRole_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setRole"
	// D:\\temp\\antlr\\HiveParser.g:1425:1: setRole : KW_SET KW_ROLE roleName= identifier -> ^( TOK_SHOW_SET_ROLE $roleName) ;
	public final HiveParser.setRole_return setRole() throws RecognitionException {
		HiveParser.setRole_return retval = new HiveParser.setRole_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SET476=null;
		Token KW_ROLE477=null;
		ParserRuleReturnScope roleName =null;

		CommonTree KW_SET476_tree=null;
		CommonTree KW_ROLE477_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("set role", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1428:5: ( KW_SET KW_ROLE roleName= identifier -> ^( TOK_SHOW_SET_ROLE $roleName) )
			// D:\\temp\\antlr\\HiveParser.g:1428:7: KW_SET KW_ROLE roleName= identifier
			{
			KW_SET476=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setRole7704);  
			stream_KW_SET.add(KW_SET476);

			KW_ROLE477=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_setRole7706);  
			stream_KW_ROLE.add(KW_ROLE477);

			pushFollow(FOLLOW_identifier_in_setRole7710);
			roleName=identifier();
			state._fsp--;

			stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: retval, roleName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1429:5: -> ^( TOK_SHOW_SET_ROLE $roleName)
			{
				// D:\\temp\\antlr\\HiveParser.g:1429:8: ^( TOK_SHOW_SET_ROLE $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setRole"


	public static class showGrants_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showGrants"
	// D:\\temp\\antlr\\HiveParser.g:1432:1: showGrants : KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) ;
	public final HiveParser.showGrants_return showGrants() throws RecognitionException {
		HiveParser.showGrants_return retval = new HiveParser.showGrants_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW478=null;
		Token KW_GRANT479=null;
		Token KW_ON481=null;
		ParserRuleReturnScope principalName480 =null;
		ParserRuleReturnScope privilegeIncludeColObject482 =null;

		CommonTree KW_SHOW478_tree=null;
		CommonTree KW_GRANT479_tree=null;
		CommonTree KW_ON481_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
		RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");

		pushMsg("show grants", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1435:5: ( KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1435:7: KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )?
			{
			KW_SHOW478=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants7750);  
			stream_KW_SHOW.add(KW_SHOW478);

			KW_GRANT479=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants7752);  
			stream_KW_GRANT.add(KW_GRANT479);

			// D:\\temp\\antlr\\HiveParser.g:1435:24: ( principalName )?
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==KW_GROUP||LA131_0==KW_ROLE||LA131_0==KW_USER) ) {
				alt131=1;
			}
			switch (alt131) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1435:24: principalName
					{
					pushFollow(FOLLOW_principalName_in_showGrants7754);
					principalName480=principalName();
					state._fsp--;

					stream_principalName.add(principalName480.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1435:39: ( KW_ON privilegeIncludeColObject )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==KW_ON) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1435:40: KW_ON privilegeIncludeColObject
					{
					KW_ON481=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showGrants7758);  
					stream_KW_ON.add(KW_ON481);

					pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants7760);
					privilegeIncludeColObject482=privilegeIncludeColObject();
					state._fsp--;

					stream_privilegeIncludeColObject.add(privilegeIncludeColObject482.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: principalName, privilegeIncludeColObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1436:5: -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1436:8: ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT"), root_1);
				// D:\\temp\\antlr\\HiveParser.g:1436:25: ( principalName )?
				if ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				// D:\\temp\\antlr\\HiveParser.g:1436:40: ( privilegeIncludeColObject )?
				if ( stream_privilegeIncludeColObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());
				}
				stream_privilegeIncludeColObject.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showGrants"


	public static class showRolePrincipals_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showRolePrincipals"
	// D:\\temp\\antlr\\HiveParser.g:1439:1: showRolePrincipals : KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) ;
	public final HiveParser.showRolePrincipals_return showRolePrincipals() throws RecognitionException {
		HiveParser.showRolePrincipals_return retval = new HiveParser.showRolePrincipals_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SHOW483=null;
		Token KW_PRINCIPALS484=null;
		ParserRuleReturnScope roleName =null;

		CommonTree KW_SHOW483_tree=null;
		CommonTree KW_PRINCIPALS484_tree=null;
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_PRINCIPALS=new RewriteRuleTokenStream(adaptor,"token KW_PRINCIPALS");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("show role principals", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1442:5: ( KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) )
			// D:\\temp\\antlr\\HiveParser.g:1442:7: KW_SHOW KW_PRINCIPALS roleName= identifier
			{
			KW_SHOW483=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRolePrincipals7805);  
			stream_KW_SHOW.add(KW_SHOW483);

			KW_PRINCIPALS484=(Token)match(input,KW_PRINCIPALS,FOLLOW_KW_PRINCIPALS_in_showRolePrincipals7807);  
			stream_KW_PRINCIPALS.add(KW_PRINCIPALS484);

			pushFollow(FOLLOW_identifier_in_showRolePrincipals7811);
			roleName=identifier();
			state._fsp--;

			stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: retval, roleName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1443:5: -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
			{
				// D:\\temp\\antlr\\HiveParser.g:1443:8: ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SHOW_ROLE_PRINCIPALS, "TOK_SHOW_ROLE_PRINCIPALS"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRolePrincipals"


	public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeIncludeColObject"
	// D:\\temp\\antlr\\HiveParser.g:1447:1: privilegeIncludeColObject : ( KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectType identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL identifier privObjectType ( $cols)? ( partitionSpec )? ) );
	public final HiveParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
		HiveParser.privilegeIncludeColObject_return retval = new HiveParser.privilegeIncludeColObject_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALL485=null;
		Token LPAREN488=null;
		Token RPAREN489=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope privObjectType486 =null;
		ParserRuleReturnScope identifier487 =null;
		ParserRuleReturnScope partitionSpec490 =null;

		CommonTree KW_ALL485_tree=null;
		CommonTree LPAREN488_tree=null;
		CommonTree RPAREN489_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_privObjectType=new RewriteRuleSubtreeStream(adaptor,"rule privObjectType");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("privilege object including columns", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1450:5: ( KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectType identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL identifier privObjectType ( $cols)? ( partitionSpec )? ) )
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==KW_ALL) ) {
				alt135=1;
			}
			else if ( ((LA135_0 >= Identifier && LA135_0 <= KW_AFTER)||(LA135_0 >= KW_ALTER && LA135_0 <= KW_ANALYZE)||(LA135_0 >= KW_ARCHIVE && LA135_0 <= KW_CASCADE)||LA135_0==KW_CHANGE||(LA135_0 >= KW_CLUSTER && LA135_0 <= KW_COLLECTION)||(LA135_0 >= KW_COLUMNS && LA135_0 <= KW_CREATE)||LA135_0==KW_CUBE||(LA135_0 >= KW_CURSOR && LA135_0 <= KW_DISABLE)||(LA135_0 >= KW_DISTRIBUTE && LA135_0 <= KW_ELEM_TYPE)||LA135_0==KW_ENABLE||LA135_0==KW_ESCAPED||(LA135_0 >= KW_EXCLUSIVE && LA135_0 <= KW_EXPORT)||(LA135_0 >= KW_EXTERNAL && LA135_0 <= KW_FLOAT)||(LA135_0 >= KW_FOR && LA135_0 <= KW_FORMATTED)||LA135_0==KW_FULL||(LA135_0 >= KW_FUNCTIONS && LA135_0 <= KW_GROUPING)||(LA135_0 >= KW_HOLD_DDLTIME && LA135_0 <= KW_IDXPROPERTIES)||(LA135_0 >= KW_IGNORE && LA135_0 <= KW_JAR)||(LA135_0 >= KW_KEYS && LA135_0 <= KW_LEFT)||(LA135_0 >= KW_LIKE && LA135_0 <= KW_LONG)||(LA135_0 >= KW_MAPJOIN && LA135_0 <= KW_MINUS)||(LA135_0 >= KW_MSCK && LA135_0 <= KW_NOSCAN)||(LA135_0 >= KW_NO_DROP && LA135_0 <= KW_OFFLINE)||LA135_0==KW_OPTION||(LA135_0 >= KW_ORCFILE && LA135_0 <= KW_OUTPUTFORMAT)||(LA135_0 >= KW_OVERWRITE && LA135_0 <= KW_PARQUETFILE)||(LA135_0 >= KW_PARTITION && LA135_0 <= KW_PLUS)||(LA135_0 >= KW_PRETTY && LA135_0 <= KW_RECORDWRITER)||(LA135_0 >= KW_REGEXP && LA135_0 <= KW_SCHEMAS)||(LA135_0 >= KW_SEMI && LA135_0 <= KW_TABLES)||(LA135_0 >= KW_TBLPROPERTIES && LA135_0 <= KW_TEXTFILE)||(LA135_0 >= KW_TIMESTAMP && LA135_0 <= KW_TRANSACTIONS)||(LA135_0 >= KW_TRIGGER && LA135_0 <= KW_UNARCHIVE)||(LA135_0 >= KW_UNDO && LA135_0 <= KW_UNIONTYPE)||(LA135_0 >= KW_UNLOCK && LA135_0 <= KW_VALUE_TYPE)||LA135_0==KW_VIEW||LA135_0==KW_WHILE||LA135_0==KW_WITH) ) {
				alt135=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 135, 0, input);
				throw nvae;
			}

			switch (alt135) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1450:7: KW_ALL
					{
					KW_ALL485=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeIncludeColObject7852);  
					stream_KW_ALL.add(KW_ALL485);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1450:14: -> ^( TOK_RESOURCE_ALL )
					{
						// D:\\temp\\antlr\\HiveParser.g:1450:17: ^( TOK_RESOURCE_ALL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESOURCE_ALL, "TOK_RESOURCE_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1451:7: privObjectType identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
					{
					pushFollow(FOLLOW_privObjectType_in_privilegeIncludeColObject7866);
					privObjectType486=privObjectType();
					state._fsp--;

					stream_privObjectType.add(privObjectType486.getTree());
					pushFollow(FOLLOW_identifier_in_privilegeIncludeColObject7868);
					identifier487=identifier();
					state._fsp--;

					stream_identifier.add(identifier487.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1451:33: ( LPAREN cols= columnNameList RPAREN )?
					int alt133=2;
					int LA133_0 = input.LA(1);
					if ( (LA133_0==LPAREN) ) {
						alt133=1;
					}
					switch (alt133) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1451:34: LPAREN cols= columnNameList RPAREN
							{
							LPAREN488=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privilegeIncludeColObject7871);  
							stream_LPAREN.add(LPAREN488);

							pushFollow(FOLLOW_columnNameList_in_privilegeIncludeColObject7875);
							cols=columnNameList();
							state._fsp--;

							stream_columnNameList.add(cols.getTree());
							RPAREN489=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privilegeIncludeColObject7877);  
							stream_RPAREN.add(RPAREN489);

							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1451:70: ( partitionSpec )?
					int alt134=2;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==KW_PARTITION) ) {
						alt134=1;
					}
					switch (alt134) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1451:70: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_privilegeIncludeColObject7881);
							partitionSpec490=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec490.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: partitionSpec, cols, identifier, privObjectType
					// token labels: 
					// rule labels: retval, cols
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1452:5: -> ^( TOK_PRIV_OBJECT_COL identifier privObjectType ( $cols)? ( partitionSpec )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1452:8: ^( TOK_PRIV_OBJECT_COL identifier privObjectType ( $cols)? ( partitionSpec )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_1, stream_privObjectType.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:1452:57: ( $cols)?
						if ( stream_cols.hasNext() ) {
							adaptor.addChild(root_1, stream_cols.nextTree());
						}
						stream_cols.reset();

						// D:\\temp\\antlr\\HiveParser.g:1452:63: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeIncludeColObject"


	public static class privilegeObject_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeObject"
	// D:\\temp\\antlr\\HiveParser.g:1455:1: privilegeObject : KW_ON privObjectType identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT identifier privObjectType ( partitionSpec )? ) ;
	public final HiveParser.privilegeObject_return privilegeObject() throws RecognitionException {
		HiveParser.privilegeObject_return retval = new HiveParser.privilegeObject_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ON491=null;
		ParserRuleReturnScope privObjectType492 =null;
		ParserRuleReturnScope identifier493 =null;
		ParserRuleReturnScope partitionSpec494 =null;

		CommonTree KW_ON491_tree=null;
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_privObjectType=new RewriteRuleSubtreeStream(adaptor,"rule privObjectType");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("privilege subject", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1458:5: ( KW_ON privObjectType identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT identifier privObjectType ( partitionSpec )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1458:7: KW_ON privObjectType identifier ( partitionSpec )?
			{
			KW_ON491=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject7930);  
			stream_KW_ON.add(KW_ON491);

			pushFollow(FOLLOW_privObjectType_in_privilegeObject7932);
			privObjectType492=privObjectType();
			state._fsp--;

			stream_privObjectType.add(privObjectType492.getTree());
			pushFollow(FOLLOW_identifier_in_privilegeObject7934);
			identifier493=identifier();
			state._fsp--;

			stream_identifier.add(identifier493.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1458:39: ( partitionSpec )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==KW_PARTITION) ) {
				alt136=1;
			}
			switch (alt136) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1458:39: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_privilegeObject7936);
					partitionSpec494=partitionSpec();
					state._fsp--;

					stream_partitionSpec.add(partitionSpec494.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: privObjectType, partitionSpec, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1459:5: -> ^( TOK_PRIV_OBJECT identifier privObjectType ( partitionSpec )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1459:8: ^( TOK_PRIV_OBJECT identifier privObjectType ( partitionSpec )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_1, stream_privObjectType.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1459:52: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeObject"


	public static class privObjectType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privObjectType"
	// D:\\temp\\antlr\\HiveParser.g:1464:1: privObjectType : ( KW_DATABASE -> ^( TOK_DB_TYPE ) | ( KW_TABLE )? -> ^( TOK_TABLE_TYPE ) );
	public final HiveParser.privObjectType_return privObjectType() throws RecognitionException {
		HiveParser.privObjectType_return retval = new HiveParser.privObjectType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DATABASE495=null;
		Token KW_TABLE496=null;

		CommonTree KW_DATABASE495_tree=null;
		CommonTree KW_TABLE496_tree=null;
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");

		pushMsg("privilege object type type", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1467:5: ( KW_DATABASE -> ^( TOK_DB_TYPE ) | ( KW_TABLE )? -> ^( TOK_TABLE_TYPE ) )
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==KW_DATABASE) ) {
				alt138=1;
			}
			else if ( ((LA138_0 >= Identifier && LA138_0 <= KW_ANALYZE)||(LA138_0 >= KW_ARCHIVE && LA138_0 <= KW_CASCADE)||LA138_0==KW_CHANGE||(LA138_0 >= KW_CLUSTER && LA138_0 <= KW_COLLECTION)||(LA138_0 >= KW_COLUMNS && LA138_0 <= KW_CREATE)||LA138_0==KW_CUBE||(LA138_0 >= KW_CURSOR && LA138_0 <= KW_DATA)||(LA138_0 >= KW_DATABASES && LA138_0 <= KW_DISABLE)||(LA138_0 >= KW_DISTRIBUTE && LA138_0 <= KW_ELEM_TYPE)||LA138_0==KW_ENABLE||LA138_0==KW_ESCAPED||(LA138_0 >= KW_EXCLUSIVE && LA138_0 <= KW_EXPORT)||(LA138_0 >= KW_EXTERNAL && LA138_0 <= KW_FLOAT)||(LA138_0 >= KW_FOR && LA138_0 <= KW_FORMATTED)||LA138_0==KW_FULL||(LA138_0 >= KW_FUNCTIONS && LA138_0 <= KW_GROUPING)||(LA138_0 >= KW_HOLD_DDLTIME && LA138_0 <= KW_IDXPROPERTIES)||(LA138_0 >= KW_IGNORE && LA138_0 <= KW_JAR)||(LA138_0 >= KW_KEYS && LA138_0 <= KW_LEFT)||(LA138_0 >= KW_LIKE && LA138_0 <= KW_LONG)||(LA138_0 >= KW_MAPJOIN && LA138_0 <= KW_MINUS)||(LA138_0 >= KW_MSCK && LA138_0 <= KW_NOSCAN)||(LA138_0 >= KW_NO_DROP && LA138_0 <= KW_OFFLINE)||LA138_0==KW_OPTION||(LA138_0 >= KW_ORCFILE && LA138_0 <= KW_OUTPUTFORMAT)||(LA138_0 >= KW_OVERWRITE && LA138_0 <= KW_PARQUETFILE)||(LA138_0 >= KW_PARTITION && LA138_0 <= KW_PLUS)||(LA138_0 >= KW_PRETTY && LA138_0 <= KW_RECORDWRITER)||(LA138_0 >= KW_REGEXP && LA138_0 <= KW_SCHEMAS)||(LA138_0 >= KW_SEMI && LA138_0 <= KW_TABLES)||(LA138_0 >= KW_TBLPROPERTIES && LA138_0 <= KW_TEXTFILE)||(LA138_0 >= KW_TIMESTAMP && LA138_0 <= KW_TRANSACTIONS)||(LA138_0 >= KW_TRIGGER && LA138_0 <= KW_UNARCHIVE)||(LA138_0 >= KW_UNDO && LA138_0 <= KW_UNIONTYPE)||(LA138_0 >= KW_UNLOCK && LA138_0 <= KW_VALUE_TYPE)||LA138_0==KW_VIEW||LA138_0==KW_WHILE||LA138_0==KW_WITH) ) {
				alt138=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 138, 0, input);
				throw nvae;
			}

			switch (alt138) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1467:7: KW_DATABASE
					{
					KW_DATABASE495=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObjectType7983);  
					stream_KW_DATABASE.add(KW_DATABASE495);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1467:19: -> ^( TOK_DB_TYPE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1467:22: ^( TOK_DB_TYPE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1468:7: ( KW_TABLE )?
					{
					// D:\\temp\\antlr\\HiveParser.g:1468:7: ( KW_TABLE )?
					int alt137=2;
					int LA137_0 = input.LA(1);
					if ( (LA137_0==KW_TABLE) ) {
						switch ( input.LA(2) ) {
							case Identifier:
							case KW_ADD:
							case KW_ADMIN:
							case KW_AFTER:
							case KW_ALL:
							case KW_ALTER:
							case KW_ANALYZE:
							case KW_ARCHIVE:
							case KW_ARRAY:
							case KW_AS:
							case KW_ASC:
							case KW_BEFORE:
							case KW_BETWEEN:
							case KW_BIGINT:
							case KW_BINARY:
							case KW_BOOLEAN:
							case KW_BOTH:
							case KW_BUCKET:
							case KW_BUCKETS:
							case KW_BY:
							case KW_CASCADE:
							case KW_CHANGE:
							case KW_CLUSTER:
							case KW_CLUSTERED:
							case KW_CLUSTERSTATUS:
							case KW_COLLECTION:
							case KW_COLUMNS:
							case KW_COMMENT:
							case KW_COMPACT:
							case KW_COMPACTIONS:
							case KW_COMPUTE:
							case KW_CONCATENATE:
							case KW_CONTINUE:
							case KW_CREATE:
							case KW_CUBE:
							case KW_CURSOR:
							case KW_DATA:
							case KW_DATABASES:
							case KW_DATE:
							case KW_DATETIME:
							case KW_DBPROPERTIES:
							case KW_DECIMAL:
							case KW_DEFAULT:
							case KW_DEFERRED:
							case KW_DEFINED:
							case KW_DELETE:
							case KW_DELIMITED:
							case KW_DEPENDENCY:
							case KW_DESC:
							case KW_DESCRIBE:
							case KW_DIRECTORIES:
							case KW_DIRECTORY:
							case KW_DISABLE:
							case KW_DISTRIBUTE:
							case KW_DOUBLE:
							case KW_DROP:
							case KW_ELEM_TYPE:
							case KW_ENABLE:
							case KW_ESCAPED:
							case KW_EXCLUSIVE:
							case KW_EXISTS:
							case KW_EXPLAIN:
							case KW_EXPORT:
							case KW_EXTERNAL:
							case KW_FALSE:
							case KW_FETCH:
							case KW_FIELDS:
							case KW_FILE:
							case KW_FILEFORMAT:
							case KW_FIRST:
							case KW_FLOAT:
							case KW_FOR:
							case KW_FORMAT:
							case KW_FORMATTED:
							case KW_FULL:
							case KW_FUNCTIONS:
							case KW_GRANT:
							case KW_GROUP:
							case KW_GROUPING:
							case KW_HOLD_DDLTIME:
							case KW_IDXPROPERTIES:
							case KW_IGNORE:
							case KW_IMPORT:
							case KW_IN:
							case KW_INDEX:
							case KW_INDEXES:
							case KW_INNER:
							case KW_INPATH:
							case KW_INPUTDRIVER:
							case KW_INPUTFORMAT:
							case KW_INSERT:
							case KW_INT:
							case KW_INTERSECT:
							case KW_INTO:
							case KW_IS:
							case KW_ITEMS:
							case KW_JAR:
							case KW_KEYS:
							case KW_KEY_TYPE:
							case KW_LATERAL:
							case KW_LEFT:
							case KW_LIKE:
							case KW_LIMIT:
							case KW_LINES:
							case KW_LOAD:
							case KW_LOCAL:
							case KW_LOCATION:
							case KW_LOCK:
							case KW_LOCKS:
							case KW_LOGICAL:
							case KW_LONG:
							case KW_MAPJOIN:
							case KW_MATERIALIZED:
							case KW_MINUS:
							case KW_MSCK:
							case KW_NONE:
							case KW_NOSCAN:
							case KW_NO_DROP:
							case KW_NULL:
							case KW_OF:
							case KW_OFFLINE:
							case KW_OPTION:
							case KW_ORCFILE:
							case KW_ORDER:
							case KW_OUT:
							case KW_OUTER:
							case KW_OUTPUTDRIVER:
							case KW_OUTPUTFORMAT:
							case KW_OVERWRITE:
							case KW_OWNER:
							case KW_PARQUETFILE:
							case KW_PARTITIONED:
							case KW_PARTITIONS:
							case KW_PERCENT:
							case KW_PLUS:
							case KW_PRETTY:
							case KW_PRINCIPALS:
							case KW_PROCEDURE:
							case KW_PROTECTION:
							case KW_PURGE:
							case KW_RANGE:
							case KW_RCFILE:
							case KW_READ:
							case KW_READONLY:
							case KW_READS:
							case KW_REBUILD:
							case KW_RECORDREADER:
							case KW_RECORDWRITER:
							case KW_REGEXP:
							case KW_RENAME:
							case KW_REPAIR:
							case KW_REPLACE:
							case KW_RESTRICT:
							case KW_REVOKE:
							case KW_RIGHT:
							case KW_RLIKE:
							case KW_ROLE:
							case KW_ROLES:
							case KW_ROLLUP:
							case KW_ROW:
							case KW_ROWS:
							case KW_SCHEMA:
							case KW_SCHEMAS:
							case KW_SEMI:
							case KW_SEQUENCEFILE:
							case KW_SERDE:
							case KW_SERDEPROPERTIES:
							case KW_SET:
							case KW_SETS:
							case KW_SHARED:
							case KW_SHOW:
							case KW_SHOW_DATABASE:
							case KW_SKEWED:
							case KW_SMALLINT:
							case KW_SORT:
							case KW_SORTED:
							case KW_SSL:
							case KW_STATISTICS:
							case KW_STORED:
							case KW_STREAMTABLE:
							case KW_STRING:
							case KW_STRUCT:
							case KW_TABLE:
							case KW_TABLES:
							case KW_TBLPROPERTIES:
							case KW_TEMPORARY:
							case KW_TERMINATED:
							case KW_TEXTFILE:
							case KW_TIMESTAMP:
							case KW_TINYINT:
							case KW_TOUCH:
							case KW_TRANSACTIONS:
							case KW_TRIGGER:
							case KW_TRUE:
							case KW_TRUNCATE:
							case KW_UNARCHIVE:
							case KW_UNDO:
							case KW_UNION:
							case KW_UNIONTYPE:
							case KW_UNLOCK:
							case KW_UNSET:
							case KW_UNSIGNED:
							case KW_UPDATE:
							case KW_USE:
							case KW_USER:
							case KW_USING:
							case KW_UTC:
							case KW_UTCTIMESTAMP:
							case KW_VALUE_TYPE:
							case KW_VIEW:
							case KW_WHILE:
							case KW_WITH:
								{
								alt137=1;
								}
								break;
							case KW_PARTITION:
								{
								int LA137_5 = input.LA(3);
								if ( (LA137_5==LPAREN) ) {
									alt137=1;
								}
								else if ( (LA137_5==EOF||LA137_5==KW_FROM||LA137_5==KW_PARTITION||LA137_5==KW_TO) ) {
									alt137=1;
								}
								}
								break;
							case KW_TO:
								{
								int LA137_7 = input.LA(3);
								if ( (LA137_7==EOF||LA137_7==KW_FROM||LA137_7==KW_PARTITION||LA137_7==KW_TO||LA137_7==LPAREN) ) {
									alt137=1;
								}
								}
								break;
						}
					}
					switch (alt137) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1468:7: KW_TABLE
							{
							KW_TABLE496=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObjectType7997);  
							stream_KW_TABLE.add(KW_TABLE496);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1468:17: -> ^( TOK_TABLE_TYPE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1468:20: ^( TOK_TABLE_TYPE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privObjectType"


	public static class privilegeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeList"
	// D:\\temp\\antlr\\HiveParser.g:1472:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
	public final HiveParser.privilegeList_return privilegeList() throws RecognitionException {
		HiveParser.privilegeList_return retval = new HiveParser.privilegeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA498=null;
		ParserRuleReturnScope privlegeDef497 =null;
		ParserRuleReturnScope privlegeDef499 =null;

		CommonTree COMMA498_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");

		pushMsg("grant privilege list", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1475:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1475:7: privlegeDef ( COMMA privlegeDef )*
			{
			pushFollow(FOLLOW_privlegeDef_in_privilegeList8032);
			privlegeDef497=privlegeDef();
			state._fsp--;

			stream_privlegeDef.add(privlegeDef497.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1475:19: ( COMMA privlegeDef )*
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==COMMA) ) {
					alt139=1;
				}

				switch (alt139) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1475:20: COMMA privlegeDef
					{
					COMMA498=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList8035);  
					stream_COMMA.add(COMMA498);

					pushFollow(FOLLOW_privlegeDef_in_privilegeList8037);
					privlegeDef499=privlegeDef();
					state._fsp--;

					stream_privlegeDef.add(privlegeDef499.getTree());
					}
					break;

				default :
					break loop139;
				}
			}

			// AST REWRITE
			// elements: privlegeDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1476:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1476:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST"), root_1);
				if ( !(stream_privlegeDef.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_privlegeDef.hasNext() ) {
					adaptor.addChild(root_1, stream_privlegeDef.nextTree());
				}
				stream_privlegeDef.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeList"


	public static class privlegeDef_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privlegeDef"
	// D:\\temp\\antlr\\HiveParser.g:1479:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
	public final HiveParser.privlegeDef_return privlegeDef() throws RecognitionException {
		HiveParser.privlegeDef_return retval = new HiveParser.privlegeDef_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN501=null;
		Token RPAREN502=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope privilegeType500 =null;

		CommonTree LPAREN501_tree=null;
		CommonTree RPAREN502_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		pushMsg("grant privilege", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1482:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
			// D:\\temp\\antlr\\HiveParser.g:1482:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
			{
			pushFollow(FOLLOW_privilegeType_in_privlegeDef8079);
			privilegeType500=privilegeType();
			state._fsp--;

			stream_privilegeType.add(privilegeType500.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1482:21: ( LPAREN cols= columnNameList RPAREN )?
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==LPAREN) ) {
				alt140=1;
			}
			switch (alt140) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1482:22: LPAREN cols= columnNameList RPAREN
					{
					LPAREN501=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef8082);  
					stream_LPAREN.add(LPAREN501);

					pushFollow(FOLLOW_columnNameList_in_privlegeDef8086);
					cols=columnNameList();
					state._fsp--;

					stream_columnNameList.add(cols.getTree());
					RPAREN502=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef8088);  
					stream_RPAREN.add(RPAREN502);

					}
					break;

			}

			// AST REWRITE
			// elements: privilegeType, cols
			// token labels: 
			// rule labels: retval, cols
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1483:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1483:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE"), root_1);
				adaptor.addChild(root_1, stream_privilegeType.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1483:39: ( $cols)?
				if ( stream_cols.hasNext() ) {
					adaptor.addChild(root_1, stream_cols.nextTree());
				}
				stream_cols.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privlegeDef"


	public static class privilegeType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "privilegeType"
	// D:\\temp\\antlr\\HiveParser.g:1486:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) );
	public final HiveParser.privilegeType_return privilegeType() throws RecognitionException {
		HiveParser.privilegeType_return retval = new HiveParser.privilegeType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ALL503=null;
		Token KW_ALTER504=null;
		Token KW_UPDATE505=null;
		Token KW_CREATE506=null;
		Token KW_DROP507=null;
		Token KW_INDEX508=null;
		Token KW_LOCK509=null;
		Token KW_SELECT510=null;
		Token KW_SHOW_DATABASE511=null;
		Token KW_INSERT512=null;
		Token KW_DELETE513=null;

		CommonTree KW_ALL503_tree=null;
		CommonTree KW_ALTER504_tree=null;
		CommonTree KW_UPDATE505_tree=null;
		CommonTree KW_CREATE506_tree=null;
		CommonTree KW_DROP507_tree=null;
		CommonTree KW_INDEX508_tree=null;
		CommonTree KW_LOCK509_tree=null;
		CommonTree KW_SELECT510_tree=null;
		CommonTree KW_SHOW_DATABASE511_tree=null;
		CommonTree KW_INSERT512_tree=null;
		CommonTree KW_DELETE513_tree=null;
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");

		pushMsg("privilege type", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1489:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) )
			int alt141=11;
			switch ( input.LA(1) ) {
			case KW_ALL:
				{
				alt141=1;
				}
				break;
			case KW_ALTER:
				{
				alt141=2;
				}
				break;
			case KW_UPDATE:
				{
				alt141=3;
				}
				break;
			case KW_CREATE:
				{
				alt141=4;
				}
				break;
			case KW_DROP:
				{
				alt141=5;
				}
				break;
			case KW_INDEX:
				{
				alt141=6;
				}
				break;
			case KW_LOCK:
				{
				alt141=7;
				}
				break;
			case KW_SELECT:
				{
				alt141=8;
				}
				break;
			case KW_SHOW_DATABASE:
				{
				alt141=9;
				}
				break;
			case KW_INSERT:
				{
				alt141=10;
				}
				break;
			case KW_DELETE:
				{
				alt141=11;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 141, 0, input);
				throw nvae;
			}
			switch (alt141) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1489:7: KW_ALL
					{
					KW_ALL503=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType8133);  
					stream_KW_ALL.add(KW_ALL503);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1489:14: -> ^( TOK_PRIV_ALL )
					{
						// D:\\temp\\antlr\\HiveParser.g:1489:17: ^( TOK_PRIV_ALL )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1490:7: KW_ALTER
					{
					KW_ALTER504=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType8147);  
					stream_KW_ALTER.add(KW_ALTER504);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1490:16: -> ^( TOK_PRIV_ALTER_METADATA )
					{
						// D:\\temp\\antlr\\HiveParser.g:1490:19: ^( TOK_PRIV_ALTER_METADATA )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1491:7: KW_UPDATE
					{
					KW_UPDATE505=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType8161);  
					stream_KW_UPDATE.add(KW_UPDATE505);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1491:17: -> ^( TOK_PRIV_ALTER_DATA )
					{
						// D:\\temp\\antlr\\HiveParser.g:1491:20: ^( TOK_PRIV_ALTER_DATA )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:1492:7: KW_CREATE
					{
					KW_CREATE506=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType8175);  
					stream_KW_CREATE.add(KW_CREATE506);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1492:17: -> ^( TOK_PRIV_CREATE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1492:20: ^( TOK_PRIV_CREATE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:1493:7: KW_DROP
					{
					KW_DROP507=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType8189);  
					stream_KW_DROP.add(KW_DROP507);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1493:15: -> ^( TOK_PRIV_DROP )
					{
						// D:\\temp\\antlr\\HiveParser.g:1493:18: ^( TOK_PRIV_DROP )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:1494:7: KW_INDEX
					{
					KW_INDEX508=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType8203);  
					stream_KW_INDEX.add(KW_INDEX508);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1494:16: -> ^( TOK_PRIV_INDEX )
					{
						// D:\\temp\\antlr\\HiveParser.g:1494:19: ^( TOK_PRIV_INDEX )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:1495:7: KW_LOCK
					{
					KW_LOCK509=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType8217);  
					stream_KW_LOCK.add(KW_LOCK509);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1495:15: -> ^( TOK_PRIV_LOCK )
					{
						// D:\\temp\\antlr\\HiveParser.g:1495:18: ^( TOK_PRIV_LOCK )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 8 :
					// D:\\temp\\antlr\\HiveParser.g:1496:7: KW_SELECT
					{
					KW_SELECT510=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType8231);  
					stream_KW_SELECT.add(KW_SELECT510);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1496:17: -> ^( TOK_PRIV_SELECT )
					{
						// D:\\temp\\antlr\\HiveParser.g:1496:20: ^( TOK_PRIV_SELECT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 9 :
					// D:\\temp\\antlr\\HiveParser.g:1497:7: KW_SHOW_DATABASE
					{
					KW_SHOW_DATABASE511=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType8245);  
					stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE511);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1497:24: -> ^( TOK_PRIV_SHOW_DATABASE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1497:27: ^( TOK_PRIV_SHOW_DATABASE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 10 :
					// D:\\temp\\antlr\\HiveParser.g:1498:7: KW_INSERT
					{
					KW_INSERT512=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_privilegeType8259);  
					stream_KW_INSERT.add(KW_INSERT512);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1498:17: -> ^( TOK_PRIV_INSERT )
					{
						// D:\\temp\\antlr\\HiveParser.g:1498:20: ^( TOK_PRIV_INSERT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_INSERT, "TOK_PRIV_INSERT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 11 :
					// D:\\temp\\antlr\\HiveParser.g:1499:7: KW_DELETE
					{
					KW_DELETE513=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_privilegeType8273);  
					stream_KW_DELETE.add(KW_DELETE513);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1499:17: -> ^( TOK_PRIV_DELETE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1499:20: ^( TOK_PRIV_DELETE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRIV_DELETE, "TOK_PRIV_DELETE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeType"


	public static class principalSpecification_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "principalSpecification"
	// D:\\temp\\antlr\\HiveParser.g:1502:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
	public final HiveParser.principalSpecification_return principalSpecification() throws RecognitionException {
		HiveParser.principalSpecification_return retval = new HiveParser.principalSpecification_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA515=null;
		ParserRuleReturnScope principalName514 =null;
		ParserRuleReturnScope principalName516 =null;

		CommonTree COMMA515_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg("user/group/role name list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1505:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1505:7: principalName ( COMMA principalName )*
			{
			pushFollow(FOLLOW_principalName_in_principalSpecification8306);
			principalName514=principalName();
			state._fsp--;

			stream_principalName.add(principalName514.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1505:21: ( COMMA principalName )*
			loop142:
			while (true) {
				int alt142=2;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==COMMA) ) {
					alt142=1;
				}

				switch (alt142) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1505:22: COMMA principalName
					{
					COMMA515=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification8309);  
					stream_COMMA.add(COMMA515);

					pushFollow(FOLLOW_principalName_in_principalSpecification8311);
					principalName516=principalName();
					state._fsp--;

					stream_principalName.add(principalName516.getTree());
					}
					break;

				default :
					break loop142;
				}
			}

			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1505:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1505:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME"), root_1);
				if ( !(stream_principalName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalSpecification"


	public static class principalName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "principalName"
	// D:\\temp\\antlr\\HiveParser.g:1508:1: principalName : ( KW_USER identifier -> ^( TOK_USER identifier ) | KW_GROUP identifier -> ^( TOK_GROUP identifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) );
	public final HiveParser.principalName_return principalName() throws RecognitionException {
		HiveParser.principalName_return retval = new HiveParser.principalName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_USER517=null;
		Token KW_GROUP519=null;
		Token KW_ROLE521=null;
		ParserRuleReturnScope identifier518 =null;
		ParserRuleReturnScope identifier520 =null;
		ParserRuleReturnScope identifier522 =null;

		CommonTree KW_USER517_tree=null;
		CommonTree KW_GROUP519_tree=null;
		CommonTree KW_ROLE521_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
		RewriteRuleTokenStream stream_KW_USER=new RewriteRuleTokenStream(adaptor,"token KW_USER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("user|group|role name", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1511:5: ( KW_USER identifier -> ^( TOK_USER identifier ) | KW_GROUP identifier -> ^( TOK_GROUP identifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) )
			int alt143=3;
			switch ( input.LA(1) ) {
			case KW_USER:
				{
				alt143=1;
				}
				break;
			case KW_GROUP:
				{
				alt143=2;
				}
				break;
			case KW_ROLE:
				{
				alt143=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 143, 0, input);
				throw nvae;
			}
			switch (alt143) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1511:7: KW_USER identifier
					{
					KW_USER517=(Token)match(input,KW_USER,FOLLOW_KW_USER_in_principalName8349);  
					stream_KW_USER.add(KW_USER517);

					pushFollow(FOLLOW_identifier_in_principalName8351);
					identifier518=identifier();
					state._fsp--;

					stream_identifier.add(identifier518.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1511:26: -> ^( TOK_USER identifier )
					{
						// D:\\temp\\antlr\\HiveParser.g:1511:29: ^( TOK_USER identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_USER, "TOK_USER"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1512:7: KW_GROUP identifier
					{
					KW_GROUP519=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName8367);  
					stream_KW_GROUP.add(KW_GROUP519);

					pushFollow(FOLLOW_identifier_in_principalName8369);
					identifier520=identifier();
					state._fsp--;

					stream_identifier.add(identifier520.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1512:27: -> ^( TOK_GROUP identifier )
					{
						// D:\\temp\\antlr\\HiveParser.g:1512:30: ^( TOK_GROUP identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GROUP, "TOK_GROUP"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1513:7: KW_ROLE identifier
					{
					KW_ROLE521=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_principalName8385);  
					stream_KW_ROLE.add(KW_ROLE521);

					pushFollow(FOLLOW_identifier_in_principalName8387);
					identifier522=identifier();
					state._fsp--;

					stream_identifier.add(identifier522.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1513:26: -> ^( TOK_ROLE identifier )
					{
						// D:\\temp\\antlr\\HiveParser.g:1513:29: ^( TOK_ROLE identifier )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ROLE, "TOK_ROLE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalName"


	public static class withGrantOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withGrantOption"
	// D:\\temp\\antlr\\HiveParser.g:1516:1: withGrantOption : KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
	public final HiveParser.withGrantOption_return withGrantOption() throws RecognitionException {
		HiveParser.withGrantOption_return retval = new HiveParser.withGrantOption_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH523=null;
		Token KW_GRANT524=null;
		Token KW_OPTION525=null;

		CommonTree KW_WITH523_tree=null;
		CommonTree KW_GRANT524_tree=null;
		CommonTree KW_OPTION525_tree=null;
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");

		pushMsg("with grant option", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1519:5: ( KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
			// D:\\temp\\antlr\\HiveParser.g:1519:7: KW_WITH KW_GRANT KW_OPTION
			{
			KW_WITH523=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withGrantOption8422);  
			stream_KW_WITH.add(KW_WITH523);

			KW_GRANT524=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withGrantOption8424);  
			stream_KW_GRANT.add(KW_GRANT524);

			KW_OPTION525=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withGrantOption8426);  
			stream_KW_OPTION.add(KW_OPTION525);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1520:5: -> ^( TOK_GRANT_WITH_OPTION )
			{
				// D:\\temp\\antlr\\HiveParser.g:1520:8: ^( TOK_GRANT_WITH_OPTION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withGrantOption"


	public static class withAdminOption_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withAdminOption"
	// D:\\temp\\antlr\\HiveParser.g:1523:1: withAdminOption : KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) ;
	public final HiveParser.withAdminOption_return withAdminOption() throws RecognitionException {
		HiveParser.withAdminOption_return retval = new HiveParser.withAdminOption_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH526=null;
		Token KW_ADMIN527=null;
		Token KW_OPTION528=null;

		CommonTree KW_WITH526_tree=null;
		CommonTree KW_ADMIN527_tree=null;
		CommonTree KW_OPTION528_tree=null;
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

		pushMsg("with admin option", state);
		try {
			// D:\\temp\\antlr\\HiveParser.g:1526:5: ( KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) )
			// D:\\temp\\antlr\\HiveParser.g:1526:7: KW_WITH KW_ADMIN KW_OPTION
			{
			KW_WITH526=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withAdminOption8463);  
			stream_KW_WITH.add(KW_WITH526);

			KW_ADMIN527=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_withAdminOption8465);  
			stream_KW_ADMIN.add(KW_ADMIN527);

			KW_OPTION528=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withAdminOption8467);  
			stream_KW_OPTION.add(KW_OPTION528);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1527:5: -> ^( TOK_GRANT_WITH_ADMIN_OPTION )
			{
				// D:\\temp\\antlr\\HiveParser.g:1527:8: ^( TOK_GRANT_WITH_ADMIN_OPTION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_GRANT_WITH_ADMIN_OPTION, "TOK_GRANT_WITH_ADMIN_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			popMsg(state);
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withAdminOption"


	public static class metastoreCheck_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "metastoreCheck"
	// D:\\temp\\antlr\\HiveParser.g:1530:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) ;
	public final HiveParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
		HiveParser.metastoreCheck_return retval = new HiveParser.metastoreCheck_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token repair=null;
		Token KW_MSCK529=null;
		Token KW_TABLE530=null;
		Token COMMA532=null;
		ParserRuleReturnScope table =null;
		ParserRuleReturnScope partitionSpec531 =null;
		ParserRuleReturnScope partitionSpec533 =null;

		CommonTree repair_tree=null;
		CommonTree KW_MSCK529_tree=null;
		CommonTree KW_TABLE530_tree=null;
		CommonTree COMMA532_tree=null;
		RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("metastore check statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1533:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1533:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
			{
			KW_MSCK529=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck8504);  
			stream_KW_MSCK.add(KW_MSCK529);

			// D:\\temp\\antlr\\HiveParser.g:1533:15: (repair= KW_REPAIR )?
			int alt144=2;
			int LA144_0 = input.LA(1);
			if ( (LA144_0==KW_REPAIR) ) {
				alt144=1;
			}
			switch (alt144) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1533:16: repair= KW_REPAIR
					{
					repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck8509);  
					stream_KW_REPAIR.add(repair);

					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1533:35: ( KW_TABLE table= identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==KW_TABLE) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1533:36: KW_TABLE table= identifier ( partitionSpec )? ( COMMA partitionSpec )*
					{
					KW_TABLE530=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck8514);  
					stream_KW_TABLE.add(KW_TABLE530);

					pushFollow(FOLLOW_identifier_in_metastoreCheck8518);
					table=identifier();
					state._fsp--;

					stream_identifier.add(table.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1533:62: ( partitionSpec )?
					int alt145=2;
					int LA145_0 = input.LA(1);
					if ( (LA145_0==KW_PARTITION) ) {
						alt145=1;
					}
					switch (alt145) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1533:62: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck8520);
							partitionSpec531=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec531.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:1533:77: ( COMMA partitionSpec )*
					loop146:
					while (true) {
						int alt146=2;
						int LA146_0 = input.LA(1);
						if ( (LA146_0==COMMA) ) {
							alt146=1;
						}

						switch (alt146) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1533:78: COMMA partitionSpec
							{
							COMMA532=(Token)match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck8524);  
							stream_COMMA.add(COMMA532);

							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck8526);
							partitionSpec533=partitionSpec();
							state._fsp--;

							stream_partitionSpec.add(partitionSpec533.getTree());
							}
							break;

						default :
							break loop146;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, repair, table
			// token labels: repair
			// rule labels: retval, table
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_table=new RewriteRuleSubtreeStream(adaptor,"rule table",table!=null?table.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1534:5: -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1534:8: ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);
				// D:\\temp\\antlr\\HiveParser.g:1534:20: ( $repair)?
				if ( stream_repair.hasNext() ) {
					adaptor.addChild(root_1, stream_repair.nextNode());
				}
				stream_repair.reset();

				// D:\\temp\\antlr\\HiveParser.g:1534:28: ( $table ( partitionSpec )* )?
				if ( stream_partitionSpec.hasNext()||stream_table.hasNext() ) {
					adaptor.addChild(root_1, stream_table.nextTree());
					// D:\\temp\\antlr\\HiveParser.g:1534:36: ( partitionSpec )*
					while ( stream_partitionSpec.hasNext() ) {
						adaptor.addChild(root_1, stream_partitionSpec.nextTree());
					}
					stream_partitionSpec.reset();

				}
				stream_partitionSpec.reset();
				stream_table.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "metastoreCheck"


	public static class resourceList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resourceList"
	// D:\\temp\\antlr\\HiveParser.g:1537:1: resourceList : resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) ;
	public final HiveParser.resourceList_return resourceList() throws RecognitionException {
		HiveParser.resourceList_return retval = new HiveParser.resourceList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA535=null;
		ParserRuleReturnScope resource534 =null;
		ParserRuleReturnScope resource536 =null;

		CommonTree COMMA535_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_resource=new RewriteRuleSubtreeStream(adaptor,"rule resource");

		 pushMsg("resource list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1540:3: ( resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1541:3: resource ( COMMA resource )*
			{
			pushFollow(FOLLOW_resource_in_resourceList8580);
			resource534=resource();
			state._fsp--;

			stream_resource.add(resource534.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1541:12: ( COMMA resource )*
			loop148:
			while (true) {
				int alt148=2;
				int LA148_0 = input.LA(1);
				if ( (LA148_0==COMMA) ) {
					alt148=1;
				}

				switch (alt148) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1541:13: COMMA resource
					{
					COMMA535=(Token)match(input,COMMA,FOLLOW_COMMA_in_resourceList8583);  
					stream_COMMA.add(COMMA535);

					pushFollow(FOLLOW_resource_in_resourceList8585);
					resource536=resource();
					state._fsp--;

					stream_resource.add(resource536.getTree());
					}
					break;

				default :
					break loop148;
				}
			}

			// AST REWRITE
			// elements: resource
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1541:30: -> ^( TOK_RESOURCE_LIST ( resource )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1541:33: ^( TOK_RESOURCE_LIST ( resource )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESOURCE_LIST, "TOK_RESOURCE_LIST"), root_1);
				if ( !(stream_resource.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_resource.hasNext() ) {
					adaptor.addChild(root_1, stream_resource.nextTree());
				}
				stream_resource.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceList"


	public static class resource_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resource"
	// D:\\temp\\antlr\\HiveParser.g:1544:1: resource : resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) ;
	public final HiveParser.resource_return resource() throws RecognitionException {
		HiveParser.resource_return retval = new HiveParser.resource_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token resPath=null;
		ParserRuleReturnScope resType =null;

		CommonTree resPath_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleSubtreeStream stream_resourceType=new RewriteRuleSubtreeStream(adaptor,"rule resourceType");

		 pushMsg("resource", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1547:3: (resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) )
			// D:\\temp\\antlr\\HiveParser.g:1548:3: resType= resourceType resPath= StringLiteral
			{
			pushFollow(FOLLOW_resourceType_in_resource8623);
			resType=resourceType();
			state._fsp--;

			stream_resourceType.add(resType.getTree());
			resPath=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_resource8627);  
			stream_StringLiteral.add(resPath);

			// AST REWRITE
			// elements: resType, resPath
			// token labels: resPath
			// rule labels: retval, resType
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_resPath=new RewriteRuleTokenStream(adaptor,"token resPath",resPath);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_resType=new RewriteRuleSubtreeStream(adaptor,"rule resType",resType!=null?resType.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1548:46: -> ^( TOK_RESOURCE_URI $resType $resPath)
			{
				// D:\\temp\\antlr\\HiveParser.g:1548:49: ^( TOK_RESOURCE_URI $resType $resPath)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RESOURCE_URI, "TOK_RESOURCE_URI"), root_1);
				adaptor.addChild(root_1, stream_resType.nextTree());
				adaptor.addChild(root_1, stream_resPath.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resource"


	public static class resourceType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "resourceType"
	// D:\\temp\\antlr\\HiveParser.g:1551:1: resourceType : ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) );
	public final HiveParser.resourceType_return resourceType() throws RecognitionException {
		HiveParser.resourceType_return retval = new HiveParser.resourceType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_JAR537=null;
		Token KW_FILE538=null;
		Token KW_ARCHIVE539=null;

		CommonTree KW_JAR537_tree=null;
		CommonTree KW_FILE538_tree=null;
		CommonTree KW_ARCHIVE539_tree=null;
		RewriteRuleTokenStream stream_KW_FILE=new RewriteRuleTokenStream(adaptor,"token KW_FILE");
		RewriteRuleTokenStream stream_KW_JAR=new RewriteRuleTokenStream(adaptor,"token KW_JAR");
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");

		 pushMsg("resource type", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1554:3: ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) )
			int alt149=3;
			switch ( input.LA(1) ) {
			case KW_JAR:
				{
				alt149=1;
				}
				break;
			case KW_FILE:
				{
				alt149=2;
				}
				break;
			case KW_ARCHIVE:
				{
				alt149=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 149, 0, input);
				throw nvae;
			}
			switch (alt149) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1555:3: KW_JAR
					{
					KW_JAR537=(Token)match(input,KW_JAR,FOLLOW_KW_JAR_in_resourceType8664);  
					stream_KW_JAR.add(KW_JAR537);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1555:10: -> ^( TOK_JAR )
					{
						// D:\\temp\\antlr\\HiveParser.g:1555:13: ^( TOK_JAR )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_JAR, "TOK_JAR"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1557:3: KW_FILE
					{
					KW_FILE538=(Token)match(input,KW_FILE,FOLLOW_KW_FILE_in_resourceType8678);  
					stream_KW_FILE.add(KW_FILE538);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1557:11: -> ^( TOK_FILE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1557:14: ^( TOK_FILE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILE, "TOK_FILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1559:3: KW_ARCHIVE
					{
					KW_ARCHIVE539=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_resourceType8692);  
					stream_KW_ARCHIVE.add(KW_ARCHIVE539);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1559:14: -> ^( TOK_ARCHIVE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1559:17: ^( TOK_ARCHIVE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_ARCHIVE, "TOK_ARCHIVE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceType"


	public static class createFunctionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createFunctionStatement"
	// D:\\temp\\antlr\\HiveParser.g:1562:1: createFunctionStatement : KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) ;
	public final HiveParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
		HiveParser.createFunctionStatement_return retval = new HiveParser.createFunctionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token temp=null;
		Token KW_CREATE540=null;
		Token KW_FUNCTION541=null;
		Token KW_AS543=null;
		Token StringLiteral544=null;
		Token KW_USING545=null;
		ParserRuleReturnScope rList =null;
		ParserRuleReturnScope functionIdentifier542 =null;

		CommonTree temp_tree=null;
		CommonTree KW_CREATE540_tree=null;
		CommonTree KW_FUNCTION541_tree=null;
		CommonTree KW_AS543_tree=null;
		CommonTree StringLiteral544_tree=null;
		CommonTree KW_USING545_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleSubtreeStream stream_resourceList=new RewriteRuleSubtreeStream(adaptor,"rule resourceList");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");

		 pushMsg("create function statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1565:5: ( KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) )
			// D:\\temp\\antlr\\HiveParser.g:1565:7: KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )?
			{
			KW_CREATE540=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement8723);  
			stream_KW_CREATE.add(KW_CREATE540);

			// D:\\temp\\antlr\\HiveParser.g:1565:17: (temp= KW_TEMPORARY )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==KW_TEMPORARY) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1565:18: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement8728);  
					stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION541=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement8732);  
			stream_KW_FUNCTION.add(KW_FUNCTION541);

			pushFollow(FOLLOW_functionIdentifier_in_createFunctionStatement8734);
			functionIdentifier542=functionIdentifier();
			state._fsp--;

			stream_functionIdentifier.add(functionIdentifier542.getTree());
			KW_AS543=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement8736);  
			stream_KW_AS.add(KW_AS543);

			StringLiteral544=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement8738);  
			stream_StringLiteral.add(StringLiteral544);

			// D:\\temp\\antlr\\HiveParser.g:1566:7: ( KW_USING rList= resourceList )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==KW_USING) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1566:8: KW_USING rList= resourceList
					{
					KW_USING545=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_createFunctionStatement8747);  
					stream_KW_USING.add(KW_USING545);

					pushFollow(FOLLOW_resourceList_in_createFunctionStatement8751);
					rList=resourceList();
					state._fsp--;

					stream_resourceList.add(rList.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: functionIdentifier, StringLiteral, rList, StringLiteral, functionIdentifier, rList
			// token labels: 
			// rule labels: retval, rList
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_rList=new RewriteRuleSubtreeStream(adaptor,"rule rList",rList!=null?rList.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1567:5: -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
			if (temp != null) {
				// D:\\temp\\antlr\\HiveParser.g:1567:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// D:\\temp\\antlr\\HiveParser.g:1567:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1568:5: -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1568:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// D:\\temp\\antlr\\HiveParser.g:1568:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createFunctionStatement"


	public static class dropFunctionStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropFunctionStatement"
	// D:\\temp\\antlr\\HiveParser.g:1571:1: dropFunctionStatement : KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) ;
	public final HiveParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
		HiveParser.dropFunctionStatement_return retval = new HiveParser.dropFunctionStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token temp=null;
		Token KW_DROP546=null;
		Token KW_FUNCTION547=null;
		ParserRuleReturnScope ifExists548 =null;
		ParserRuleReturnScope functionIdentifier549 =null;

		CommonTree temp_tree=null;
		CommonTree KW_DROP546_tree=null;
		CommonTree KW_FUNCTION547_tree=null;
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");

		 pushMsg("drop function statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1574:5: ( KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1574:7: KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier
			{
			KW_DROP546=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement8837);  
			stream_KW_DROP.add(KW_DROP546);

			// D:\\temp\\antlr\\HiveParser.g:1574:15: (temp= KW_TEMPORARY )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==KW_TEMPORARY) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1574:16: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement8842);  
					stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION547=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement8846);  
			stream_KW_FUNCTION.add(KW_FUNCTION547);

			// D:\\temp\\antlr\\HiveParser.g:1574:48: ( ifExists )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==KW_IF) ) {
				alt153=1;
			}
			switch (alt153) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1574:48: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropFunctionStatement8848);
					ifExists548=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists548.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_functionIdentifier_in_dropFunctionStatement8851);
			functionIdentifier549=functionIdentifier();
			state._fsp--;

			stream_functionIdentifier.add(functionIdentifier549.getTree());
			// AST REWRITE
			// elements: functionIdentifier, ifExists, ifExists, functionIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1575:5: -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
			if (temp != null) {
				// D:\\temp\\antlr\\HiveParser.g:1575:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1575:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1576:5: -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1576:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1576:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropFunctionStatement"


	public static class createMacroStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createMacroStatement"
	// D:\\temp\\antlr\\HiveParser.g:1579:1: createMacroStatement : KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) ;
	public final HiveParser.createMacroStatement_return createMacroStatement() throws RecognitionException {
		HiveParser.createMacroStatement_return retval = new HiveParser.createMacroStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE550=null;
		Token KW_TEMPORARY551=null;
		Token KW_MACRO552=null;
		Token Identifier553=null;
		Token LPAREN554=null;
		Token RPAREN556=null;
		ParserRuleReturnScope columnNameTypeList555 =null;
		ParserRuleReturnScope expression557 =null;

		CommonTree KW_CREATE550_tree=null;
		CommonTree KW_TEMPORARY551_tree=null;
		CommonTree KW_MACRO552_tree=null;
		CommonTree Identifier553_tree=null;
		CommonTree LPAREN554_tree=null;
		CommonTree RPAREN556_tree=null;
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 pushMsg("create macro statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1582:5: ( KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) )
			// D:\\temp\\antlr\\HiveParser.g:1582:7: KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression
			{
			KW_CREATE550=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMacroStatement8929);  
			stream_KW_CREATE.add(KW_CREATE550);

			KW_TEMPORARY551=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createMacroStatement8931);  
			stream_KW_TEMPORARY.add(KW_TEMPORARY551);

			KW_MACRO552=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_createMacroStatement8933);  
			stream_KW_MACRO.add(KW_MACRO552);

			Identifier553=(Token)match(input,Identifier,FOLLOW_Identifier_in_createMacroStatement8935);  
			stream_Identifier.add(Identifier553);

			LPAREN554=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createMacroStatement8943);  
			stream_LPAREN.add(LPAREN554);

			// D:\\temp\\antlr\\HiveParser.g:1583:14: ( columnNameTypeList )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( ((LA154_0 >= Identifier && LA154_0 <= KW_ANALYZE)||(LA154_0 >= KW_ARCHIVE && LA154_0 <= KW_CASCADE)||LA154_0==KW_CHANGE||(LA154_0 >= KW_CLUSTER && LA154_0 <= KW_COLLECTION)||(LA154_0 >= KW_COLUMNS && LA154_0 <= KW_CREATE)||LA154_0==KW_CUBE||(LA154_0 >= KW_CURSOR && LA154_0 <= KW_DATA)||(LA154_0 >= KW_DATABASES && LA154_0 <= KW_DISABLE)||(LA154_0 >= KW_DISTRIBUTE && LA154_0 <= KW_ELEM_TYPE)||LA154_0==KW_ENABLE||LA154_0==KW_ESCAPED||(LA154_0 >= KW_EXCLUSIVE && LA154_0 <= KW_EXPORT)||(LA154_0 >= KW_EXTERNAL && LA154_0 <= KW_FLOAT)||(LA154_0 >= KW_FOR && LA154_0 <= KW_FORMATTED)||LA154_0==KW_FULL||(LA154_0 >= KW_FUNCTIONS && LA154_0 <= KW_GROUPING)||(LA154_0 >= KW_HOLD_DDLTIME && LA154_0 <= KW_IDXPROPERTIES)||(LA154_0 >= KW_IGNORE && LA154_0 <= KW_JAR)||(LA154_0 >= KW_KEYS && LA154_0 <= KW_LEFT)||(LA154_0 >= KW_LIKE && LA154_0 <= KW_LONG)||(LA154_0 >= KW_MAPJOIN && LA154_0 <= KW_MINUS)||(LA154_0 >= KW_MSCK && LA154_0 <= KW_NOSCAN)||(LA154_0 >= KW_NO_DROP && LA154_0 <= KW_OFFLINE)||LA154_0==KW_OPTION||(LA154_0 >= KW_ORCFILE && LA154_0 <= KW_OUTPUTFORMAT)||(LA154_0 >= KW_OVERWRITE && LA154_0 <= KW_PARQUETFILE)||(LA154_0 >= KW_PARTITION && LA154_0 <= KW_PLUS)||(LA154_0 >= KW_PRETTY && LA154_0 <= KW_RECORDWRITER)||(LA154_0 >= KW_REGEXP && LA154_0 <= KW_SCHEMAS)||(LA154_0 >= KW_SEMI && LA154_0 <= KW_TABLES)||(LA154_0 >= KW_TBLPROPERTIES && LA154_0 <= KW_TEXTFILE)||(LA154_0 >= KW_TIMESTAMP && LA154_0 <= KW_TRANSACTIONS)||(LA154_0 >= KW_TRIGGER && LA154_0 <= KW_UNARCHIVE)||(LA154_0 >= KW_UNDO && LA154_0 <= KW_UNIONTYPE)||(LA154_0 >= KW_UNLOCK && LA154_0 <= KW_VALUE_TYPE)||LA154_0==KW_VIEW||LA154_0==KW_WHILE||LA154_0==KW_WITH) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1583:14: columnNameTypeList
					{
					pushFollow(FOLLOW_columnNameTypeList_in_createMacroStatement8945);
					columnNameTypeList555=columnNameTypeList();
					state._fsp--;

					stream_columnNameTypeList.add(columnNameTypeList555.getTree());
					}
					break;

			}

			RPAREN556=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createMacroStatement8948);  
			stream_RPAREN.add(RPAREN556);

			pushFollow(FOLLOW_expression_in_createMacroStatement8950);
			expression557=expression();
			state._fsp--;

			stream_expression.add(expression557.getTree());
			// AST REWRITE
			// elements: columnNameTypeList, Identifier, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1584:5: -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
			{
				// D:\\temp\\antlr\\HiveParser.g:1584:8: ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEMACRO, "TOK_CREATEMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// D:\\temp\\antlr\\HiveParser.g:1584:37: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createMacroStatement"


	public static class dropMacroStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropMacroStatement"
	// D:\\temp\\antlr\\HiveParser.g:1587:1: dropMacroStatement : KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) ;
	public final HiveParser.dropMacroStatement_return dropMacroStatement() throws RecognitionException {
		HiveParser.dropMacroStatement_return retval = new HiveParser.dropMacroStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP558=null;
		Token KW_TEMPORARY559=null;
		Token KW_MACRO560=null;
		Token Identifier562=null;
		ParserRuleReturnScope ifExists561 =null;

		CommonTree KW_DROP558_tree=null;
		CommonTree KW_TEMPORARY559_tree=null;
		CommonTree KW_MACRO560_tree=null;
		CommonTree Identifier562_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop macro statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1590:5: ( KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1590:7: KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier
			{
			KW_DROP558=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMacroStatement8994);  
			stream_KW_DROP.add(KW_DROP558);

			KW_TEMPORARY559=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropMacroStatement8996);  
			stream_KW_TEMPORARY.add(KW_TEMPORARY559);

			KW_MACRO560=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_dropMacroStatement8998);  
			stream_KW_MACRO.add(KW_MACRO560);

			// D:\\temp\\antlr\\HiveParser.g:1590:37: ( ifExists )?
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==KW_IF) ) {
				alt155=1;
			}
			switch (alt155) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1590:37: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropMacroStatement9000);
					ifExists561=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists561.getTree());
					}
					break;

			}

			Identifier562=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropMacroStatement9003);  
			stream_Identifier.add(Identifier562);

			// AST REWRITE
			// elements: ifExists, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1591:5: -> ^( TOK_DROPMACRO Identifier ( ifExists )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1591:8: ^( TOK_DROPMACRO Identifier ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPMACRO, "TOK_DROPMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// D:\\temp\\antlr\\HiveParser.g:1591:35: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropMacroStatement"


	public static class createViewStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "createViewStatement"
	// D:\\temp\\antlr\\HiveParser.g:1594:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
	public final HiveParser.createViewStatement_return createViewStatement() throws RecognitionException {
		HiveParser.createViewStatement_return retval = new HiveParser.createViewStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_CREATE563=null;
		Token KW_VIEW565=null;
		Token LPAREN567=null;
		Token RPAREN569=null;
		Token KW_AS573=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope orReplace564 =null;
		ParserRuleReturnScope ifNotExists566 =null;
		ParserRuleReturnScope columnNameCommentList568 =null;
		ParserRuleReturnScope tableComment570 =null;
		ParserRuleReturnScope viewPartition571 =null;
		ParserRuleReturnScope tablePropertiesPrefixed572 =null;
		ParserRuleReturnScope selectStatementWithCTE574 =null;

		CommonTree KW_CREATE563_tree=null;
		CommonTree KW_VIEW565_tree=null;
		CommonTree LPAREN567_tree=null;
		CommonTree RPAREN569_tree=null;
		CommonTree KW_AS573_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");


		    pushMsg("create view statement", state);

		try {
			// D:\\temp\\antlr\\HiveParser.g:1599:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
			// D:\\temp\\antlr\\HiveParser.g:1599:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
			{
			KW_CREATE563=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement9045);  
			stream_KW_CREATE.add(KW_CREATE563);

			// D:\\temp\\antlr\\HiveParser.g:1599:17: ( orReplace )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==KW_OR) ) {
				alt156=1;
			}
			switch (alt156) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1599:18: orReplace
					{
					pushFollow(FOLLOW_orReplace_in_createViewStatement9048);
					orReplace564=orReplace();
					state._fsp--;

					stream_orReplace.add(orReplace564.getTree());
					}
					break;

			}

			KW_VIEW565=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement9052);  
			stream_KW_VIEW.add(KW_VIEW565);

			// D:\\temp\\antlr\\HiveParser.g:1599:38: ( ifNotExists )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==KW_IF) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1599:39: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createViewStatement9055);
					ifNotExists566=ifNotExists();
					state._fsp--;

					stream_ifNotExists.add(ifNotExists566.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createViewStatement9061);
			name=tableName();
			state._fsp--;

			stream_tableName.add(name.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1600:9: ( LPAREN columnNameCommentList RPAREN )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==LPAREN) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1600:10: LPAREN columnNameCommentList RPAREN
					{
					LPAREN567=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement9072);  
					stream_LPAREN.add(LPAREN567);

					pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement9074);
					columnNameCommentList568=columnNameCommentList();
					state._fsp--;

					stream_columnNameCommentList.add(columnNameCommentList568.getTree());
					RPAREN569=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement9076);  
					stream_RPAREN.add(RPAREN569);

					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1600:48: ( tableComment )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==KW_COMMENT) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1600:48: tableComment
					{
					pushFollow(FOLLOW_tableComment_in_createViewStatement9080);
					tableComment570=tableComment();
					state._fsp--;

					stream_tableComment.add(tableComment570.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1600:62: ( viewPartition )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==KW_PARTITIONED) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1600:62: viewPartition
					{
					pushFollow(FOLLOW_viewPartition_in_createViewStatement9083);
					viewPartition571=viewPartition();
					state._fsp--;

					stream_viewPartition.add(viewPartition571.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1601:9: ( tablePropertiesPrefixed )?
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==KW_TBLPROPERTIES) ) {
				alt161=1;
			}
			switch (alt161) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1601:9: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement9094);
					tablePropertiesPrefixed572=tablePropertiesPrefixed();
					state._fsp--;

					stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed572.getTree());
					}
					break;

			}

			KW_AS573=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement9105);  
			stream_KW_AS.add(KW_AS573);

			pushFollow(FOLLOW_selectStatementWithCTE_in_createViewStatement9115);
			selectStatementWithCTE574=selectStatementWithCTE();
			state._fsp--;

			stream_selectStatementWithCTE.add(selectStatementWithCTE574.getTree());
			// AST REWRITE
			// elements: name, orReplace, tablePropertiesPrefixed, tableComment, viewPartition, columnNameCommentList, selectStatementWithCTE, ifNotExists
			// token labels: 
			// rule labels: retval, name
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1604:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
			{
				// D:\\temp\\antlr\\HiveParser.g:1604:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1604:31: ( orReplace )?
				if ( stream_orReplace.hasNext() ) {
					adaptor.addChild(root_1, stream_orReplace.nextTree());
				}
				stream_orReplace.reset();

				// D:\\temp\\antlr\\HiveParser.g:1605:10: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// D:\\temp\\antlr\\HiveParser.g:1606:10: ( columnNameCommentList )?
				if ( stream_columnNameCommentList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());
				}
				stream_columnNameCommentList.reset();

				// D:\\temp\\antlr\\HiveParser.g:1607:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// D:\\temp\\antlr\\HiveParser.g:1608:10: ( viewPartition )?
				if ( stream_viewPartition.hasNext() ) {
					adaptor.addChild(root_1, stream_viewPartition.nextTree());
				}
				stream_viewPartition.reset();

				// D:\\temp\\antlr\\HiveParser.g:1609:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createViewStatement"


	public static class viewPartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "viewPartition"
	// D:\\temp\\antlr\\HiveParser.g:1614:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
	public final HiveParser.viewPartition_return viewPartition() throws RecognitionException {
		HiveParser.viewPartition_return retval = new HiveParser.viewPartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITIONED575=null;
		Token KW_ON576=null;
		Token LPAREN577=null;
		Token RPAREN579=null;
		ParserRuleReturnScope columnNameList578 =null;

		CommonTree KW_PARTITIONED575_tree=null;
		CommonTree KW_ON576_tree=null;
		CommonTree LPAREN577_tree=null;
		CommonTree RPAREN579_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("view partition specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1617:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
			// D:\\temp\\antlr\\HiveParser.g:1617:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
			{
			KW_PARTITIONED575=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition9238);  
			stream_KW_PARTITIONED.add(KW_PARTITIONED575);

			KW_ON576=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition9240);  
			stream_KW_ON.add(KW_ON576);

			LPAREN577=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition9242);  
			stream_LPAREN.add(LPAREN577);

			pushFollow(FOLLOW_columnNameList_in_viewPartition9244);
			columnNameList578=columnNameList();
			state._fsp--;

			stream_columnNameList.add(columnNameList578.getTree());
			RPAREN579=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition9246);  
			stream_RPAREN.add(RPAREN579);

			// AST REWRITE
			// elements: columnNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1618:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
			{
				// D:\\temp\\antlr\\HiveParser.g:1618:8: ^( TOK_VIEWPARTCOLS columnNameList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "viewPartition"


	public static class dropViewStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dropViewStatement"
	// D:\\temp\\antlr\\HiveParser.g:1621:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
	public final HiveParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
		HiveParser.dropViewStatement_return retval = new HiveParser.dropViewStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_DROP580=null;
		Token KW_VIEW581=null;
		ParserRuleReturnScope ifExists582 =null;
		ParserRuleReturnScope viewName583 =null;

		CommonTree KW_DROP580_tree=null;
		CommonTree KW_VIEW581_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop view statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1624:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1624:7: KW_DROP KW_VIEW ( ifExists )? viewName
			{
			KW_DROP580=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement9285);  
			stream_KW_DROP.add(KW_DROP580);

			KW_VIEW581=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement9287);  
			stream_KW_VIEW.add(KW_VIEW581);

			// D:\\temp\\antlr\\HiveParser.g:1624:23: ( ifExists )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==KW_IF) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1624:23: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropViewStatement9289);
					ifExists582=ifExists();
					state._fsp--;

					stream_ifExists.add(ifExists582.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_viewName_in_dropViewStatement9292);
			viewName583=viewName();
			state._fsp--;

			stream_viewName.add(viewName583.getTree());
			// AST REWRITE
			// elements: viewName, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1624:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1624:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);
				adaptor.addChild(root_1, stream_viewName.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1624:69: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropViewStatement"


	public static class showFunctionIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showFunctionIdentifier"
	// D:\\temp\\antlr\\HiveParser.g:1627:1: showFunctionIdentifier : ( functionIdentifier | StringLiteral );
	public final HiveParser.showFunctionIdentifier_return showFunctionIdentifier() throws RecognitionException {
		HiveParser.showFunctionIdentifier_return retval = new HiveParser.showFunctionIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token StringLiteral585=null;
		ParserRuleReturnScope functionIdentifier584 =null;

		CommonTree StringLiteral585_tree=null;

		 pushMsg("identifier for show function statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1630:5: ( functionIdentifier | StringLiteral )
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( ((LA163_0 >= Identifier && LA163_0 <= KW_ANALYZE)||(LA163_0 >= KW_ARCHIVE && LA163_0 <= KW_CASCADE)||LA163_0==KW_CHANGE||(LA163_0 >= KW_CLUSTER && LA163_0 <= KW_COLLECTION)||(LA163_0 >= KW_COLUMNS && LA163_0 <= KW_CREATE)||LA163_0==KW_CUBE||(LA163_0 >= KW_CURSOR && LA163_0 <= KW_DATA)||(LA163_0 >= KW_DATABASES && LA163_0 <= KW_DISABLE)||(LA163_0 >= KW_DISTRIBUTE && LA163_0 <= KW_ELEM_TYPE)||LA163_0==KW_ENABLE||LA163_0==KW_ESCAPED||(LA163_0 >= KW_EXCLUSIVE && LA163_0 <= KW_EXPORT)||(LA163_0 >= KW_EXTERNAL && LA163_0 <= KW_FLOAT)||(LA163_0 >= KW_FOR && LA163_0 <= KW_FORMATTED)||LA163_0==KW_FULL||(LA163_0 >= KW_FUNCTIONS && LA163_0 <= KW_GROUPING)||(LA163_0 >= KW_HOLD_DDLTIME && LA163_0 <= KW_IDXPROPERTIES)||(LA163_0 >= KW_IGNORE && LA163_0 <= KW_JAR)||(LA163_0 >= KW_KEYS && LA163_0 <= KW_LEFT)||(LA163_0 >= KW_LIKE && LA163_0 <= KW_LONG)||(LA163_0 >= KW_MAPJOIN && LA163_0 <= KW_MINUS)||(LA163_0 >= KW_MSCK && LA163_0 <= KW_NOSCAN)||(LA163_0 >= KW_NO_DROP && LA163_0 <= KW_OFFLINE)||LA163_0==KW_OPTION||(LA163_0 >= KW_ORCFILE && LA163_0 <= KW_OUTPUTFORMAT)||(LA163_0 >= KW_OVERWRITE && LA163_0 <= KW_PARQUETFILE)||(LA163_0 >= KW_PARTITION && LA163_0 <= KW_PLUS)||(LA163_0 >= KW_PRETTY && LA163_0 <= KW_RECORDWRITER)||(LA163_0 >= KW_REGEXP && LA163_0 <= KW_SCHEMAS)||(LA163_0 >= KW_SEMI && LA163_0 <= KW_TABLES)||(LA163_0 >= KW_TBLPROPERTIES && LA163_0 <= KW_TEXTFILE)||(LA163_0 >= KW_TIMESTAMP && LA163_0 <= KW_TRANSACTIONS)||(LA163_0 >= KW_TRIGGER && LA163_0 <= KW_UNARCHIVE)||(LA163_0 >= KW_UNDO && LA163_0 <= KW_UNIONTYPE)||(LA163_0 >= KW_UNLOCK && LA163_0 <= KW_VALUE_TYPE)||LA163_0==KW_VIEW||LA163_0==KW_WHILE||LA163_0==KW_WITH) ) {
				alt163=1;
			}
			else if ( (LA163_0==StringLiteral) ) {
				alt163=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 163, 0, input);
				throw nvae;
			}

			switch (alt163) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1630:7: functionIdentifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_functionIdentifier_in_showFunctionIdentifier9330);
					functionIdentifier584=functionIdentifier();
					state._fsp--;

					adaptor.addChild(root_0, functionIdentifier584.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1631:7: StringLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					StringLiteral585=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showFunctionIdentifier9338); 
					StringLiteral585_tree = (CommonTree)adaptor.create(StringLiteral585);
					adaptor.addChild(root_0, StringLiteral585_tree);

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showFunctionIdentifier"


	public static class showStmtIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "showStmtIdentifier"
	// D:\\temp\\antlr\\HiveParser.g:1634:1: showStmtIdentifier : ( identifier | StringLiteral );
	public final HiveParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
		HiveParser.showStmtIdentifier_return retval = new HiveParser.showStmtIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token StringLiteral587=null;
		ParserRuleReturnScope identifier586 =null;

		CommonTree StringLiteral587_tree=null;

		 pushMsg("identifier for show statement", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1637:5: ( identifier | StringLiteral )
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( ((LA164_0 >= Identifier && LA164_0 <= KW_ANALYZE)||(LA164_0 >= KW_ARCHIVE && LA164_0 <= KW_CASCADE)||LA164_0==KW_CHANGE||(LA164_0 >= KW_CLUSTER && LA164_0 <= KW_COLLECTION)||(LA164_0 >= KW_COLUMNS && LA164_0 <= KW_CREATE)||LA164_0==KW_CUBE||(LA164_0 >= KW_CURSOR && LA164_0 <= KW_DATA)||(LA164_0 >= KW_DATABASES && LA164_0 <= KW_DISABLE)||(LA164_0 >= KW_DISTRIBUTE && LA164_0 <= KW_ELEM_TYPE)||LA164_0==KW_ENABLE||LA164_0==KW_ESCAPED||(LA164_0 >= KW_EXCLUSIVE && LA164_0 <= KW_EXPORT)||(LA164_0 >= KW_EXTERNAL && LA164_0 <= KW_FLOAT)||(LA164_0 >= KW_FOR && LA164_0 <= KW_FORMATTED)||LA164_0==KW_FULL||(LA164_0 >= KW_FUNCTIONS && LA164_0 <= KW_GROUPING)||(LA164_0 >= KW_HOLD_DDLTIME && LA164_0 <= KW_IDXPROPERTIES)||(LA164_0 >= KW_IGNORE && LA164_0 <= KW_JAR)||(LA164_0 >= KW_KEYS && LA164_0 <= KW_LEFT)||(LA164_0 >= KW_LIKE && LA164_0 <= KW_LONG)||(LA164_0 >= KW_MAPJOIN && LA164_0 <= KW_MINUS)||(LA164_0 >= KW_MSCK && LA164_0 <= KW_NOSCAN)||(LA164_0 >= KW_NO_DROP && LA164_0 <= KW_OFFLINE)||LA164_0==KW_OPTION||(LA164_0 >= KW_ORCFILE && LA164_0 <= KW_OUTPUTFORMAT)||(LA164_0 >= KW_OVERWRITE && LA164_0 <= KW_PARQUETFILE)||(LA164_0 >= KW_PARTITION && LA164_0 <= KW_PLUS)||(LA164_0 >= KW_PRETTY && LA164_0 <= KW_RECORDWRITER)||(LA164_0 >= KW_REGEXP && LA164_0 <= KW_SCHEMAS)||(LA164_0 >= KW_SEMI && LA164_0 <= KW_TABLES)||(LA164_0 >= KW_TBLPROPERTIES && LA164_0 <= KW_TEXTFILE)||(LA164_0 >= KW_TIMESTAMP && LA164_0 <= KW_TRANSACTIONS)||(LA164_0 >= KW_TRIGGER && LA164_0 <= KW_UNARCHIVE)||(LA164_0 >= KW_UNDO && LA164_0 <= KW_UNIONTYPE)||(LA164_0 >= KW_UNLOCK && LA164_0 <= KW_VALUE_TYPE)||LA164_0==KW_VIEW||LA164_0==KW_WHILE||LA164_0==KW_WITH) ) {
				alt164=1;
			}
			else if ( (LA164_0==StringLiteral) ) {
				alt164=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 164, 0, input);
				throw nvae;
			}

			switch (alt164) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1637:7: identifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_showStmtIdentifier9365);
					identifier586=identifier();
					state._fsp--;

					adaptor.addChild(root_0, identifier586.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1638:7: StringLiteral
					{
					root_0 = (CommonTree)adaptor.nil();


					StringLiteral587=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStmtIdentifier9373); 
					StringLiteral587_tree = (CommonTree)adaptor.create(StringLiteral587);
					adaptor.addChild(root_0, StringLiteral587_tree);

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStmtIdentifier"


	public static class tableComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableComment"
	// D:\\temp\\antlr\\HiveParser.g:1641:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
	public final HiveParser.tableComment_return tableComment() throws RecognitionException {
		HiveParser.tableComment_return retval = new HiveParser.tableComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT588=null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT588_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("table's comment", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1644:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
			// D:\\temp\\antlr\\HiveParser.g:1645:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT588=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment9406);  
			stream_KW_COMMENT.add(KW_COMMENT588);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment9410);  
			stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1645:41: -> ^( TOK_TABLECOMMENT $comment)
			{
				// D:\\temp\\antlr\\HiveParser.g:1645:44: ^( TOK_TABLECOMMENT $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableComment"


	public static class tablePartition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePartition"
	// D:\\temp\\antlr\\HiveParser.g:1648:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
	public final HiveParser.tablePartition_return tablePartition() throws RecognitionException {
		HiveParser.tablePartition_return retval = new HiveParser.tablePartition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_PARTITIONED589=null;
		Token KW_BY590=null;
		Token LPAREN591=null;
		Token RPAREN593=null;
		ParserRuleReturnScope columnNameTypeList592 =null;

		CommonTree KW_PARTITIONED589_tree=null;
		CommonTree KW_BY590_tree=null;
		CommonTree LPAREN591_tree=null;
		CommonTree RPAREN593_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 pushMsg("table partition specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1651:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
			// D:\\temp\\antlr\\HiveParser.g:1651:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
			{
			KW_PARTITIONED589=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition9447);  
			stream_KW_PARTITIONED.add(KW_PARTITIONED589);

			KW_BY590=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition9449);  
			stream_KW_BY.add(KW_BY590);

			LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition9451);  
			stream_LPAREN.add(LPAREN591);

			pushFollow(FOLLOW_columnNameTypeList_in_tablePartition9453);
			columnNameTypeList592=columnNameTypeList();
			state._fsp--;

			stream_columnNameTypeList.add(columnNameTypeList592.getTree());
			RPAREN593=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition9455);  
			stream_RPAREN.add(RPAREN593);

			// AST REWRITE
			// elements: columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1652:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
			{
				// D:\\temp\\antlr\\HiveParser.g:1652:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartition"


	public static class tableBuckets_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableBuckets"
	// D:\\temp\\antlr\\HiveParser.g:1655:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) ;
	public final HiveParser.tableBuckets_return tableBuckets() throws RecognitionException {
		HiveParser.tableBuckets_return retval = new HiveParser.tableBuckets_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token num=null;
		Token KW_CLUSTERED594=null;
		Token KW_BY595=null;
		Token LPAREN596=null;
		Token RPAREN597=null;
		Token KW_SORTED598=null;
		Token KW_BY599=null;
		Token LPAREN600=null;
		Token RPAREN601=null;
		Token KW_INTO602=null;
		Token KW_BUCKETS603=null;
		ParserRuleReturnScope bucketCols =null;
		ParserRuleReturnScope sortCols =null;

		CommonTree num_tree=null;
		CommonTree KW_CLUSTERED594_tree=null;
		CommonTree KW_BY595_tree=null;
		CommonTree LPAREN596_tree=null;
		CommonTree RPAREN597_tree=null;
		CommonTree KW_SORTED598_tree=null;
		CommonTree KW_BY599_tree=null;
		CommonTree LPAREN600_tree=null;
		CommonTree RPAREN601_tree=null;
		CommonTree KW_INTO602_tree=null;
		CommonTree KW_BUCKETS603_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");

		 pushMsg("table buckets specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1658:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) )
			// D:\\temp\\antlr\\HiveParser.g:1659:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
			{
			KW_CLUSTERED594=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets9500);  
			stream_KW_CLUSTERED.add(KW_CLUSTERED594);

			KW_BY595=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets9502);  
			stream_KW_BY.add(KW_BY595);

			LPAREN596=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets9504);  
			stream_LPAREN.add(LPAREN596);

			pushFollow(FOLLOW_columnNameList_in_tableBuckets9508);
			bucketCols=columnNameList();
			state._fsp--;

			stream_columnNameList.add(bucketCols.getTree());
			RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets9510);  
			stream_RPAREN.add(RPAREN597);

			// D:\\temp\\antlr\\HiveParser.g:1659:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==KW_SORTED) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1659:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
					{
					KW_SORTED598=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets9513);  
					stream_KW_SORTED.add(KW_SORTED598);

					KW_BY599=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets9515);  
					stream_KW_BY.add(KW_BY599);

					LPAREN600=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets9517);  
					stream_LPAREN.add(LPAREN600);

					pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets9521);
					sortCols=columnNameOrderList();
					state._fsp--;

					stream_columnNameOrderList.add(sortCols.getTree());
					RPAREN601=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets9523);  
					stream_RPAREN.add(RPAREN601);

					}
					break;

			}

			KW_INTO602=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets9527);  
			stream_KW_INTO.add(KW_INTO602);

			num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets9531);  
			stream_Number.add(num);

			KW_BUCKETS603=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets9533);  
			stream_KW_BUCKETS.add(KW_BUCKETS603);

			// AST REWRITE
			// elements: sortCols, num, bucketCols
			// token labels: num
			// rule labels: sortCols, retval, bucketCols
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1660:5: -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
			{
				// D:\\temp\\antlr\\HiveParser.g:1660:8: ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS"), root_1);
				adaptor.addChild(root_1, stream_bucketCols.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1660:40: ( $sortCols)?
				if ( stream_sortCols.hasNext() ) {
					adaptor.addChild(root_1, stream_sortCols.nextTree());
				}
				stream_sortCols.reset();

				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableBuckets"


	public static class tableSkewed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableSkewed"
	// D:\\temp\\antlr\\HiveParser.g:1663:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
	public final HiveParser.tableSkewed_return tableSkewed() throws RecognitionException {
		HiveParser.tableSkewed_return retval = new HiveParser.tableSkewed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_SKEWED604=null;
		Token KW_BY605=null;
		Token LPAREN606=null;
		Token RPAREN607=null;
		Token KW_ON608=null;
		Token LPAREN609=null;
		Token RPAREN610=null;
		ParserRuleReturnScope skewedCols =null;
		ParserRuleReturnScope skewedValues =null;
		ParserRuleReturnScope storedAsDirs611 =null;

		CommonTree KW_SKEWED604_tree=null;
		CommonTree KW_BY605_tree=null;
		CommonTree LPAREN606_tree=null;
		CommonTree RPAREN607_tree=null;
		CommonTree KW_ON608_tree=null;
		CommonTree LPAREN609_tree=null;
		CommonTree RPAREN610_tree=null;
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
		RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");

		 pushMsg("table skewed specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1666:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1667:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )?
			{
			KW_SKEWED604=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed9585);  
			stream_KW_SKEWED.add(KW_SKEWED604);

			KW_BY605=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed9587);  
			stream_KW_BY.add(KW_BY605);

			LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed9589);  
			stream_LPAREN.add(LPAREN606);

			pushFollow(FOLLOW_columnNameList_in_tableSkewed9593);
			skewedCols=columnNameList();
			state._fsp--;

			stream_columnNameList.add(skewedCols.getTree());
			RPAREN607=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed9595);  
			stream_RPAREN.add(RPAREN607);

			KW_ON608=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed9597);  
			stream_KW_ON.add(KW_ON608);

			LPAREN609=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed9599);  
			stream_LPAREN.add(LPAREN609);

			// D:\\temp\\antlr\\HiveParser.g:1667:75: (skewedValues= skewedValueElement )
			// D:\\temp\\antlr\\HiveParser.g:1667:76: skewedValues= skewedValueElement
			{
			pushFollow(FOLLOW_skewedValueElement_in_tableSkewed9604);
			skewedValues=skewedValueElement();
			state._fsp--;

			stream_skewedValueElement.add(skewedValues.getTree());
			}

			RPAREN610=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed9607);  
			stream_RPAREN.add(RPAREN610);

			// D:\\temp\\antlr\\HiveParser.g:1667:116: ( storedAsDirs )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==KW_STORED) ) {
				int LA166_1 = input.LA(2);
				if ( (LA166_1==KW_AS) ) {
					int LA166_7 = input.LA(3);
					if ( (LA166_7==KW_DIRECTORIES) ) {
						alt166=1;
					}
				}
			}
			switch (alt166) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1667:117: storedAsDirs
					{
					pushFollow(FOLLOW_storedAsDirs_in_tableSkewed9610);
					storedAsDirs611=storedAsDirs();
					state._fsp--;

					stream_storedAsDirs.add(storedAsDirs611.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: storedAsDirs, skewedCols, skewedValues
			// token labels: 
			// rule labels: retval, skewedValues, skewedCols
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedValues",skewedValues!=null?skewedValues.getTree():null);
			RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"rule skewedCols",skewedCols!=null?skewedCols.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1668:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1668:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED"), root_1);
				adaptor.addChild(root_1, stream_skewedCols.nextTree());
				adaptor.addChild(root_1, stream_skewedValues.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:1668:52: ( storedAsDirs )?
				if ( stream_storedAsDirs.hasNext() ) {
					adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
				}
				stream_storedAsDirs.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableSkewed"


	public static class rowFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormat"
	// D:\\temp\\antlr\\HiveParser.g:1671:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
	public final HiveParser.rowFormat_return rowFormat() throws RecognitionException {
		HiveParser.rowFormat_return retval = new HiveParser.rowFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope rowFormatSerde612 =null;
		ParserRuleReturnScope rowFormatDelimited613 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg("serde specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1674:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
			int alt167=3;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==KW_ROW) ) {
				int LA167_1 = input.LA(2);
				if ( (LA167_1==KW_FORMAT) ) {
					int LA167_23 = input.LA(3);
					if ( (LA167_23==KW_SERDE) ) {
						alt167=1;
					}
					else if ( (LA167_23==KW_DELIMITED) ) {
						alt167=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 167, 23, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 167, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA167_0==EOF||LA167_0==KW_CLUSTER||LA167_0==KW_DISTRIBUTE||LA167_0==KW_FROM||LA167_0==KW_GROUP||LA167_0==KW_HAVING||LA167_0==KW_INSERT||LA167_0==KW_LATERAL||LA167_0==KW_LIMIT||LA167_0==KW_MAP||LA167_0==KW_ORDER||(LA167_0 >= KW_RECORDREADER && LA167_0 <= KW_REDUCE)||LA167_0==KW_SELECT||LA167_0==KW_SORT||LA167_0==KW_UNION||LA167_0==KW_USING||LA167_0==KW_WHERE||LA167_0==KW_WINDOW||LA167_0==RPAREN) ) {
				alt167=3;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				throw nvae;
			}

			switch (alt167) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1674:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_rowFormat9658);
					rowFormatSerde612=rowFormatSerde();
					state._fsp--;

					stream_rowFormatSerde.add(rowFormatSerde612.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1674:22: -> ^( TOK_SERDE rowFormatSerde )
					{
						// D:\\temp\\antlr\\HiveParser.g:1674:25: ^( TOK_SERDE rowFormatSerde )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1675:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat9674);
					rowFormatDelimited613=rowFormatDelimited();
					state._fsp--;

					stream_rowFormatDelimited.add(rowFormatDelimited613.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1675:26: -> ^( TOK_SERDE rowFormatDelimited )
					{
						// D:\\temp\\antlr\\HiveParser.g:1675:29: ^( TOK_SERDE rowFormatDelimited )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1676:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1676:9: -> ^( TOK_SERDE )
					{
						// D:\\temp\\antlr\\HiveParser.g:1676:12: ^( TOK_SERDE )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormat"


	public static class recordReader_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "recordReader"
	// D:\\temp\\antlr\\HiveParser.g:1679:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
	public final HiveParser.recordReader_return recordReader() throws RecognitionException {
		HiveParser.recordReader_return retval = new HiveParser.recordReader_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RECORDREADER614=null;
		Token StringLiteral615=null;

		CommonTree KW_RECORDREADER614_tree=null;
		CommonTree StringLiteral615_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

		 pushMsg("record reader specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1682:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==KW_RECORDREADER) ) {
				alt168=1;
			}
			else if ( (LA168_0==EOF||LA168_0==KW_CLUSTER||LA168_0==KW_DISTRIBUTE||LA168_0==KW_FROM||LA168_0==KW_GROUP||LA168_0==KW_HAVING||LA168_0==KW_INSERT||LA168_0==KW_LATERAL||LA168_0==KW_LIMIT||LA168_0==KW_MAP||LA168_0==KW_ORDER||LA168_0==KW_REDUCE||LA168_0==KW_SELECT||LA168_0==KW_SORT||LA168_0==KW_UNION||LA168_0==KW_WHERE||LA168_0==KW_WINDOW||LA168_0==RPAREN) ) {
				alt168=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 168, 0, input);
				throw nvae;
			}

			switch (alt168) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1682:7: KW_RECORDREADER StringLiteral
					{
					KW_RECORDREADER614=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader9723);  
					stream_KW_RECORDREADER.add(KW_RECORDREADER614);

					StringLiteral615=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader9725);  
					stream_StringLiteral.add(StringLiteral615);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1682:37: -> ^( TOK_RECORDREADER StringLiteral )
					{
						// D:\\temp\\antlr\\HiveParser.g:1682:40: ^( TOK_RECORDREADER StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1683:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1683:9: -> ^( TOK_RECORDREADER )
					{
						// D:\\temp\\antlr\\HiveParser.g:1683:12: ^( TOK_RECORDREADER )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordReader"


	public static class recordWriter_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "recordWriter"
	// D:\\temp\\antlr\\HiveParser.g:1686:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
	public final HiveParser.recordWriter_return recordWriter() throws RecognitionException {
		HiveParser.recordWriter_return retval = new HiveParser.recordWriter_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_RECORDWRITER616=null;
		Token StringLiteral617=null;

		CommonTree KW_RECORDWRITER616_tree=null;
		CommonTree StringLiteral617_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

		 pushMsg("record writer specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1689:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==KW_RECORDWRITER) ) {
				alt169=1;
			}
			else if ( (LA169_0==KW_USING) ) {
				alt169=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}

			switch (alt169) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1689:7: KW_RECORDWRITER StringLiteral
					{
					KW_RECORDWRITER616=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter9774);  
					stream_KW_RECORDWRITER.add(KW_RECORDWRITER616);

					StringLiteral617=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter9776);  
					stream_StringLiteral.add(StringLiteral617);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1689:37: -> ^( TOK_RECORDWRITER StringLiteral )
					{
						// D:\\temp\\antlr\\HiveParser.g:1689:40: ^( TOK_RECORDWRITER StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1690:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1690:9: -> ^( TOK_RECORDWRITER )
					{
						// D:\\temp\\antlr\\HiveParser.g:1690:12: ^( TOK_RECORDWRITER )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordWriter"


	public static class rowFormatSerde_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormatSerde"
	// D:\\temp\\antlr\\HiveParser.g:1693:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
	public final HiveParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
		HiveParser.rowFormatSerde_return retval = new HiveParser.rowFormatSerde_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token name=null;
		Token KW_ROW618=null;
		Token KW_FORMAT619=null;
		Token KW_SERDE620=null;
		Token KW_WITH621=null;
		Token KW_SERDEPROPERTIES622=null;
		ParserRuleReturnScope serdeprops =null;

		CommonTree name_tree=null;
		CommonTree KW_ROW618_tree=null;
		CommonTree KW_FORMAT619_tree=null;
		CommonTree KW_SERDE620_tree=null;
		CommonTree KW_WITH621_tree=null;
		CommonTree KW_SERDEPROPERTIES622_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("serde format specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1696:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
			// D:\\temp\\antlr\\HiveParser.g:1696:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			{
			KW_ROW618=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde9825);  
			stream_KW_ROW.add(KW_ROW618);

			KW_FORMAT619=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde9827);  
			stream_KW_FORMAT.add(KW_FORMAT619);

			KW_SERDE620=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde9829);  
			stream_KW_SERDE.add(KW_SERDE620);

			name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde9833);  
			stream_StringLiteral.add(name);

			// D:\\temp\\antlr\\HiveParser.g:1696:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==KW_WITH) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1696:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
					{
					KW_WITH621=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde9836);  
					stream_KW_WITH.add(KW_WITH621);

					KW_SERDEPROPERTIES622=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde9838);  
					stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES622);

					pushFollow(FOLLOW_tableProperties_in_rowFormatSerde9842);
					serdeprops=tableProperties();
					state._fsp--;

					stream_tableProperties.add(serdeprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: serdeprops, name
			// token labels: name
			// rule labels: serdeprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1697:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1697:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				// D:\\temp\\antlr\\HiveParser.g:1697:31: ( $serdeprops)?
				if ( stream_serdeprops.hasNext() ) {
					adaptor.addChild(root_1, stream_serdeprops.nextTree());
				}
				stream_serdeprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatSerde"


	public static class rowFormatDelimited_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "rowFormatDelimited"
	// D:\\temp\\antlr\\HiveParser.g:1700:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) ;
	public final HiveParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
		HiveParser.rowFormatDelimited_return retval = new HiveParser.rowFormatDelimited_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ROW623=null;
		Token KW_FORMAT624=null;
		Token KW_DELIMITED625=null;
		ParserRuleReturnScope tableRowFormatFieldIdentifier626 =null;
		ParserRuleReturnScope tableRowFormatCollItemsIdentifier627 =null;
		ParserRuleReturnScope tableRowFormatMapKeysIdentifier628 =null;
		ParserRuleReturnScope tableRowFormatLinesIdentifier629 =null;
		ParserRuleReturnScope tableRowNullFormat630 =null;

		CommonTree KW_ROW623_tree=null;
		CommonTree KW_FORMAT624_tree=null;
		CommonTree KW_DELIMITED625_tree=null;
		RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");
		RewriteRuleSubtreeStream stream_tableRowNullFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowNullFormat");

		 pushMsg("serde properties specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1703:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) )
			// D:\\temp\\antlr\\HiveParser.g:1704:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )?
			{
			KW_ROW623=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited9894);  
			stream_KW_ROW.add(KW_ROW623);

			KW_FORMAT624=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited9896);  
			stream_KW_FORMAT.add(KW_FORMAT624);

			KW_DELIMITED625=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited9898);  
			stream_KW_DELIMITED.add(KW_DELIMITED625);

			// D:\\temp\\antlr\\HiveParser.g:1704:37: ( tableRowFormatFieldIdentifier )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==KW_FIELDS) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1704:37: tableRowFormatFieldIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited9900);
					tableRowFormatFieldIdentifier626=tableRowFormatFieldIdentifier();
					state._fsp--;

					stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier626.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1704:68: ( tableRowFormatCollItemsIdentifier )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==KW_COLLECTION) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1704:68: tableRowFormatCollItemsIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited9903);
					tableRowFormatCollItemsIdentifier627=tableRowFormatCollItemsIdentifier();
					state._fsp--;

					stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier627.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1704:103: ( tableRowFormatMapKeysIdentifier )?
			int alt173=2;
			alt173 = dfa173.predict(input);
			switch (alt173) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1704:103: tableRowFormatMapKeysIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited9906);
					tableRowFormatMapKeysIdentifier628=tableRowFormatMapKeysIdentifier();
					state._fsp--;

					stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier628.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1704:136: ( tableRowFormatLinesIdentifier )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==KW_LINES) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1704:136: tableRowFormatLinesIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited9909);
					tableRowFormatLinesIdentifier629=tableRowFormatLinesIdentifier();
					state._fsp--;

					stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier629.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:1704:167: ( tableRowNullFormat )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==KW_NULL) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1704:167: tableRowNullFormat
					{
					pushFollow(FOLLOW_tableRowNullFormat_in_rowFormatDelimited9912);
					tableRowNullFormat630=tableRowNullFormat();
					state._fsp--;

					stream_tableRowNullFormat.add(tableRowNullFormat630.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableRowNullFormat, tableRowFormatCollItemsIdentifier, tableRowFormatMapKeysIdentifier, tableRowFormatFieldIdentifier, tableRowFormatLinesIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1705:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1705:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);
				// D:\\temp\\antlr\\HiveParser.g:1705:25: ( tableRowFormatFieldIdentifier )?
				if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());
				}
				stream_tableRowFormatFieldIdentifier.reset();

				// D:\\temp\\antlr\\HiveParser.g:1705:56: ( tableRowFormatCollItemsIdentifier )?
				if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());
				}
				stream_tableRowFormatCollItemsIdentifier.reset();

				// D:\\temp\\antlr\\HiveParser.g:1705:91: ( tableRowFormatMapKeysIdentifier )?
				if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());
				}
				stream_tableRowFormatMapKeysIdentifier.reset();

				// D:\\temp\\antlr\\HiveParser.g:1705:124: ( tableRowFormatLinesIdentifier )?
				if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());
				}
				stream_tableRowFormatLinesIdentifier.reset();

				// D:\\temp\\antlr\\HiveParser.g:1705:155: ( tableRowNullFormat )?
				if ( stream_tableRowNullFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowNullFormat.nextTree());
				}
				stream_tableRowNullFormat.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatDelimited"


	public static class tableRowFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormat"
	// D:\\temp\\antlr\\HiveParser.g:1708:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
	public final HiveParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
		HiveParser.tableRowFormat_return retval = new HiveParser.tableRowFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope rowFormatDelimited631 =null;
		ParserRuleReturnScope rowFormatSerde632 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg("table row format specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1711:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==KW_ROW) ) {
				int LA176_1 = input.LA(2);
				if ( (LA176_1==KW_FORMAT) ) {
					int LA176_2 = input.LA(3);
					if ( (LA176_2==KW_DELIMITED) ) {
						alt176=1;
					}
					else if ( (LA176_2==KW_SERDE) ) {
						alt176=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 176, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 176, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 176, 0, input);
				throw nvae;
			}

			switch (alt176) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1712:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat9971);
					rowFormatDelimited631=rowFormatDelimited();
					state._fsp--;

					stream_rowFormatDelimited.add(rowFormatDelimited631.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1713:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
					{
						// D:\\temp\\antlr\\HiveParser.g:1713:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1714:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat9991);
					rowFormatSerde632=rowFormatSerde();
					state._fsp--;

					stream_rowFormatSerde.add(rowFormatSerde632.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1715:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
					{
						// D:\\temp\\antlr\\HiveParser.g:1715:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormat"


	public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesPrefixed"
	// D:\\temp\\antlr\\HiveParser.g:1718:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
	public final HiveParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
		HiveParser.tablePropertiesPrefixed_return retval = new HiveParser.tablePropertiesPrefixed_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_TBLPROPERTIES633=null;
		ParserRuleReturnScope tableProperties634 =null;

		CommonTree KW_TBLPROPERTIES633_tree=null;

		 pushMsg("table properties with prefix", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1721:5: ( KW_TBLPROPERTIES ! tableProperties )
			// D:\\temp\\antlr\\HiveParser.g:1722:9: KW_TBLPROPERTIES ! tableProperties
			{
			root_0 = (CommonTree)adaptor.nil();


			KW_TBLPROPERTIES633=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed10038); 
			pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed10041);
			tableProperties634=tableProperties();
			state._fsp--;

			adaptor.addChild(root_0, tableProperties634.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesPrefixed"


	public static class tableProperties_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableProperties"
	// D:\\temp\\antlr\\HiveParser.g:1725:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
	public final HiveParser.tableProperties_return tableProperties() throws RecognitionException {
		HiveParser.tableProperties_return retval = new HiveParser.tableProperties_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN635=null;
		Token RPAREN637=null;
		ParserRuleReturnScope tablePropertiesList636 =null;

		CommonTree LPAREN635_tree=null;
		CommonTree RPAREN637_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");

		 pushMsg("table properties", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1728:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
			// D:\\temp\\antlr\\HiveParser.g:1729:7: LPAREN tablePropertiesList RPAREN
			{
			LPAREN635=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties10074);  
			stream_LPAREN.add(LPAREN635);

			pushFollow(FOLLOW_tablePropertiesList_in_tableProperties10076);
			tablePropertiesList636=tablePropertiesList();
			state._fsp--;

			stream_tablePropertiesList.add(tablePropertiesList636.getTree());
			RPAREN637=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties10078);  
			stream_RPAREN.add(RPAREN637);

			// AST REWRITE
			// elements: tablePropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1729:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
			{
				// D:\\temp\\antlr\\HiveParser.g:1729:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableProperties"


	public static class tablePropertiesList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesList"
	// D:\\temp\\antlr\\HiveParser.g:1732:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );
	public final HiveParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
		HiveParser.tablePropertiesList_return retval = new HiveParser.tablePropertiesList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA639=null;
		Token COMMA642=null;
		ParserRuleReturnScope keyValueProperty638 =null;
		ParserRuleReturnScope keyValueProperty640 =null;
		ParserRuleReturnScope keyProperty641 =null;
		ParserRuleReturnScope keyProperty643 =null;

		CommonTree COMMA639_tree=null;
		CommonTree COMMA642_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
		RewriteRuleSubtreeStream stream_keyProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyProperty");

		 pushMsg("table properties list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1735:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) )
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==StringLiteral) ) {
				int LA179_1 = input.LA(2);
				if ( (LA179_1==EQUAL) ) {
					alt179=1;
				}
				else if ( (LA179_1==COMMA||LA179_1==RPAREN) ) {
					alt179=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 179, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 179, 0, input);
				throw nvae;
			}

			switch (alt179) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1736:7: keyValueProperty ( COMMA keyValueProperty )*
					{
					pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList10119);
					keyValueProperty638=keyValueProperty();
					state._fsp--;

					stream_keyValueProperty.add(keyValueProperty638.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1736:24: ( COMMA keyValueProperty )*
					loop177:
					while (true) {
						int alt177=2;
						int LA177_0 = input.LA(1);
						if ( (LA177_0==COMMA) ) {
							alt177=1;
						}

						switch (alt177) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1736:25: COMMA keyValueProperty
							{
							COMMA639=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList10122);  
							stream_COMMA.add(COMMA639);

							pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList10124);
							keyValueProperty640=keyValueProperty();
							state._fsp--;

							stream_keyValueProperty.add(keyValueProperty640.getTree());
							}
							break;

						default :
							break loop177;
						}
					}

					// AST REWRITE
					// elements: keyValueProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1736:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
					{
						// D:\\temp\\antlr\\HiveParser.g:1736:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyValueProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyValueProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
						}
						stream_keyValueProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1738:7: keyProperty ( COMMA keyProperty )*
					{
					pushFollow(FOLLOW_keyProperty_in_tablePropertiesList10149);
					keyProperty641=keyProperty();
					state._fsp--;

					stream_keyProperty.add(keyProperty641.getTree());
					// D:\\temp\\antlr\\HiveParser.g:1738:19: ( COMMA keyProperty )*
					loop178:
					while (true) {
						int alt178=2;
						int LA178_0 = input.LA(1);
						if ( (LA178_0==COMMA) ) {
							alt178=1;
						}

						switch (alt178) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1738:20: COMMA keyProperty
							{
							COMMA642=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList10152);  
							stream_COMMA.add(COMMA642);

							pushFollow(FOLLOW_keyProperty_in_tablePropertiesList10154);
							keyProperty643=keyProperty();
							state._fsp--;

							stream_keyProperty.add(keyProperty643.getTree());
							}
							break;

						default :
							break loop178;
						}
					}

					// AST REWRITE
					// elements: keyProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1738:40: -> ^( TOK_TABLEPROPLIST ( keyProperty )+ )
					{
						// D:\\temp\\antlr\\HiveParser.g:1738:43: ^( TOK_TABLEPROPLIST ( keyProperty )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyProperty.nextTree());
						}
						stream_keyProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesList"


	public static class keyValueProperty_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyValueProperty"
	// D:\\temp\\antlr\\HiveParser.g:1741:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
	public final HiveParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
		HiveParser.keyValueProperty_return retval = new HiveParser.keyValueProperty_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token key=null;
		Token value=null;
		Token EQUAL644=null;

		CommonTree key_tree=null;
		CommonTree value_tree=null;
		CommonTree EQUAL644_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

		 pushMsg("specifying key/value property", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1744:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
			// D:\\temp\\antlr\\HiveParser.g:1745:7: key= StringLiteral EQUAL value= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty10200);  
			stream_StringLiteral.add(key);

			EQUAL644=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty10202);  
			stream_EQUAL.add(EQUAL644);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty10206);  
			stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: value, key
			// token labels: value, key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1745:51: -> ^( TOK_TABLEPROPERTY $key $value)
			{
				// D:\\temp\\antlr\\HiveParser.g:1745:54: ^( TOK_TABLEPROPERTY $key $value)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyValueProperty"


	public static class keyProperty_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyProperty"
	// D:\\temp\\antlr\\HiveParser.g:1748:1: keyProperty : key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) ;
	public final HiveParser.keyProperty_return keyProperty() throws RecognitionException {
		HiveParser.keyProperty_return retval = new HiveParser.keyProperty_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token key=null;

		CommonTree key_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		 pushMsg("specifying key property", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1751:5: (key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) )
			// D:\\temp\\antlr\\HiveParser.g:1752:7: key= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyProperty10253);  
			stream_StringLiteral.add(key);

			// AST REWRITE
			// elements: key
			// token labels: key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1752:25: -> ^( TOK_TABLEPROPERTY $key TOK_NULL )
			{
				// D:\\temp\\antlr\\HiveParser.g:1752:28: ^( TOK_TABLEPROPERTY $key TOK_NULL )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL"));
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyProperty"


	public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatFieldIdentifier"
	// D:\\temp\\antlr\\HiveParser.g:1755:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
	public final HiveParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatFieldIdentifier_return retval = new HiveParser.tableRowFormatFieldIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token fldIdnt=null;
		Token fldEscape=null;
		Token KW_FIELDS645=null;
		Token KW_TERMINATED646=null;
		Token KW_BY647=null;
		Token KW_ESCAPED648=null;
		Token KW_BY649=null;

		CommonTree fldIdnt_tree=null;
		CommonTree fldEscape_tree=null;
		CommonTree KW_FIELDS645_tree=null;
		CommonTree KW_TERMINATED646_tree=null;
		CommonTree KW_BY647_tree=null;
		CommonTree KW_ESCAPED648_tree=null;
		CommonTree KW_BY649_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
		RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 pushMsg("table row format's field separator", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1758:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
			// D:\\temp\\antlr\\HiveParser.g:1759:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			{
			KW_FIELDS645=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier10297);  
			stream_KW_FIELDS.add(KW_FIELDS645);

			KW_TERMINATED646=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier10299);  
			stream_KW_TERMINATED.add(KW_TERMINATED646);

			KW_BY647=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10301);  
			stream_KW_BY.add(KW_BY647);

			fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10305);  
			stream_StringLiteral.add(fldIdnt);

			// D:\\temp\\antlr\\HiveParser.g:1759:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			int alt180=2;
			int LA180_0 = input.LA(1);
			if ( (LA180_0==KW_ESCAPED) ) {
				alt180=1;
			}
			switch (alt180) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1759:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
					{
					KW_ESCAPED648=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier10308);  
					stream_KW_ESCAPED.add(KW_ESCAPED648);

					KW_BY649=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10310);  
					stream_KW_BY.add(KW_BY649);

					fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10314);  
					stream_StringLiteral.add(fldEscape);

					}
					break;

			}

			// AST REWRITE
			// elements: fldIdnt, fldEscape
			// token labels: fldEscape, fldIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
			RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1760:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1760:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);
				adaptor.addChild(root_1, stream_fldIdnt.nextNode());
				// D:\\temp\\antlr\\HiveParser.g:1760:44: ( $fldEscape)?
				if ( stream_fldEscape.hasNext() ) {
					adaptor.addChild(root_1, stream_fldEscape.nextNode());
				}
				stream_fldEscape.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatFieldIdentifier"


	public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatCollItemsIdentifier"
	// D:\\temp\\antlr\\HiveParser.g:1763:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
	public final HiveParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatCollItemsIdentifier_return retval = new HiveParser.tableRowFormatCollItemsIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token collIdnt=null;
		Token KW_COLLECTION650=null;
		Token KW_ITEMS651=null;
		Token KW_TERMINATED652=null;
		Token KW_BY653=null;

		CommonTree collIdnt_tree=null;
		CommonTree KW_COLLECTION650_tree=null;
		CommonTree KW_ITEMS651_tree=null;
		CommonTree KW_TERMINATED652_tree=null;
		CommonTree KW_BY653_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
		RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 pushMsg("table row format's column separator", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1766:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
			// D:\\temp\\antlr\\HiveParser.g:1767:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
			{
			KW_COLLECTION650=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier10366);  
			stream_KW_COLLECTION.add(KW_COLLECTION650);

			KW_ITEMS651=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier10368);  
			stream_KW_ITEMS.add(KW_ITEMS651);

			KW_TERMINATED652=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier10370);  
			stream_KW_TERMINATED.add(KW_TERMINATED652);

			KW_BY653=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier10372);  
			stream_KW_BY.add(KW_BY653);

			collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier10376);  
			stream_StringLiteral.add(collIdnt);

			// AST REWRITE
			// elements: collIdnt
			// token labels: collIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1768:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
			{
				// D:\\temp\\antlr\\HiveParser.g:1768:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);
				adaptor.addChild(root_1, stream_collIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatCollItemsIdentifier"


	public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatMapKeysIdentifier"
	// D:\\temp\\antlr\\HiveParser.g:1771:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
	public final HiveParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatMapKeysIdentifier_return retval = new HiveParser.tableRowFormatMapKeysIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token mapKeysIdnt=null;
		Token KW_MAP654=null;
		Token KW_KEYS655=null;
		Token KW_TERMINATED656=null;
		Token KW_BY657=null;

		CommonTree mapKeysIdnt_tree=null;
		CommonTree KW_MAP654_tree=null;
		CommonTree KW_KEYS655_tree=null;
		CommonTree KW_TERMINATED656_tree=null;
		CommonTree KW_BY657_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 pushMsg("table row format's map key separator", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1774:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
			// D:\\temp\\antlr\\HiveParser.g:1775:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
			{
			KW_MAP654=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier10422);  
			stream_KW_MAP.add(KW_MAP654);

			KW_KEYS655=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier10424);  
			stream_KW_KEYS.add(KW_KEYS655);

			KW_TERMINATED656=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier10426);  
			stream_KW_TERMINATED.add(KW_TERMINATED656);

			KW_BY657=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier10428);  
			stream_KW_BY.add(KW_BY657);

			mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier10432);  
			stream_StringLiteral.add(mapKeysIdnt);

			// AST REWRITE
			// elements: mapKeysIdnt
			// token labels: mapKeysIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1776:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
			{
				// D:\\temp\\antlr\\HiveParser.g:1776:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);
				adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatMapKeysIdentifier"


	public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatLinesIdentifier"
	// D:\\temp\\antlr\\HiveParser.g:1779:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
	public final HiveParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
		HiveParser.tableRowFormatLinesIdentifier_return retval = new HiveParser.tableRowFormatLinesIdentifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token linesIdnt=null;
		Token KW_LINES658=null;
		Token KW_TERMINATED659=null;
		Token KW_BY660=null;

		CommonTree linesIdnt_tree=null;
		CommonTree KW_LINES658_tree=null;
		CommonTree KW_TERMINATED659_tree=null;
		CommonTree KW_BY660_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

		 pushMsg("table row format's line separator", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1782:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
			// D:\\temp\\antlr\\HiveParser.g:1783:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
			{
			KW_LINES658=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier10478);  
			stream_KW_LINES.add(KW_LINES658);

			KW_TERMINATED659=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier10480);  
			stream_KW_TERMINATED.add(KW_TERMINATED659);

			KW_BY660=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier10482);  
			stream_KW_BY.add(KW_BY660);

			linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier10486);  
			stream_StringLiteral.add(linesIdnt);

			// AST REWRITE
			// elements: linesIdnt
			// token labels: linesIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1784:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
			{
				// D:\\temp\\antlr\\HiveParser.g:1784:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);
				adaptor.addChild(root_1, stream_linesIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatLinesIdentifier"


	public static class tableRowNullFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableRowNullFormat"
	// D:\\temp\\antlr\\HiveParser.g:1787:1: tableRowNullFormat : KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) ;
	public final HiveParser.tableRowNullFormat_return tableRowNullFormat() throws RecognitionException {
		HiveParser.tableRowNullFormat_return retval = new HiveParser.tableRowNullFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token nullIdnt=null;
		Token KW_NULL661=null;
		Token KW_DEFINED662=null;
		Token KW_AS663=null;

		CommonTree nullIdnt_tree=null;
		CommonTree KW_NULL661_tree=null;
		CommonTree KW_DEFINED662_tree=null;
		CommonTree KW_AS663_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
		RewriteRuleTokenStream stream_KW_DEFINED=new RewriteRuleTokenStream(adaptor,"token KW_DEFINED");

		 pushMsg("table row format's null specifier", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1790:5: ( KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) )
			// D:\\temp\\antlr\\HiveParser.g:1791:7: KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral
			{
			KW_NULL661=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_tableRowNullFormat10532);  
			stream_KW_NULL.add(KW_NULL661);

			KW_DEFINED662=(Token)match(input,KW_DEFINED,FOLLOW_KW_DEFINED_in_tableRowNullFormat10534);  
			stream_KW_DEFINED.add(KW_DEFINED662);

			KW_AS663=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableRowNullFormat10536);  
			stream_KW_AS.add(KW_AS663);

			nullIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowNullFormat10540);  
			stream_StringLiteral.add(nullIdnt);

			// AST REWRITE
			// elements: nullIdnt
			// token labels: nullIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_nullIdnt=new RewriteRuleTokenStream(adaptor,"token nullIdnt",nullIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1792:5: -> ^( TOK_TABLEROWFORMATNULL $nullIdnt)
			{
				// D:\\temp\\antlr\\HiveParser.g:1792:8: ^( TOK_TABLEROWFORMATNULL $nullIdnt)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEROWFORMATNULL, "TOK_TABLEROWFORMATNULL"), root_1);
				adaptor.addChild(root_1, stream_nullIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowNullFormat"


	public static class tableFileFormat_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableFileFormat"
	// D:\\temp\\antlr\\HiveParser.g:1794:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_ORCFILE -> TOK_TBLORCFILE | KW_STORED KW_AS KW_PARQUETFILE -> TOK_TBLPARQUETFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
		HiveParser.tableFileFormat_return retval = new HiveParser.tableFileFormat_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token inDriver=null;
		Token outDriver=null;
		Token storageHandler=null;
		Token KW_STORED664=null;
		Token KW_AS665=null;
		Token KW_SEQUENCEFILE666=null;
		Token KW_STORED667=null;
		Token KW_AS668=null;
		Token KW_TEXTFILE669=null;
		Token KW_STORED670=null;
		Token KW_AS671=null;
		Token KW_RCFILE672=null;
		Token KW_STORED673=null;
		Token KW_AS674=null;
		Token KW_ORCFILE675=null;
		Token KW_STORED676=null;
		Token KW_AS677=null;
		Token KW_PARQUETFILE678=null;
		Token KW_STORED679=null;
		Token KW_AS680=null;
		Token KW_INPUTFORMAT681=null;
		Token KW_OUTPUTFORMAT682=null;
		Token KW_INPUTDRIVER683=null;
		Token KW_OUTPUTDRIVER684=null;
		Token KW_STORED685=null;
		Token KW_BY686=null;
		Token KW_WITH687=null;
		Token KW_SERDEPROPERTIES688=null;
		Token KW_STORED689=null;
		Token KW_AS690=null;
		ParserRuleReturnScope serdeprops =null;
		ParserRuleReturnScope genericSpec =null;

		CommonTree inFmt_tree=null;
		CommonTree outFmt_tree=null;
		CommonTree inDriver_tree=null;
		CommonTree outDriver_tree=null;
		CommonTree storageHandler_tree=null;
		CommonTree KW_STORED664_tree=null;
		CommonTree KW_AS665_tree=null;
		CommonTree KW_SEQUENCEFILE666_tree=null;
		CommonTree KW_STORED667_tree=null;
		CommonTree KW_AS668_tree=null;
		CommonTree KW_TEXTFILE669_tree=null;
		CommonTree KW_STORED670_tree=null;
		CommonTree KW_AS671_tree=null;
		CommonTree KW_RCFILE672_tree=null;
		CommonTree KW_STORED673_tree=null;
		CommonTree KW_AS674_tree=null;
		CommonTree KW_ORCFILE675_tree=null;
		CommonTree KW_STORED676_tree=null;
		CommonTree KW_AS677_tree=null;
		CommonTree KW_PARQUETFILE678_tree=null;
		CommonTree KW_STORED679_tree=null;
		CommonTree KW_AS680_tree=null;
		CommonTree KW_INPUTFORMAT681_tree=null;
		CommonTree KW_OUTPUTFORMAT682_tree=null;
		CommonTree KW_INPUTDRIVER683_tree=null;
		CommonTree KW_OUTPUTDRIVER684_tree=null;
		CommonTree KW_STORED685_tree=null;
		CommonTree KW_BY686_tree=null;
		CommonTree KW_WITH687_tree=null;
		CommonTree KW_SERDEPROPERTIES688_tree=null;
		CommonTree KW_STORED689_tree=null;
		CommonTree KW_AS690_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_ORCFILE=new RewriteRuleTokenStream(adaptor,"token KW_ORCFILE");
		RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_KW_PARQUETFILE=new RewriteRuleTokenStream(adaptor,"token KW_PARQUETFILE");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("table file format specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1797:5: ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_ORCFILE -> TOK_TBLORCFILE | KW_STORED KW_AS KW_PARQUETFILE -> TOK_TBLPARQUETFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt183=8;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==KW_STORED) ) {
				int LA183_1 = input.LA(2);
				if ( (LA183_1==KW_AS) ) {
					switch ( input.LA(3) ) {
					case KW_SEQUENCEFILE:
						{
						alt183=1;
						}
						break;
					case KW_TEXTFILE:
						{
						alt183=2;
						}
						break;
					case KW_RCFILE:
						{
						alt183=3;
						}
						break;
					case KW_ORCFILE:
						{
						alt183=4;
						}
						break;
					case KW_PARQUETFILE:
						{
						alt183=5;
						}
						break;
					case KW_INPUTFORMAT:
						{
						alt183=6;
						}
						break;
					case Identifier:
					case KW_ADD:
					case KW_ADMIN:
					case KW_AFTER:
					case KW_ALL:
					case KW_ALTER:
					case KW_ANALYZE:
					case KW_ARCHIVE:
					case KW_ARRAY:
					case KW_AS:
					case KW_ASC:
					case KW_BEFORE:
					case KW_BETWEEN:
					case KW_BIGINT:
					case KW_BINARY:
					case KW_BOOLEAN:
					case KW_BOTH:
					case KW_BUCKET:
					case KW_BUCKETS:
					case KW_BY:
					case KW_CASCADE:
					case KW_CHANGE:
					case KW_CLUSTER:
					case KW_CLUSTERED:
					case KW_CLUSTERSTATUS:
					case KW_COLLECTION:
					case KW_COLUMNS:
					case KW_COMMENT:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_COMPUTE:
					case KW_CONCATENATE:
					case KW_CONTINUE:
					case KW_CREATE:
					case KW_CUBE:
					case KW_CURSOR:
					case KW_DATA:
					case KW_DATABASES:
					case KW_DATE:
					case KW_DATETIME:
					case KW_DBPROPERTIES:
					case KW_DECIMAL:
					case KW_DEFAULT:
					case KW_DEFERRED:
					case KW_DEFINED:
					case KW_DELETE:
					case KW_DELIMITED:
					case KW_DEPENDENCY:
					case KW_DESC:
					case KW_DESCRIBE:
					case KW_DIRECTORIES:
					case KW_DIRECTORY:
					case KW_DISABLE:
					case KW_DISTRIBUTE:
					case KW_DOUBLE:
					case KW_DROP:
					case KW_ELEM_TYPE:
					case KW_ENABLE:
					case KW_ESCAPED:
					case KW_EXCLUSIVE:
					case KW_EXISTS:
					case KW_EXPLAIN:
					case KW_EXPORT:
					case KW_EXTERNAL:
					case KW_FALSE:
					case KW_FETCH:
					case KW_FIELDS:
					case KW_FILE:
					case KW_FILEFORMAT:
					case KW_FIRST:
					case KW_FLOAT:
					case KW_FOR:
					case KW_FORMAT:
					case KW_FORMATTED:
					case KW_FULL:
					case KW_FUNCTIONS:
					case KW_GRANT:
					case KW_GROUP:
					case KW_GROUPING:
					case KW_HOLD_DDLTIME:
					case KW_IDXPROPERTIES:
					case KW_IGNORE:
					case KW_IMPORT:
					case KW_IN:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_INNER:
					case KW_INPATH:
					case KW_INPUTDRIVER:
					case KW_INSERT:
					case KW_INT:
					case KW_INTERSECT:
					case KW_INTO:
					case KW_IS:
					case KW_ITEMS:
					case KW_JAR:
					case KW_KEYS:
					case KW_KEY_TYPE:
					case KW_LATERAL:
					case KW_LEFT:
					case KW_LIKE:
					case KW_LIMIT:
					case KW_LINES:
					case KW_LOAD:
					case KW_LOCAL:
					case KW_LOCATION:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_LOGICAL:
					case KW_LONG:
					case KW_MAPJOIN:
					case KW_MATERIALIZED:
					case KW_MINUS:
					case KW_MSCK:
					case KW_NONE:
					case KW_NOSCAN:
					case KW_NO_DROP:
					case KW_NULL:
					case KW_OF:
					case KW_OFFLINE:
					case KW_OPTION:
					case KW_ORDER:
					case KW_OUT:
					case KW_OUTER:
					case KW_OUTPUTDRIVER:
					case KW_OUTPUTFORMAT:
					case KW_OVERWRITE:
					case KW_OWNER:
					case KW_PARTITION:
					case KW_PARTITIONED:
					case KW_PARTITIONS:
					case KW_PERCENT:
					case KW_PLUS:
					case KW_PRETTY:
					case KW_PRINCIPALS:
					case KW_PROCEDURE:
					case KW_PROTECTION:
					case KW_PURGE:
					case KW_RANGE:
					case KW_READ:
					case KW_READONLY:
					case KW_READS:
					case KW_REBUILD:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_REGEXP:
					case KW_RENAME:
					case KW_REPAIR:
					case KW_REPLACE:
					case KW_RESTRICT:
					case KW_REVOKE:
					case KW_RIGHT:
					case KW_RLIKE:
					case KW_ROLE:
					case KW_ROLES:
					case KW_ROLLUP:
					case KW_ROW:
					case KW_ROWS:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_SEMI:
					case KW_SERDE:
					case KW_SERDEPROPERTIES:
					case KW_SET:
					case KW_SETS:
					case KW_SHARED:
					case KW_SHOW:
					case KW_SHOW_DATABASE:
					case KW_SKEWED:
					case KW_SMALLINT:
					case KW_SORT:
					case KW_SORTED:
					case KW_SSL:
					case KW_STATISTICS:
					case KW_STORED:
					case KW_STREAMTABLE:
					case KW_STRING:
					case KW_STRUCT:
					case KW_TABLE:
					case KW_TABLES:
					case KW_TBLPROPERTIES:
					case KW_TEMPORARY:
					case KW_TERMINATED:
					case KW_TIMESTAMP:
					case KW_TINYINT:
					case KW_TO:
					case KW_TOUCH:
					case KW_TRANSACTIONS:
					case KW_TRIGGER:
					case KW_TRUE:
					case KW_TRUNCATE:
					case KW_UNARCHIVE:
					case KW_UNDO:
					case KW_UNION:
					case KW_UNIONTYPE:
					case KW_UNLOCK:
					case KW_UNSET:
					case KW_UNSIGNED:
					case KW_UPDATE:
					case KW_USE:
					case KW_USER:
					case KW_USING:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_VALUE_TYPE:
					case KW_VIEW:
					case KW_WHILE:
					case KW_WITH:
						{
						alt183=8;
						}
						break;
					default:
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 183, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}
				else if ( (LA183_1==KW_BY) ) {
					alt183=7;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 183, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 183, 0, input);
				throw nvae;
			}

			switch (alt183) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1798:7: KW_STORED KW_AS KW_SEQUENCEFILE
					{
					KW_STORED664=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10585);  
					stream_KW_STORED.add(KW_STORED664);

					KW_AS665=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat10587);  
					stream_KW_AS.add(KW_AS665);

					KW_SEQUENCEFILE666=(Token)match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat10589);  
					stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE666);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1798:40: -> TOK_TBLSEQUENCEFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1799:9: KW_STORED KW_AS KW_TEXTFILE
					{
					KW_STORED667=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10604);  
					stream_KW_STORED.add(KW_STORED667);

					KW_AS668=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat10606);  
					stream_KW_AS.add(KW_AS668);

					KW_TEXTFILE669=(Token)match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_tableFileFormat10608);  
					stream_KW_TEXTFILE.add(KW_TEXTFILE669);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1799:38: -> TOK_TBLTEXTFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1800:9: KW_STORED KW_AS KW_RCFILE
					{
					KW_STORED670=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10623);  
					stream_KW_STORED.add(KW_STORED670);

					KW_AS671=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat10625);  
					stream_KW_AS.add(KW_AS671);

					KW_RCFILE672=(Token)match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_tableFileFormat10627);  
					stream_KW_RCFILE.add(KW_RCFILE672);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1800:36: -> TOK_TBLRCFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:1801:9: KW_STORED KW_AS KW_ORCFILE
					{
					KW_STORED673=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10642);  
					stream_KW_STORED.add(KW_STORED673);

					KW_AS674=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat10644);  
					stream_KW_AS.add(KW_AS674);

					KW_ORCFILE675=(Token)match(input,KW_ORCFILE,FOLLOW_KW_ORCFILE_in_tableFileFormat10646);  
					stream_KW_ORCFILE.add(KW_ORCFILE675);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1801:36: -> TOK_TBLORCFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLORCFILE, "TOK_TBLORCFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:1802:9: KW_STORED KW_AS KW_PARQUETFILE
					{
					KW_STORED676=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10660);  
					stream_KW_STORED.add(KW_STORED676);

					KW_AS677=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat10662);  
					stream_KW_AS.add(KW_AS677);

					KW_PARQUETFILE678=(Token)match(input,KW_PARQUETFILE,FOLLOW_KW_PARQUETFILE_in_tableFileFormat10664);  
					stream_KW_PARQUETFILE.add(KW_PARQUETFILE678);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1802:40: -> TOK_TBLPARQUETFILE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TBLPARQUETFILE, "TOK_TBLPARQUETFILE"));
					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:1803:9: KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_STORED679=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10678);  
					stream_KW_STORED.add(KW_STORED679);

					KW_AS680=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat10680);  
					stream_KW_AS.add(KW_AS680);

					KW_INPUTFORMAT681=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat10682);  
					stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT681);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat10686);  
					stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT682=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat10688);  
					stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT682);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat10692);  
					stream_StringLiteral.add(outFmt);

					// D:\\temp\\antlr\\HiveParser.g:1803:97: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==KW_INPUTDRIVER) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1803:98: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER683=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat10695);  
							stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER683);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat10699);  
							stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER684=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat10701);  
							stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER684);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat10705);  
							stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: inDriver, outDriver, outFmt, inFmt
					// token labels: outDriver, outFmt, inDriver, inFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1804:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1804:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						// D:\\temp\\antlr\\HiveParser.g:1804:48: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// D:\\temp\\antlr\\HiveParser.g:1804:59: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:1805:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					{
					KW_STORED685=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10743);  
					stream_KW_STORED.add(KW_STORED685);

					KW_BY686=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat10745);  
					stream_KW_BY.add(KW_BY686);

					storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat10749);  
					stream_StringLiteral.add(storageHandler);

					// D:\\temp\\antlr\\HiveParser.g:1806:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					int alt182=2;
					int LA182_0 = input.LA(1);
					if ( (LA182_0==KW_WITH) ) {
						alt182=1;
					}
					switch (alt182) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1806:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
							{
							KW_WITH687=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat10761);  
							stream_KW_WITH.add(KW_WITH687);

							KW_SERDEPROPERTIES688=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat10763);  
							stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES688);

							pushFollow(FOLLOW_tableProperties_in_tableFileFormat10767);
							serdeprops=tableProperties();
							state._fsp--;

							stream_tableProperties.add(serdeprops.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: storageHandler, serdeprops
					// token labels: storageHandler
					// rule labels: serdeprops, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
					RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1807:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1807:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);
						adaptor.addChild(root_1, stream_storageHandler.nextNode());
						// D:\\temp\\antlr\\HiveParser.g:1807:48: ( $serdeprops)?
						if ( stream_serdeprops.hasNext() ) {
							adaptor.addChild(root_1, stream_serdeprops.nextTree());
						}
						stream_serdeprops.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 8 :
					// D:\\temp\\antlr\\HiveParser.g:1808:9: KW_STORED KW_AS genericSpec= identifier
					{
					KW_STORED689=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat10798);  
					stream_KW_STORED.add(KW_STORED689);

					KW_AS690=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat10800);  
					stream_KW_AS.add(KW_AS690);

					pushFollow(FOLLOW_identifier_in_tableFileFormat10804);
					genericSpec=identifier();
					state._fsp--;

					stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: retval, genericSpec
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1809:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// D:\\temp\\antlr\\HiveParser.g:1809:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableFileFormat"


	public static class tableLocation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tableLocation"
	// D:\\temp\\antlr\\HiveParser.g:1812:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
	public final HiveParser.tableLocation_return tableLocation() throws RecognitionException {
		HiveParser.tableLocation_return retval = new HiveParser.tableLocation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token locn=null;
		Token KW_LOCATION691=null;

		CommonTree locn_tree=null;
		CommonTree KW_LOCATION691_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("table location specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1815:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
			// D:\\temp\\antlr\\HiveParser.g:1816:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION691=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation10852);  
			stream_KW_LOCATION.add(KW_LOCATION691);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation10856);  
			stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1816:38: -> ^( TOK_TABLELOCATION $locn)
			{
				// D:\\temp\\antlr\\HiveParser.g:1816:41: ^( TOK_TABLELOCATION $locn)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableLocation"


	public static class columnNameTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeList"
	// D:\\temp\\antlr\\HiveParser.g:1819:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
	public final HiveParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
		HiveParser.columnNameTypeList_return retval = new HiveParser.columnNameTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA693=null;
		ParserRuleReturnScope columnNameType692 =null;
		ParserRuleReturnScope columnNameType694 =null;

		CommonTree COMMA693_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		 pushMsg("column name type list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1822:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1822:7: columnNameType ( COMMA columnNameType )*
			{
			pushFollow(FOLLOW_columnNameType_in_columnNameTypeList10892);
			columnNameType692=columnNameType();
			state._fsp--;

			stream_columnNameType.add(columnNameType692.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1822:22: ( COMMA columnNameType )*
			loop184:
			while (true) {
				int alt184=2;
				int LA184_0 = input.LA(1);
				if ( (LA184_0==COMMA) ) {
					alt184=1;
				}

				switch (alt184) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1822:23: COMMA columnNameType
					{
					COMMA693=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList10895);  
					stream_COMMA.add(COMMA693);

					pushFollow(FOLLOW_columnNameType_in_columnNameTypeList10897);
					columnNameType694=columnNameType();
					state._fsp--;

					stream_columnNameType.add(columnNameType694.getTree());
					}
					break;

				default :
					break loop184;
				}
			}

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1822:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1822:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameType.nextTree());
				}
				stream_columnNameType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeList"


	public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonTypeList"
	// D:\\temp\\antlr\\HiveParser.g:1825:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
	public final HiveParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
		HiveParser.columnNameColonTypeList_return retval = new HiveParser.columnNameColonTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA696=null;
		ParserRuleReturnScope columnNameColonType695 =null;
		ParserRuleReturnScope columnNameColonType697 =null;

		CommonTree COMMA696_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");

		 pushMsg("column name type list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1828:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1828:7: columnNameColonType ( COMMA columnNameColonType )*
			{
			pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList10935);
			columnNameColonType695=columnNameColonType();
			state._fsp--;

			stream_columnNameColonType.add(columnNameColonType695.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1828:27: ( COMMA columnNameColonType )*
			loop185:
			while (true) {
				int alt185=2;
				int LA185_0 = input.LA(1);
				if ( (LA185_0==COMMA) ) {
					alt185=1;
				}

				switch (alt185) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1828:28: COMMA columnNameColonType
					{
					COMMA696=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList10938);  
					stream_COMMA.add(COMMA696);

					pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList10940);
					columnNameColonType697=columnNameColonType();
					state._fsp--;

					stream_columnNameColonType.add(columnNameColonType697.getTree());
					}
					break;

				default :
					break loop185;
				}
			}

			// AST REWRITE
			// elements: columnNameColonType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1828:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1828:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameColonType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameColonType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameColonType.nextTree());
				}
				stream_columnNameColonType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonTypeList"


	public static class columnNameList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameList"
	// D:\\temp\\antlr\\HiveParser.g:1831:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
	public final HiveParser.columnNameList_return columnNameList() throws RecognitionException {
		HiveParser.columnNameList_return retval = new HiveParser.columnNameList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA699=null;
		ParserRuleReturnScope columnName698 =null;
		ParserRuleReturnScope columnName700 =null;

		CommonTree COMMA699_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg("column name list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1834:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1834:7: columnName ( COMMA columnName )*
			{
			pushFollow(FOLLOW_columnName_in_columnNameList10978);
			columnName698=columnName();
			state._fsp--;

			stream_columnName.add(columnName698.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1834:18: ( COMMA columnName )*
			loop186:
			while (true) {
				int alt186=2;
				int LA186_0 = input.LA(1);
				if ( (LA186_0==COMMA) ) {
					alt186=1;
				}

				switch (alt186) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1834:19: COMMA columnName
					{
					COMMA699=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList10981);  
					stream_COMMA.add(COMMA699);

					pushFollow(FOLLOW_columnName_in_columnNameList10983);
					columnName700=columnName();
					state._fsp--;

					stream_columnName.add(columnName700.getTree());
					}
					break;

				default :
					break loop186;
				}
			}

			// AST REWRITE
			// elements: columnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1834:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1834:41: ^( TOK_TABCOLNAME ( columnName )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnName.hasNext() ) {
					adaptor.addChild(root_1, stream_columnName.nextTree());
				}
				stream_columnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameList"


	public static class columnName_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnName"
	// D:\\temp\\antlr\\HiveParser.g:1837:1: columnName : identifier ;
	public final HiveParser.columnName_return columnName() throws RecognitionException {
		HiveParser.columnName_return retval = new HiveParser.columnName_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope identifier701 =null;


		 pushMsg("column name", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1840:5: ( identifier )
			// D:\\temp\\antlr\\HiveParser.g:1841:7: identifier
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_columnName11027);
			identifier701=identifier();
			state._fsp--;

			adaptor.addChild(root_0, identifier701.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnName"


	public static class columnNameOrderList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrderList"
	// D:\\temp\\antlr\\HiveParser.g:1844:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
	public final HiveParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
		HiveParser.columnNameOrderList_return retval = new HiveParser.columnNameOrderList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA703=null;
		ParserRuleReturnScope columnNameOrder702 =null;
		ParserRuleReturnScope columnNameOrder704 =null;

		CommonTree COMMA703_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");

		 pushMsg("column name order list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1847:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1847:7: columnNameOrder ( COMMA columnNameOrder )*
			{
			pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList11054);
			columnNameOrder702=columnNameOrder();
			state._fsp--;

			stream_columnNameOrder.add(columnNameOrder702.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1847:23: ( COMMA columnNameOrder )*
			loop187:
			while (true) {
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==COMMA) ) {
					alt187=1;
				}

				switch (alt187) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1847:24: COMMA columnNameOrder
					{
					COMMA703=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList11057);  
					stream_COMMA.add(COMMA703);

					pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList11059);
					columnNameOrder704=columnNameOrder();
					state._fsp--;

					stream_columnNameOrder.add(columnNameOrder704.getTree());
					}
					break;

				default :
					break loop187;
				}
			}

			// AST REWRITE
			// elements: columnNameOrder
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1847:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1847:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameOrder.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameOrder.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameOrder.nextTree());
				}
				stream_columnNameOrder.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrderList"


	public static class skewedValueElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedValueElement"
	// D:\\temp\\antlr\\HiveParser.g:1850:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
	public final HiveParser.skewedValueElement_return skewedValueElement() throws RecognitionException {
		HiveParser.skewedValueElement_return retval = new HiveParser.skewedValueElement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope skewedColumnValues705 =null;
		ParserRuleReturnScope skewedColumnValuePairList706 =null;


		 pushMsg("skewed value element", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1853:5: ( skewedColumnValues | skewedColumnValuePairList )
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==BigintLiteral||LA188_0==CharSetName||LA188_0==DecimalLiteral||LA188_0==KW_DATE||LA188_0==KW_FALSE||LA188_0==KW_TRUE||LA188_0==Number||(LA188_0 >= SmallintLiteral && LA188_0 <= StringLiteral)||LA188_0==TinyintLiteral) ) {
				alt188=1;
			}
			else if ( (LA188_0==LPAREN) ) {
				alt188=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 188, 0, input);
				throw nvae;
			}

			switch (alt188) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1854:7: skewedColumnValues
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement11104);
					skewedColumnValues705=skewedColumnValues();
					state._fsp--;

					adaptor.addChild(root_0, skewedColumnValues705.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1855:8: skewedColumnValuePairList
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement11113);
					skewedColumnValuePairList706=skewedColumnValuePairList();
					state._fsp--;

					adaptor.addChild(root_0, skewedColumnValuePairList706.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueElement"


	public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePairList"
	// D:\\temp\\antlr\\HiveParser.g:1858:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
	public final HiveParser.skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
		HiveParser.skewedColumnValuePairList_return retval = new HiveParser.skewedColumnValuePairList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA708=null;
		ParserRuleReturnScope skewedColumnValuePair707 =null;
		ParserRuleReturnScope skewedColumnValuePair709 =null;

		CommonTree COMMA708_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");

		 pushMsg("column value pair list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1861:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1861:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
			{
			pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11140);
			skewedColumnValuePair707=skewedColumnValuePair();
			state._fsp--;

			stream_skewedColumnValuePair.add(skewedColumnValuePair707.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1861:29: ( COMMA skewedColumnValuePair )*
			loop189:
			while (true) {
				int alt189=2;
				int LA189_0 = input.LA(1);
				if ( (LA189_0==COMMA) ) {
					alt189=1;
				}

				switch (alt189) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1861:30: COMMA skewedColumnValuePair
					{
					COMMA708=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList11143);  
					stream_COMMA.add(COMMA708);

					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11145);
					skewedColumnValuePair709=skewedColumnValuePair();
					state._fsp--;

					stream_skewedColumnValuePair.add(skewedColumnValuePair709.getTree());
					}
					break;

				default :
					break loop189;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValuePair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1861:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1861:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR"), root_1);
				if ( !(stream_skewedColumnValuePair.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValuePair.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValuePair.nextTree());
				}
				stream_skewedColumnValuePair.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePairList"


	public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePair"
	// D:\\temp\\antlr\\HiveParser.g:1864:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
	public final HiveParser.skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
		HiveParser.skewedColumnValuePair_return retval = new HiveParser.skewedColumnValuePair_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN710=null;
		Token RPAREN711=null;
		ParserRuleReturnScope colValues =null;

		CommonTree LPAREN710_tree=null;
		CommonTree RPAREN711_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");

		 pushMsg("column value pair", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1867:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
			// D:\\temp\\antlr\\HiveParser.g:1868:7: LPAREN colValues= skewedColumnValues RPAREN
			{
			LPAREN710=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair11190);  
			stream_LPAREN.add(LPAREN710);

			pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair11194);
			colValues=skewedColumnValues();
			state._fsp--;

			stream_skewedColumnValues.add(colValues.getTree());
			RPAREN711=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair11196);  
			stream_RPAREN.add(RPAREN711);

			// AST REWRITE
			// elements: colValues
			// token labels: 
			// rule labels: retval, colValues
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"rule colValues",colValues!=null?colValues.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1869:7: -> ^( TOK_TABCOLVALUES $colValues)
			{
				// D:\\temp\\antlr\\HiveParser.g:1869:10: ^( TOK_TABCOLVALUES $colValues)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES"), root_1);
				adaptor.addChild(root_1, stream_colValues.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePair"


	public static class skewedColumnValues_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValues"
	// D:\\temp\\antlr\\HiveParser.g:1872:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
	public final HiveParser.skewedColumnValues_return skewedColumnValues() throws RecognitionException {
		HiveParser.skewedColumnValues_return retval = new HiveParser.skewedColumnValues_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA713=null;
		ParserRuleReturnScope skewedColumnValue712 =null;
		ParserRuleReturnScope skewedColumnValue714 =null;

		CommonTree COMMA713_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");

		 pushMsg("column values", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1875:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1875:7: skewedColumnValue ( COMMA skewedColumnValue )*
			{
			pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues11239);
			skewedColumnValue712=skewedColumnValue();
			state._fsp--;

			stream_skewedColumnValue.add(skewedColumnValue712.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1875:25: ( COMMA skewedColumnValue )*
			loop190:
			while (true) {
				int alt190=2;
				int LA190_0 = input.LA(1);
				if ( (LA190_0==COMMA) ) {
					alt190=1;
				}

				switch (alt190) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1875:26: COMMA skewedColumnValue
					{
					COMMA713=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues11242);  
					stream_COMMA.add(COMMA713);

					pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues11244);
					skewedColumnValue714=skewedColumnValue();
					state._fsp--;

					stream_skewedColumnValue.add(skewedColumnValue714.getTree());
					}
					break;

				default :
					break loop190;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1875:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1875:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE"), root_1);
				if ( !(stream_skewedColumnValue.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValue.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValue.nextTree());
				}
				stream_skewedColumnValue.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValues"


	public static class skewedColumnValue_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValue"
	// D:\\temp\\antlr\\HiveParser.g:1878:1: skewedColumnValue : constant ;
	public final HiveParser.skewedColumnValue_return skewedColumnValue() throws RecognitionException {
		HiveParser.skewedColumnValue_return retval = new HiveParser.skewedColumnValue_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope constant715 =null;


		 pushMsg("column value", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1881:5: ( constant )
			// D:\\temp\\antlr\\HiveParser.g:1882:7: constant
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_constant_in_skewedColumnValue11288);
			constant715=constant();
			state._fsp--;

			adaptor.addChild(root_0, constant715.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValue"


	public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "skewedValueLocationElement"
	// D:\\temp\\antlr\\HiveParser.g:1885:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
	public final HiveParser.skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
		HiveParser.skewedValueLocationElement_return retval = new HiveParser.skewedValueLocationElement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope skewedColumnValue716 =null;
		ParserRuleReturnScope skewedColumnValuePair717 =null;


		 pushMsg("skewed value location element", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1888:5: ( skewedColumnValue | skewedColumnValuePair )
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==BigintLiteral||LA191_0==CharSetName||LA191_0==DecimalLiteral||LA191_0==KW_DATE||LA191_0==KW_FALSE||LA191_0==KW_TRUE||LA191_0==Number||(LA191_0 >= SmallintLiteral && LA191_0 <= StringLiteral)||LA191_0==TinyintLiteral) ) {
				alt191=1;
			}
			else if ( (LA191_0==LPAREN) ) {
				alt191=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 191, 0, input);
				throw nvae;
			}

			switch (alt191) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1889:7: skewedColumnValue
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement11322);
					skewedColumnValue716=skewedColumnValue();
					state._fsp--;

					adaptor.addChild(root_0, skewedColumnValue716.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1890:8: skewedColumnValuePair
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement11331);
					skewedColumnValuePair717=skewedColumnValuePair();
					state._fsp--;

					adaptor.addChild(root_0, skewedColumnValuePair717.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueLocationElement"


	public static class columnNameOrder_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrder"
	// D:\\temp\\antlr\\HiveParser.g:1893:1: columnNameOrder : identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC identifier ) -> ^( TOK_TABSORTCOLNAMEDESC identifier ) ;
	public final HiveParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
		HiveParser.columnNameOrder_return retval = new HiveParser.columnNameOrder_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token asc=null;
		Token desc=null;
		ParserRuleReturnScope identifier718 =null;

		CommonTree asc_tree=null;
		CommonTree desc_tree=null;
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("column name order", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1896:5: ( identifier (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC identifier ) -> ^( TOK_TABSORTCOLNAMEDESC identifier ) )
			// D:\\temp\\antlr\\HiveParser.g:1896:7: identifier (asc= KW_ASC |desc= KW_DESC )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameOrder11362);
			identifier718=identifier();
			state._fsp--;

			stream_identifier.add(identifier718.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1896:18: (asc= KW_ASC |desc= KW_DESC )?
			int alt192=3;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==KW_ASC) ) {
				alt192=1;
			}
			else if ( (LA192_0==KW_DESC) ) {
				alt192=2;
			}
			switch (alt192) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1896:19: asc= KW_ASC
					{
					asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnNameOrder11367);  
					stream_KW_ASC.add(asc);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1896:32: desc= KW_DESC
					{
					desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnNameOrder11373);  
					stream_KW_DESC.add(desc);

					}
					break;

			}

			// AST REWRITE
			// elements: identifier, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1897:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC identifier )
			if (desc == null) {
				// D:\\temp\\antlr\\HiveParser.g:1897:25: ^( TOK_TABSORTCOLNAMEASC identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1898:5: -> ^( TOK_TABSORTCOLNAMEDESC identifier )
			{
				// D:\\temp\\antlr\\HiveParser.g:1898:25: ^( TOK_TABSORTCOLNAMEDESC identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrder"


	public static class columnNameCommentList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameCommentList"
	// D:\\temp\\antlr\\HiveParser.g:1901:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
	public final HiveParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
		HiveParser.columnNameCommentList_return retval = new HiveParser.columnNameCommentList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA720=null;
		ParserRuleReturnScope columnNameComment719 =null;
		ParserRuleReturnScope columnNameComment721 =null;

		CommonTree COMMA720_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");

		 pushMsg("column name comment list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1904:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1904:7: columnNameComment ( COMMA columnNameComment )*
			{
			pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList11445);
			columnNameComment719=columnNameComment();
			state._fsp--;

			stream_columnNameComment.add(columnNameComment719.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1904:25: ( COMMA columnNameComment )*
			loop193:
			while (true) {
				int alt193=2;
				int LA193_0 = input.LA(1);
				if ( (LA193_0==COMMA) ) {
					alt193=1;
				}

				switch (alt193) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1904:26: COMMA columnNameComment
					{
					COMMA720=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList11448);  
					stream_COMMA.add(COMMA720);

					pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList11450);
					columnNameComment721=columnNameComment();
					state._fsp--;

					stream_columnNameComment.add(columnNameComment721.getTree());
					}
					break;

				default :
					break loop193;
				}
			}

			// AST REWRITE
			// elements: columnNameComment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1904:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1904:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameComment.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameComment.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameComment.nextTree());
				}
				stream_columnNameComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameCommentList"


	public static class columnNameComment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameComment"
	// D:\\temp\\antlr\\HiveParser.g:1907:1: columnNameComment : colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
	public final HiveParser.columnNameComment_return columnNameComment() throws RecognitionException {
		HiveParser.columnNameComment_return retval = new HiveParser.columnNameComment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT722=null;
		ParserRuleReturnScope colName =null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT722_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("column name comment", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1910:5: (colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
			// D:\\temp\\antlr\\HiveParser.g:1910:7: colName= identifier ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameComment11490);
			colName=identifier();
			state._fsp--;

			stream_identifier.add(colName.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1910:26: ( KW_COMMENT comment= StringLiteral )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==KW_COMMENT) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1910:27: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT722=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment11493);  
					stream_KW_COMMENT.add(KW_COMMENT722);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment11497);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colName, comment
			// token labels: comment
			// rule labels: retval, colName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1911:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
			{
				// D:\\temp\\antlr\\HiveParser.g:1911:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, (CommonTree)adaptor.create(TOK_NULL, "TOK_NULL"));
				// D:\\temp\\antlr\\HiveParser.g:1911:40: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameComment"


	public static class columnRefOrder_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnRefOrder"
	// D:\\temp\\antlr\\HiveParser.g:1914:1: columnRefOrder : expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) ;
	public final HiveParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
		HiveParser.columnRefOrder_return retval = new HiveParser.columnRefOrder_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token asc=null;
		Token desc=null;
		ParserRuleReturnScope expression723 =null;

		CommonTree asc_tree=null;
		CommonTree desc_tree=null;
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		 pushMsg("column order", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1917:5: ( expression (asc= KW_ASC |desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) )
			// D:\\temp\\antlr\\HiveParser.g:1917:7: expression (asc= KW_ASC |desc= KW_DESC )?
			{
			pushFollow(FOLLOW_expression_in_columnRefOrder11545);
			expression723=expression();
			state._fsp--;

			stream_expression.add(expression723.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1917:18: (asc= KW_ASC |desc= KW_DESC )?
			int alt195=3;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==KW_ASC) ) {
				alt195=1;
			}
			else if ( (LA195_0==KW_DESC) ) {
				alt195=2;
			}
			switch (alt195) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1917:19: asc= KW_ASC
					{
					asc=(Token)match(input,KW_ASC,FOLLOW_KW_ASC_in_columnRefOrder11550);  
					stream_KW_ASC.add(asc);

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1917:32: desc= KW_DESC
					{
					desc=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_columnRefOrder11556);  
					stream_KW_DESC.add(desc);

					}
					break;

			}

			// AST REWRITE
			// elements: expression, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1918:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression )
			if (desc == null) {
				// D:\\temp\\antlr\\HiveParser.g:1918:25: ^( TOK_TABSORTCOLNAMEASC expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1919:5: -> ^( TOK_TABSORTCOLNAMEDESC expression )
			{
				// D:\\temp\\antlr\\HiveParser.g:1919:25: ^( TOK_TABSORTCOLNAMEDESC expression )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnRefOrder"


	public static class columnNameType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameType"
	// D:\\temp\\antlr\\HiveParser.g:1922:1: columnNameType : colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameType_return columnNameType() throws RecognitionException {
		HiveParser.columnNameType_return retval = new HiveParser.columnNameType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token KW_COMMENT725=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType724 =null;

		CommonTree comment_tree=null;
		CommonTree KW_COMMENT725_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("column specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1925:5: (colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// D:\\temp\\antlr\\HiveParser.g:1925:7: colName= identifier colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameType11630);
			colName=identifier();
			state._fsp--;

			stream_identifier.add(colName.getTree());
			pushFollow(FOLLOW_colType_in_columnNameType11632);
			colType724=colType();
			state._fsp--;

			stream_colType.add(colType724.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1925:34: ( KW_COMMENT comment= StringLiteral )?
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==KW_COMMENT) ) {
				alt196=1;
			}
			switch (alt196) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1925:35: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT725=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType11635);  
					stream_KW_COMMENT.add(KW_COMMENT725);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType11639);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colType, colName, colType, comment, colName
			// token labels: comment
			// rule labels: retval, colName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1926:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// D:\\temp\\antlr\\HiveParser.g:1926:28: ^( TOK_TABCOL $colName colType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1927:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// D:\\temp\\antlr\\HiveParser.g:1927:28: ^( TOK_TABCOL $colName colType $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameType"


	public static class columnNameColonType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonType"
	// D:\\temp\\antlr\\HiveParser.g:1930:1: columnNameColonType : colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
		HiveParser.columnNameColonType_return retval = new HiveParser.columnNameColonType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token comment=null;
		Token COLON726=null;
		Token KW_COMMENT728=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType727 =null;

		CommonTree comment_tree=null;
		CommonTree COLON726_tree=null;
		CommonTree KW_COMMENT728_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("column specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1933:5: (colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// D:\\temp\\antlr\\HiveParser.g:1933:7: colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameColonType11725);
			colName=identifier();
			state._fsp--;

			stream_identifier.add(colName.getTree());
			COLON726=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType11727);  
			stream_COLON.add(COLON726);

			pushFollow(FOLLOW_colType_in_columnNameColonType11729);
			colType727=colType();
			state._fsp--;

			stream_colType.add(colType727.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1933:40: ( KW_COMMENT comment= StringLiteral )?
			int alt197=2;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==KW_COMMENT) ) {
				alt197=1;
			}
			switch (alt197) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1933:41: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT728=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType11732);  
					stream_KW_COMMENT.add(KW_COMMENT728);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType11736);  
					stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colType, colType, colName, colName, comment
			// token labels: comment
			// rule labels: retval, colName
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1934:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// D:\\temp\\antlr\\HiveParser.g:1934:28: ^( TOK_TABCOL $colName colType )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1935:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// D:\\temp\\antlr\\HiveParser.g:1935:28: ^( TOK_TABCOL $colName colType $comment)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonType"


	public static class colType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "colType"
	// D:\\temp\\antlr\\HiveParser.g:1938:1: colType : type ;
	public final HiveParser.colType_return colType() throws RecognitionException {
		HiveParser.colType_return retval = new HiveParser.colType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope type729 =null;


		 pushMsg("column type", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1941:5: ( type )
			// D:\\temp\\antlr\\HiveParser.g:1941:7: type
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_type_in_colType11820);
			type729=type();
			state._fsp--;

			adaptor.addChild(root_0, type729.getTree());

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colType"


	public static class colTypeList_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "colTypeList"
	// D:\\temp\\antlr\\HiveParser.g:1944:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
	public final HiveParser.colTypeList_return colTypeList() throws RecognitionException {
		HiveParser.colTypeList_return retval = new HiveParser.colTypeList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA731=null;
		ParserRuleReturnScope colType730 =null;
		ParserRuleReturnScope colType732 =null;

		CommonTree COMMA731_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg("column type list", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1947:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:1947:7: colType ( COMMA colType )*
			{
			pushFollow(FOLLOW_colType_in_colTypeList11847);
			colType730=colType();
			state._fsp--;

			stream_colType.add(colType730.getTree());
			// D:\\temp\\antlr\\HiveParser.g:1947:15: ( COMMA colType )*
			loop198:
			while (true) {
				int alt198=2;
				int LA198_0 = input.LA(1);
				if ( (LA198_0==COMMA) ) {
					alt198=1;
				}

				switch (alt198) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1947:16: COMMA colType
					{
					COMMA731=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList11850);  
					stream_COMMA.add(COMMA731);

					pushFollow(FOLLOW_colType_in_colTypeList11852);
					colType732=colType();
					state._fsp--;

					stream_colType.add(colType732.getTree());
					}
					break;

				default :
					break loop198;
				}
			}

			// AST REWRITE
			// elements: colType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1947:32: -> ^( TOK_COLTYPELIST ( colType )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:1947:35: ^( TOK_COLTYPELIST ( colType )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);
				if ( !(stream_colType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_colType.hasNext() ) {
					adaptor.addChild(root_1, stream_colType.nextTree());
				}
				stream_colType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colTypeList"


	public static class type_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "type"
	// D:\\temp\\antlr\\HiveParser.g:1950:1: type : ( primitiveType | listType | structType | mapType | unionType );
	public final HiveParser.type_return type() throws RecognitionException {
		HiveParser.type_return retval = new HiveParser.type_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope primitiveType733 =null;
		ParserRuleReturnScope listType734 =null;
		ParserRuleReturnScope structType735 =null;
		ParserRuleReturnScope mapType736 =null;
		ParserRuleReturnScope unionType737 =null;


		try {
			// D:\\temp\\antlr\\HiveParser.g:1951:5: ( primitiveType | listType | structType | mapType | unionType )
			int alt199=5;
			switch ( input.LA(1) ) {
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_CHAR:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_SMALLINT:
			case KW_STRING:
			case KW_TIMESTAMP:
			case KW_TINYINT:
			case KW_VARCHAR:
				{
				alt199=1;
				}
				break;
			case KW_ARRAY:
				{
				alt199=2;
				}
				break;
			case KW_STRUCT:
				{
				alt199=3;
				}
				break;
			case KW_MAP:
				{
				alt199=4;
				}
				break;
			case KW_UNIONTYPE:
				{
				alt199=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 199, 0, input);
				throw nvae;
			}
			switch (alt199) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1951:7: primitiveType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primitiveType_in_type11880);
					primitiveType733=primitiveType();
					state._fsp--;

					adaptor.addChild(root_0, primitiveType733.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1952:7: listType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_listType_in_type11888);
					listType734=listType();
					state._fsp--;

					adaptor.addChild(root_0, listType734.getTree());

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1953:7: structType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_structType_in_type11896);
					structType735=structType();
					state._fsp--;

					adaptor.addChild(root_0, structType735.getTree());

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:1954:7: mapType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_mapType_in_type11904);
					mapType736=mapType();
					state._fsp--;

					adaptor.addChild(root_0, mapType736.getTree());

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:1955:7: unionType
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_unionType_in_type11912);
					unionType737=unionType();
					state._fsp--;

					adaptor.addChild(root_0, unionType737.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type"


	public static class primitiveType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primitiveType"
	// D:\\temp\\antlr\\HiveParser.g:1957:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) );
	public final HiveParser.primitiveType_return primitiveType() throws RecognitionException {
		HiveParser.primitiveType_return retval = new HiveParser.primitiveType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token prec=null;
		Token scale=null;
		Token length=null;
		Token KW_TINYINT738=null;
		Token KW_SMALLINT739=null;
		Token KW_INT740=null;
		Token KW_BIGINT741=null;
		Token KW_BOOLEAN742=null;
		Token KW_FLOAT743=null;
		Token KW_DOUBLE744=null;
		Token KW_DATE745=null;
		Token KW_DATETIME746=null;
		Token KW_TIMESTAMP747=null;
		Token KW_STRING748=null;
		Token KW_BINARY749=null;
		Token KW_DECIMAL750=null;
		Token LPAREN751=null;
		Token COMMA752=null;
		Token RPAREN753=null;
		Token KW_VARCHAR754=null;
		Token LPAREN755=null;
		Token RPAREN756=null;
		Token KW_CHAR757=null;
		Token LPAREN758=null;
		Token RPAREN759=null;

		CommonTree prec_tree=null;
		CommonTree scale_tree=null;
		CommonTree length_tree=null;
		CommonTree KW_TINYINT738_tree=null;
		CommonTree KW_SMALLINT739_tree=null;
		CommonTree KW_INT740_tree=null;
		CommonTree KW_BIGINT741_tree=null;
		CommonTree KW_BOOLEAN742_tree=null;
		CommonTree KW_FLOAT743_tree=null;
		CommonTree KW_DOUBLE744_tree=null;
		CommonTree KW_DATE745_tree=null;
		CommonTree KW_DATETIME746_tree=null;
		CommonTree KW_TIMESTAMP747_tree=null;
		CommonTree KW_STRING748_tree=null;
		CommonTree KW_BINARY749_tree=null;
		CommonTree KW_DECIMAL750_tree=null;
		CommonTree LPAREN751_tree=null;
		CommonTree COMMA752_tree=null;
		CommonTree RPAREN753_tree=null;
		CommonTree KW_VARCHAR754_tree=null;
		CommonTree LPAREN755_tree=null;
		CommonTree RPAREN756_tree=null;
		CommonTree KW_CHAR757_tree=null;
		CommonTree LPAREN758_tree=null;
		CommonTree RPAREN759_tree=null;
		RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
		RewriteRuleTokenStream stream_KW_VARCHAR=new RewriteRuleTokenStream(adaptor,"token KW_VARCHAR");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
		RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
		RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_CHAR=new RewriteRuleTokenStream(adaptor,"token KW_CHAR");
		RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
		RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
		RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");
		RewriteRuleTokenStream stream_KW_DECIMAL=new RewriteRuleTokenStream(adaptor,"token KW_DECIMAL");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");
		RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
		RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
		RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");

		 pushMsg("primitive type specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1960:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) )
			int alt202=15;
			switch ( input.LA(1) ) {
			case KW_TINYINT:
				{
				alt202=1;
				}
				break;
			case KW_SMALLINT:
				{
				alt202=2;
				}
				break;
			case KW_INT:
				{
				alt202=3;
				}
				break;
			case KW_BIGINT:
				{
				alt202=4;
				}
				break;
			case KW_BOOLEAN:
				{
				alt202=5;
				}
				break;
			case KW_FLOAT:
				{
				alt202=6;
				}
				break;
			case KW_DOUBLE:
				{
				alt202=7;
				}
				break;
			case KW_DATE:
				{
				alt202=8;
				}
				break;
			case KW_DATETIME:
				{
				alt202=9;
				}
				break;
			case KW_TIMESTAMP:
				{
				alt202=10;
				}
				break;
			case KW_STRING:
				{
				alt202=11;
				}
				break;
			case KW_BINARY:
				{
				alt202=12;
				}
				break;
			case KW_DECIMAL:
				{
				alt202=13;
				}
				break;
			case KW_VARCHAR:
				{
				alt202=14;
				}
				break;
			case KW_CHAR:
				{
				alt202=15;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 202, 0, input);
				throw nvae;
			}
			switch (alt202) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:1960:7: KW_TINYINT
					{
					KW_TINYINT738=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType11934);  
					stream_KW_TINYINT.add(KW_TINYINT738);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1960:24: -> TOK_TINYINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TINYINT, "TOK_TINYINT"));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:1961:7: KW_SMALLINT
					{
					KW_SMALLINT739=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType11955);  
					stream_KW_SMALLINT.add(KW_SMALLINT739);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1961:24: -> TOK_SMALLINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));
					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:1962:7: KW_INT
					{
					KW_INT740=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType11975);  
					stream_KW_INT.add(KW_INT740);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1962:24: -> TOK_INT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_INT, "TOK_INT"));
					}


					retval.tree = root_0;

					}
					break;
				case 4 :
					// D:\\temp\\antlr\\HiveParser.g:1963:7: KW_BIGINT
					{
					KW_BIGINT741=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType12000);  
					stream_KW_BIGINT.add(KW_BIGINT741);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1963:24: -> TOK_BIGINT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BIGINT, "TOK_BIGINT"));
					}


					retval.tree = root_0;

					}
					break;
				case 5 :
					// D:\\temp\\antlr\\HiveParser.g:1964:7: KW_BOOLEAN
					{
					KW_BOOLEAN742=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType12022);  
					stream_KW_BOOLEAN.add(KW_BOOLEAN742);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1964:24: -> TOK_BOOLEAN
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));
					}


					retval.tree = root_0;

					}
					break;
				case 6 :
					// D:\\temp\\antlr\\HiveParser.g:1965:7: KW_FLOAT
					{
					KW_FLOAT743=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType12043);  
					stream_KW_FLOAT.add(KW_FLOAT743);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1965:24: -> TOK_FLOAT
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_FLOAT, "TOK_FLOAT"));
					}


					retval.tree = root_0;

					}
					break;
				case 7 :
					// D:\\temp\\antlr\\HiveParser.g:1966:7: KW_DOUBLE
					{
					KW_DOUBLE744=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType12066);  
					stream_KW_DOUBLE.add(KW_DOUBLE744);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1966:24: -> TOK_DOUBLE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));
					}


					retval.tree = root_0;

					}
					break;
				case 8 :
					// D:\\temp\\antlr\\HiveParser.g:1967:7: KW_DATE
					{
					KW_DATE745=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType12088);  
					stream_KW_DATE.add(KW_DATE745);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1967:24: -> TOK_DATE
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DATE, "TOK_DATE"));
					}


					retval.tree = root_0;

					}
					break;
				case 9 :
					// D:\\temp\\antlr\\HiveParser.g:1968:7: KW_DATETIME
					{
					KW_DATETIME746=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType12112);  
					stream_KW_DATETIME.add(KW_DATETIME746);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1968:24: -> TOK_DATETIME
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_DATETIME, "TOK_DATETIME"));
					}


					retval.tree = root_0;

					}
					break;
				case 10 :
					// D:\\temp\\antlr\\HiveParser.g:1969:7: KW_TIMESTAMP
					{
					KW_TIMESTAMP747=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType12132);  
					stream_KW_TIMESTAMP.add(KW_TIMESTAMP747);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1969:24: -> TOK_TIMESTAMP
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));
					}


					retval.tree = root_0;

					}
					break;
				case 11 :
					// D:\\temp\\antlr\\HiveParser.g:1970:7: KW_STRING
					{
					KW_STRING748=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType12151);  
					stream_KW_STRING.add(KW_STRING748);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1970:24: -> TOK_STRING
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_STRING, "TOK_STRING"));
					}


					retval.tree = root_0;

					}
					break;
				case 12 :
					// D:\\temp\\antlr\\HiveParser.g:1971:7: KW_BINARY
					{
					KW_BINARY749=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType12173);  
					stream_KW_BINARY.add(KW_BINARY749);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1971:24: -> TOK_BINARY
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(TOK_BINARY, "TOK_BINARY"));
					}


					retval.tree = root_0;

					}
					break;
				case 13 :
					// D:\\temp\\antlr\\HiveParser.g:1972:7: KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					{
					KW_DECIMAL750=(Token)match(input,KW_DECIMAL,FOLLOW_KW_DECIMAL_in_primitiveType12195);  
					stream_KW_DECIMAL.add(KW_DECIMAL750);

					// D:\\temp\\antlr\\HiveParser.g:1972:18: ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					int alt201=2;
					int LA201_0 = input.LA(1);
					if ( (LA201_0==LPAREN) ) {
						alt201=1;
					}
					switch (alt201) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:1972:19: LPAREN prec= Number ( COMMA scale= Number )? RPAREN
							{
							LPAREN751=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType12198);  
							stream_LPAREN.add(LPAREN751);

							prec=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12202);  
							stream_Number.add(prec);

							// D:\\temp\\antlr\\HiveParser.g:1972:38: ( COMMA scale= Number )?
							int alt200=2;
							int LA200_0 = input.LA(1);
							if ( (LA200_0==COMMA) ) {
								alt200=1;
							}
							switch (alt200) {
								case 1 :
									// D:\\temp\\antlr\\HiveParser.g:1972:39: COMMA scale= Number
									{
									COMMA752=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitiveType12205);  
									stream_COMMA.add(COMMA752);

									scale=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12209);  
									stream_Number.add(scale);

									}
									break;

							}

							RPAREN753=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType12213);  
							stream_RPAREN.add(RPAREN753);

							}
							break;

					}

					// AST REWRITE
					// elements: prec, scale
					// token labels: scale, prec
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_scale=new RewriteRuleTokenStream(adaptor,"token scale",scale);
					RewriteRuleTokenStream stream_prec=new RewriteRuleTokenStream(adaptor,"token prec",prec);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1972:69: -> ^( TOK_DECIMAL ( $prec)? ( $scale)? )
					{
						// D:\\temp\\antlr\\HiveParser.g:1972:72: ^( TOK_DECIMAL ( $prec)? ( $scale)? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DECIMAL, "TOK_DECIMAL"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:1972:87: ( $prec)?
						if ( stream_prec.hasNext() ) {
							adaptor.addChild(root_1, stream_prec.nextNode());
						}
						stream_prec.reset();

						// D:\\temp\\antlr\\HiveParser.g:1972:94: ( $scale)?
						if ( stream_scale.hasNext() ) {
							adaptor.addChild(root_1, stream_scale.nextNode());
						}
						stream_scale.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 14 :
					// D:\\temp\\antlr\\HiveParser.g:1973:7: KW_VARCHAR LPAREN length= Number RPAREN
					{
					KW_VARCHAR754=(Token)match(input,KW_VARCHAR,FOLLOW_KW_VARCHAR_in_primitiveType12237);  
					stream_KW_VARCHAR.add(KW_VARCHAR754);

					LPAREN755=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType12239);  
					stream_LPAREN.add(LPAREN755);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12243);  
					stream_Number.add(length);

					RPAREN756=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType12245);  
					stream_RPAREN.add(RPAREN756);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1973:51: -> ^( TOK_VARCHAR $length)
					{
						// D:\\temp\\antlr\\HiveParser.g:1973:57: ^( TOK_VARCHAR $length)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_VARCHAR, "TOK_VARCHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 15 :
					// D:\\temp\\antlr\\HiveParser.g:1974:7: KW_CHAR LPAREN length= Number RPAREN
					{
					KW_CHAR757=(Token)match(input,KW_CHAR,FOLLOW_KW_CHAR_in_primitiveType12270);  
					stream_KW_CHAR.add(KW_CHAR757);

					LPAREN758=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType12272);  
					stream_LPAREN.add(LPAREN758);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType12276);  
					stream_Number.add(length);

					RPAREN759=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType12278);  
					stream_RPAREN.add(RPAREN759);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 1974:48: -> ^( TOK_CHAR $length)
					{
						// D:\\temp\\antlr\\HiveParser.g:1974:54: ^( TOK_CHAR $length)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CHAR, "TOK_CHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primitiveType"


	public static class listType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "listType"
	// D:\\temp\\antlr\\HiveParser.g:1977:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
	public final HiveParser.listType_return listType() throws RecognitionException {
		HiveParser.listType_return retval = new HiveParser.listType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_ARRAY760=null;
		Token LESSTHAN761=null;
		Token GREATERTHAN763=null;
		ParserRuleReturnScope type762 =null;

		CommonTree KW_ARRAY760_tree=null;
		CommonTree LESSTHAN761_tree=null;
		CommonTree GREATERTHAN763_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");

		 pushMsg("list type", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1980:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
			// D:\\temp\\antlr\\HiveParser.g:1980:7: KW_ARRAY LESSTHAN type GREATERTHAN
			{
			KW_ARRAY760=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType12322);  
			stream_KW_ARRAY.add(KW_ARRAY760);

			LESSTHAN761=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType12324);  
			stream_LESSTHAN.add(LESSTHAN761);

			pushFollow(FOLLOW_type_in_listType12326);
			type762=type();
			state._fsp--;

			stream_type.add(type762.getTree());
			GREATERTHAN763=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType12328);  
			stream_GREATERTHAN.add(GREATERTHAN763);

			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1980:44: -> ^( TOK_LIST type )
			{
				// D:\\temp\\antlr\\HiveParser.g:1980:47: ^( TOK_LIST type )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIST, "TOK_LIST"), root_1);
				adaptor.addChild(root_1, stream_type.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "listType"


	public static class structType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "structType"
	// D:\\temp\\antlr\\HiveParser.g:1983:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
	public final HiveParser.structType_return structType() throws RecognitionException {
		HiveParser.structType_return retval = new HiveParser.structType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_STRUCT764=null;
		Token LESSTHAN765=null;
		Token GREATERTHAN767=null;
		ParserRuleReturnScope columnNameColonTypeList766 =null;

		CommonTree KW_STRUCT764_tree=null;
		CommonTree LESSTHAN765_tree=null;
		CommonTree GREATERTHAN767_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");

		 pushMsg("struct type", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1986:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
			// D:\\temp\\antlr\\HiveParser.g:1986:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
			{
			KW_STRUCT764=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType12365);  
			stream_KW_STRUCT.add(KW_STRUCT764);

			LESSTHAN765=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType12367);  
			stream_LESSTHAN.add(LESSTHAN765);

			pushFollow(FOLLOW_columnNameColonTypeList_in_structType12369);
			columnNameColonTypeList766=columnNameColonTypeList();
			state._fsp--;

			stream_columnNameColonTypeList.add(columnNameColonTypeList766.getTree());
			GREATERTHAN767=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType12371);  
			stream_GREATERTHAN.add(GREATERTHAN767);

			// AST REWRITE
			// elements: columnNameColonTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1986:62: -> ^( TOK_STRUCT columnNameColonTypeList )
			{
				// D:\\temp\\antlr\\HiveParser.g:1986:65: ^( TOK_STRUCT columnNameColonTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);
				adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "structType"


	public static class mapType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "mapType"
	// D:\\temp\\antlr\\HiveParser.g:1989:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
	public final HiveParser.mapType_return mapType() throws RecognitionException {
		HiveParser.mapType_return retval = new HiveParser.mapType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_MAP768=null;
		Token LESSTHAN769=null;
		Token COMMA770=null;
		Token GREATERTHAN771=null;
		ParserRuleReturnScope left =null;
		ParserRuleReturnScope right =null;

		CommonTree KW_MAP768_tree=null;
		CommonTree LESSTHAN769_tree=null;
		CommonTree COMMA770_tree=null;
		CommonTree GREATERTHAN771_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");

		 pushMsg("map type", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1992:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
			// D:\\temp\\antlr\\HiveParser.g:1992:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
			{
			KW_MAP768=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType12406);  
			stream_KW_MAP.add(KW_MAP768);

			LESSTHAN769=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType12408);  
			stream_LESSTHAN.add(LESSTHAN769);

			pushFollow(FOLLOW_primitiveType_in_mapType12412);
			left=primitiveType();
			state._fsp--;

			stream_primitiveType.add(left.getTree());
			COMMA770=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType12414);  
			stream_COMMA.add(COMMA770);

			pushFollow(FOLLOW_type_in_mapType12418);
			right=type();
			state._fsp--;

			stream_type.add(right.getTree());
			GREATERTHAN771=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType12420);  
			stream_GREATERTHAN.add(GREATERTHAN771);

			// AST REWRITE
			// elements: left, right
			// token labels: 
			// rule labels: retval, left, right
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.getTree():null);
			RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1993:5: -> ^( TOK_MAP $left $right)
			{
				// D:\\temp\\antlr\\HiveParser.g:1993:8: ^( TOK_MAP $left $right)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_MAP, "TOK_MAP"), root_1);
				adaptor.addChild(root_1, stream_left.nextTree());
				adaptor.addChild(root_1, stream_right.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "mapType"


	public static class unionType_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unionType"
	// D:\\temp\\antlr\\HiveParser.g:1996:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
	public final HiveParser.unionType_return unionType() throws RecognitionException {
		HiveParser.unionType_return retval = new HiveParser.unionType_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNIONTYPE772=null;
		Token LESSTHAN773=null;
		Token GREATERTHAN775=null;
		ParserRuleReturnScope colTypeList774 =null;

		CommonTree KW_UNIONTYPE772_tree=null;
		CommonTree LESSTHAN773_tree=null;
		CommonTree GREATERTHAN775_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");

		 pushMsg("uniontype type", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:1999:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
			// D:\\temp\\antlr\\HiveParser.g:1999:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
			{
			KW_UNIONTYPE772=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType12463);  
			stream_KW_UNIONTYPE.add(KW_UNIONTYPE772);

			LESSTHAN773=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType12465);  
			stream_LESSTHAN.add(LESSTHAN773);

			pushFollow(FOLLOW_colTypeList_in_unionType12467);
			colTypeList774=colTypeList();
			state._fsp--;

			stream_colTypeList.add(colTypeList774.getTree());
			GREATERTHAN775=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType12469);  
			stream_GREATERTHAN.add(GREATERTHAN775);

			// AST REWRITE
			// elements: colTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 1999:53: -> ^( TOK_UNIONTYPE colTypeList )
			{
				// D:\\temp\\antlr\\HiveParser.g:1999:56: ^( TOK_UNIONTYPE colTypeList )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);
				adaptor.addChild(root_1, stream_colTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unionType"


	public static class setOperator_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "setOperator"
	// D:\\temp\\antlr\\HiveParser.g:2002:1: setOperator : KW_UNION KW_ALL -> ^( TOK_UNION ) ;
	public final HiveParser.setOperator_return setOperator() throws RecognitionException {
		HiveParser.setOperator_return retval = new HiveParser.setOperator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_UNION776=null;
		Token KW_ALL777=null;

		CommonTree KW_UNION776_tree=null;
		CommonTree KW_ALL777_tree=null;
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");

		 pushMsg("set operator", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:2005:5: ( KW_UNION KW_ALL -> ^( TOK_UNION ) )
			// D:\\temp\\antlr\\HiveParser.g:2005:7: KW_UNION KW_ALL
			{
			KW_UNION776=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator12504);  
			stream_KW_UNION.add(KW_UNION776);

			KW_ALL777=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator12506);  
			stream_KW_ALL.add(KW_ALL777);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2005:23: -> ^( TOK_UNION )
			{
				// D:\\temp\\antlr\\HiveParser.g:2005:26: ^( TOK_UNION )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_UNION, "TOK_UNION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setOperator"


	public static class queryStatementExpression_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpression"
	// D:\\temp\\antlr\\HiveParser.g:2008:1: queryStatementExpression[boolean topLevel] : (w= withClause {...}?)? queryStatementExpressionBody[topLevel] -> queryStatementExpressionBody ;
	public final HiveParser.queryStatementExpression_return queryStatementExpression(boolean topLevel) throws RecognitionException {
		HiveParser.queryStatementExpression_return retval = new HiveParser.queryStatementExpression_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope queryStatementExpressionBody778 =null;

		RewriteRuleSubtreeStream stream_queryStatementExpressionBody=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpressionBody");
		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2009:5: ( (w= withClause {...}?)? queryStatementExpressionBody[topLevel] -> queryStatementExpressionBody )
			// D:\\temp\\antlr\\HiveParser.g:2014:5: (w= withClause {...}?)? queryStatementExpressionBody[topLevel]
			{
			// D:\\temp\\antlr\\HiveParser.g:2014:5: (w= withClause {...}?)?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==KW_WITH) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2014:6: w= withClause {...}?
					{
					pushFollow(FOLLOW_withClause_in_queryStatementExpression12543);
					w=withClause();
					state._fsp--;

					stream_withClause.add(w.getTree());
					if ( !((topLevel)) ) {
						throw new FailedPredicateException(input, "queryStatementExpression", "topLevel");
					}
					}
					break;

			}

			pushFollow(FOLLOW_queryStatementExpressionBody_in_queryStatementExpression12553);
			queryStatementExpressionBody778=queryStatementExpressionBody(topLevel);
			state._fsp--;

			stream_queryStatementExpressionBody.add(queryStatementExpressionBody778.getTree());

			      if ((w!=null?((CommonTree)w.getTree()):null) != null) {
			      adaptor.addChild((queryStatementExpressionBody778!=null?((CommonTree)queryStatementExpressionBody778.getTree()):null), (w!=null?((CommonTree)w.getTree()):null));
			      }
			    
			// AST REWRITE
			// elements: queryStatementExpressionBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2020:5: -> queryStatementExpressionBody
			{
				adaptor.addChild(root_0, stream_queryStatementExpressionBody.nextTree());
			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpression"


	public static class queryStatementExpressionBody_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpressionBody"
	// D:\\temp\\antlr\\HiveParser.g:2023:1: queryStatementExpressionBody[boolean topLevel] : ( fromStatement[topLevel] | regularBody[topLevel] );
	public final HiveParser.queryStatementExpressionBody_return queryStatementExpressionBody(boolean topLevel) throws RecognitionException {
		HiveParser.queryStatementExpressionBody_return retval = new HiveParser.queryStatementExpressionBody_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope fromStatement779 =null;
		ParserRuleReturnScope regularBody780 =null;


		try {
			// D:\\temp\\antlr\\HiveParser.g:2024:5: ( fromStatement[topLevel] | regularBody[topLevel] )
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==KW_FROM) ) {
				alt204=1;
			}
			else if ( (LA204_0==KW_INSERT||LA204_0==KW_MAP||LA204_0==KW_REDUCE||LA204_0==KW_SELECT) ) {
				alt204=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 204, 0, input);
				throw nvae;
			}

			switch (alt204) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2025:5: fromStatement[topLevel]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fromStatement_in_queryStatementExpressionBody12587);
					fromStatement779=fromStatement(topLevel);
					state._fsp--;

					adaptor.addChild(root_0, fromStatement779.getTree());

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:2026:7: regularBody[topLevel]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_regularBody_in_queryStatementExpressionBody12596);
					regularBody780=regularBody(topLevel);
					state._fsp--;

					adaptor.addChild(root_0, regularBody780.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpressionBody"


	public static class withClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "withClause"
	// D:\\temp\\antlr\\HiveParser.g:2029:1: withClause : KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) ;
	public final HiveParser.withClause_return withClause() throws RecognitionException {
		HiveParser.withClause_return retval = new HiveParser.withClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_WITH781=null;
		Token COMMA783=null;
		ParserRuleReturnScope cteStatement782 =null;
		ParserRuleReturnScope cteStatement784 =null;

		CommonTree KW_WITH781_tree=null;
		CommonTree COMMA783_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_cteStatement=new RewriteRuleSubtreeStream(adaptor,"rule cteStatement");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2030:3: ( KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:2031:3: KW_WITH cteStatement ( COMMA cteStatement )*
			{
			KW_WITH781=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withClause12614);  
			stream_KW_WITH.add(KW_WITH781);

			pushFollow(FOLLOW_cteStatement_in_withClause12616);
			cteStatement782=cteStatement();
			state._fsp--;

			stream_cteStatement.add(cteStatement782.getTree());
			// D:\\temp\\antlr\\HiveParser.g:2031:24: ( COMMA cteStatement )*
			loop205:
			while (true) {
				int alt205=2;
				int LA205_0 = input.LA(1);
				if ( (LA205_0==COMMA) ) {
					alt205=1;
				}

				switch (alt205) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2031:25: COMMA cteStatement
					{
					COMMA783=(Token)match(input,COMMA,FOLLOW_COMMA_in_withClause12619);  
					stream_COMMA.add(COMMA783);

					pushFollow(FOLLOW_cteStatement_in_withClause12621);
					cteStatement784=cteStatement();
					state._fsp--;

					stream_cteStatement.add(cteStatement784.getTree());
					}
					break;

				default :
					break loop205;
				}
			}

			// AST REWRITE
			// elements: cteStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2031:46: -> ^( TOK_CTE ( cteStatement )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:2031:49: ^( TOK_CTE ( cteStatement )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_CTE, "TOK_CTE"), root_1);
				if ( !(stream_cteStatement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_cteStatement.hasNext() ) {
					adaptor.addChild(root_1, stream_cteStatement.nextTree());
				}
				stream_cteStatement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withClause"


	public static class cteStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cteStatement"
	// D:\\temp\\antlr\\HiveParser.g:2034:1: cteStatement : identifier KW_AS LPAREN queryStatementExpression[false] RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) ;
	public final HiveParser.cteStatement_return cteStatement() throws RecognitionException {
		HiveParser.cteStatement_return retval = new HiveParser.cteStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_AS786=null;
		Token LPAREN787=null;
		Token RPAREN789=null;
		ParserRuleReturnScope identifier785 =null;
		ParserRuleReturnScope queryStatementExpression788 =null;

		CommonTree KW_AS786_tree=null;
		CommonTree LPAREN787_tree=null;
		CommonTree RPAREN789_tree=null;
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2035:4: ( identifier KW_AS LPAREN queryStatementExpression[false] RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) )
			// D:\\temp\\antlr\\HiveParser.g:2036:4: identifier KW_AS LPAREN queryStatementExpression[false] RPAREN
			{
			pushFollow(FOLLOW_identifier_in_cteStatement12647);
			identifier785=identifier();
			state._fsp--;

			stream_identifier.add(identifier785.getTree());
			KW_AS786=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_cteStatement12649);  
			stream_KW_AS.add(KW_AS786);

			LPAREN787=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cteStatement12651);  
			stream_LPAREN.add(LPAREN787);

			pushFollow(FOLLOW_queryStatementExpression_in_cteStatement12653);
			queryStatementExpression788=queryStatementExpression(false);
			state._fsp--;

			stream_queryStatementExpression.add(queryStatementExpression788.getTree());
			RPAREN789=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cteStatement12656);  
			stream_RPAREN.add(RPAREN789);

			// AST REWRITE
			// elements: queryStatementExpression, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2037:4: -> ^( TOK_SUBQUERY queryStatementExpression identifier )
			{
				// D:\\temp\\antlr\\HiveParser.g:2037:7: ^( TOK_SUBQUERY queryStatementExpression identifier )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);
				adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cteStatement"


	public static class fromStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fromStatement"
	// D:\\temp\\antlr\\HiveParser.g:2040:1: fromStatement[boolean topLevel] : ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->;
	public final HiveParser.fromStatement_return fromStatement(boolean topLevel) throws RecognitionException {
		HiveParser.fromStatement_return retval = new HiveParser.fromStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope r =null;
		ParserRuleReturnScope singleFromStatement790 =null;

		RewriteRuleSubtreeStream stream_singleFromStatement=new RewriteRuleSubtreeStream(adaptor,"rule singleFromStatement");
		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2041:3: ( ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->)
			// D:\\temp\\antlr\\HiveParser.g:2041:3: ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			{
			// D:\\temp\\antlr\\HiveParser.g:2041:3: ( singleFromStatement -> singleFromStatement )
			// D:\\temp\\antlr\\HiveParser.g:2041:4: singleFromStatement
			{
			pushFollow(FOLLOW_singleFromStatement_in_fromStatement12680);
			singleFromStatement790=singleFromStatement();
			state._fsp--;

			stream_singleFromStatement.add(singleFromStatement790.getTree());
			// AST REWRITE
			// elements: singleFromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2041:25: -> singleFromStatement
			{
				adaptor.addChild(root_0, stream_singleFromStatement.nextTree());
			}


			retval.tree = root_0;

			}

			// D:\\temp\\antlr\\HiveParser.g:2042:2: (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			loop206:
			while (true) {
				int alt206=2;
				int LA206_0 = input.LA(1);
				if ( (LA206_0==KW_UNION) ) {
					alt206=1;
				}

				switch (alt206) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2042:3: u= setOperator r= singleFromStatement
					{
					pushFollow(FOLLOW_setOperator_in_fromStatement12692);
					u=setOperator();
					state._fsp--;

					stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_singleFromStatement_in_fromStatement12696);
					r=singleFromStatement();
					state._fsp--;

					stream_singleFromStatement.add(r.getTree());
					// AST REWRITE
					// elements: r, u
					// token labels: 
					// rule labels: retval, u, r
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.getTree():null);
					RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2043:4: -> ^( $u $r)
					{
						// D:\\temp\\antlr\\HiveParser.g:2043:7: ^( $u $r)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_r.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

				default :
					break loop206;
				}
			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2045:3: -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
			if (u != null && topLevel) {
				// D:\\temp\\antlr\\HiveParser.g:2045:31: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// D:\\temp\\antlr\\HiveParser.g:2046:9: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// D:\\temp\\antlr\\HiveParser.g:2047:11: ^( TOK_SUBQUERY )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// D:\\temp\\antlr\\HiveParser.g:2052:9: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// D:\\temp\\antlr\\HiveParser.g:2053:12: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// D:\\temp\\antlr\\HiveParser.g:2053:30: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// D:\\temp\\antlr\\HiveParser.g:2054:12: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// D:\\temp\\antlr\\HiveParser.g:2054:25: ^( TOK_SELEXPR TOK_ALLCOLREF )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2057:5: ->
			{
				adaptor.addChild(root_0, retval.tree);
			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fromStatement"


	public static class singleFromStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "singleFromStatement"
	// D:\\temp\\antlr\\HiveParser.g:2061:1: singleFromStatement : fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) ;
	public final HiveParser.singleFromStatement_return singleFromStatement() throws RecognitionException {
		HiveParser.singleFromStatement_return retval = new HiveParser.singleFromStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		List<Object> list_b=null;
		ParserRuleReturnScope fromClause791 =null;
		RuleReturnScope b = null;
		RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2062:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) )
			// D:\\temp\\antlr\\HiveParser.g:2063:5: fromClause (b+= body )+
			{
			pushFollow(FOLLOW_fromClause_in_singleFromStatement12903);
			fromClause791=fromClause();
			state._fsp--;

			stream_fromClause.add(fromClause791.getTree());
			// D:\\temp\\antlr\\HiveParser.g:2064:5: (b+= body )+
			int cnt207=0;
			loop207:
			while (true) {
				int alt207=2;
				int LA207_0 = input.LA(1);
				if ( (LA207_0==KW_INSERT||LA207_0==KW_MAP||LA207_0==KW_REDUCE||LA207_0==KW_SELECT) ) {
					alt207=1;
				}

				switch (alt207) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2064:7: b+= body
					{
					pushFollow(FOLLOW_body_in_singleFromStatement12913);
					b=body();
					state._fsp--;

					stream_body.add(b.getTree());
					if (list_b==null) list_b=new ArrayList<Object>();
					list_b.add(b.getTree());
					}
					break;

				default :
					if ( cnt207 >= 1 ) break loop207;
					EarlyExitException eee = new EarlyExitException(207, input);
					throw eee;
				}
				cnt207++;
			}

			// AST REWRITE
			// elements: fromClause, body
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2064:18: -> ^( TOK_QUERY fromClause ( body )+ )
			{
				// D:\\temp\\antlr\\HiveParser.g:2064:21: ^( TOK_QUERY fromClause ( body )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				adaptor.addChild(root_1, stream_fromClause.nextTree());
				if ( !(stream_body.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_body.hasNext() ) {
					adaptor.addChild(root_1, stream_body.nextTree());
				}
				stream_body.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "singleFromStatement"


	public static class regularBody_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "regularBody"
	// D:\\temp\\antlr\\HiveParser.g:2067:1: regularBody[boolean topLevel] : (i= insertClause s= selectStatement[topLevel] ->| selectStatement[topLevel] );
	public final HiveParser.regularBody_return regularBody(boolean topLevel) throws RecognitionException {
		HiveParser.regularBody_return retval = new HiveParser.regularBody_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope i =null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope selectStatement792 =null;

		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2068:4: (i= insertClause s= selectStatement[topLevel] ->| selectStatement[topLevel] )
			int alt208=2;
			int LA208_0 = input.LA(1);
			if ( (LA208_0==KW_INSERT) ) {
				alt208=1;
			}
			else if ( (LA208_0==KW_MAP||LA208_0==KW_REDUCE||LA208_0==KW_SELECT) ) {
				alt208=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 208, 0, input);
				throw nvae;
			}

			switch (alt208) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2069:4: i= insertClause s= selectStatement[topLevel]
					{
					pushFollow(FOLLOW_insertClause_in_regularBody12949);
					i=insertClause();
					state._fsp--;

					stream_insertClause.add(i.getTree());
					pushFollow(FOLLOW_selectStatement_in_regularBody12956);
					s=selectStatement(topLevel);
					state._fsp--;

					stream_selectStatement.add(s.getTree());
					(s!=null?((CommonTree)s.getTree()):null).getChild(1).replaceChildren(0, 0, (i!=null?((CommonTree)i.getTree()):null));
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2071:60: ->
					{
						adaptor.addChild(root_0, (s!=null?((CommonTree)s.getTree()):null));
					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:2073:4: selectStatement[topLevel]
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_selectStatement_in_regularBody12978);
					selectStatement792=selectStatement(topLevel);
					state._fsp--;

					adaptor.addChild(root_0, selectStatement792.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "regularBody"


	public static class selectStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectStatement"
	// D:\\temp\\antlr\\HiveParser.g:2076:2: selectStatement[boolean topLevel] : ( singleSelectStatement -> singleSelectStatement ) (u= setOperator b= singleSelectStatement -> ^( $u $b) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->;
	public final HiveParser.selectStatement_return selectStatement(boolean topLevel) throws RecognitionException {
		HiveParser.selectStatement_return retval = new HiveParser.selectStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope b =null;
		ParserRuleReturnScope singleSelectStatement793 =null;

		RewriteRuleSubtreeStream stream_singleSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule singleSelectStatement");
		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2077:2: ( ( singleSelectStatement -> singleSelectStatement ) (u= setOperator b= singleSelectStatement -> ^( $u $b) )* -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ->)
			// D:\\temp\\antlr\\HiveParser.g:2077:4: ( singleSelectStatement -> singleSelectStatement ) (u= setOperator b= singleSelectStatement -> ^( $u $b) )*
			{
			// D:\\temp\\antlr\\HiveParser.g:2077:4: ( singleSelectStatement -> singleSelectStatement )
			// D:\\temp\\antlr\\HiveParser.g:2077:5: singleSelectStatement
			{
			pushFollow(FOLLOW_singleSelectStatement_in_selectStatement12995);
			singleSelectStatement793=singleSelectStatement();
			state._fsp--;

			stream_singleSelectStatement.add(singleSelectStatement793.getTree());
			// AST REWRITE
			// elements: singleSelectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2077:27: -> singleSelectStatement
			{
				adaptor.addChild(root_0, stream_singleSelectStatement.nextTree());
			}


			retval.tree = root_0;

			}

			// D:\\temp\\antlr\\HiveParser.g:2078:4: (u= setOperator b= singleSelectStatement -> ^( $u $b) )*
			loop209:
			while (true) {
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==KW_UNION) ) {
					alt209=1;
				}

				switch (alt209) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2078:5: u= setOperator b= singleSelectStatement
					{
					pushFollow(FOLLOW_setOperator_in_selectStatement13008);
					u=setOperator();
					state._fsp--;

					stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_singleSelectStatement_in_selectStatement13012);
					b=singleSelectStatement();
					state._fsp--;

					stream_singleSelectStatement.add(b.getTree());
					// AST REWRITE
					// elements: b, u
					// token labels: 
					// rule labels: retval, u, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.getTree():null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2079:8: -> ^( $u $b)
					{
						// D:\\temp\\antlr\\HiveParser.g:2079:11: ^( $u $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_b.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

				default :
					break loop209;
				}
			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2081:4: -> {u != null && topLevel}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
			if (u != null && topLevel) {
				// D:\\temp\\antlr\\HiveParser.g:2081:32: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// D:\\temp\\antlr\\HiveParser.g:2082:10: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// D:\\temp\\antlr\\HiveParser.g:2083:12: ^( TOK_SUBQUERY )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// D:\\temp\\antlr\\HiveParser.g:2088:10: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// D:\\temp\\antlr\\HiveParser.g:2089:13: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// D:\\temp\\antlr\\HiveParser.g:2089:31: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// D:\\temp\\antlr\\HiveParser.g:2090:13: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// D:\\temp\\antlr\\HiveParser.g:2090:26: ^( TOK_SELEXPR TOK_ALLCOLREF )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2093:5: ->
			{
				adaptor.addChild(root_0, retval.tree);
			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatement"


	public static class singleSelectStatement_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "singleSelectStatement"
	// D:\\temp\\antlr\\HiveParser.g:2096:1: singleSelectStatement : selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) ) ;
	public final HiveParser.singleSelectStatement_return singleSelectStatement() throws RecognitionException {
		HiveParser.singleSelectStatement_return retval = new HiveParser.singleSelectStatement_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope selectClause794 =null;
		ParserRuleReturnScope fromClause795 =null;
		ParserRuleReturnScope whereClause796 =null;
		ParserRuleReturnScope groupByClause797 =null;
		ParserRuleReturnScope havingClause798 =null;
		ParserRuleReturnScope orderByClause799 =null;
		ParserRuleReturnScope clusterByClause800 =null;
		ParserRuleReturnScope distributeByClause801 =null;
		ParserRuleReturnScope sortByClause802 =null;
		ParserRuleReturnScope window_clause803 =null;
		ParserRuleReturnScope limitClause804 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2097:4: ( selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) ) )
			// D:\\temp\\antlr\\HiveParser.g:2098:4: selectClause ( fromClause )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )?
			{
			pushFollow(FOLLOW_selectClause_in_singleSelectStatement13234);
			selectClause794=selectClause();
			state._fsp--;

			stream_selectClause.add(selectClause794.getTree());
			// D:\\temp\\antlr\\HiveParser.g:2099:4: ( fromClause )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==KW_FROM) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2099:4: fromClause
					{
					pushFollow(FOLLOW_fromClause_in_singleSelectStatement13239);
					fromClause795=fromClause();
					state._fsp--;

					stream_fromClause.add(fromClause795.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2100:4: ( whereClause )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==KW_WHERE) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2100:4: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_singleSelectStatement13245);
					whereClause796=whereClause();
					state._fsp--;

					stream_whereClause.add(whereClause796.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2101:4: ( groupByClause )?
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==KW_GROUP) ) {
				alt212=1;
			}
			switch (alt212) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2101:4: groupByClause
					{
					pushFollow(FOLLOW_groupByClause_in_singleSelectStatement13251);
					groupByClause797=groupByClause();
					state._fsp--;

					stream_groupByClause.add(groupByClause797.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2102:4: ( havingClause )?
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==KW_HAVING) ) {
				alt213=1;
			}
			switch (alt213) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2102:4: havingClause
					{
					pushFollow(FOLLOW_havingClause_in_singleSelectStatement13257);
					havingClause798=havingClause();
					state._fsp--;

					stream_havingClause.add(havingClause798.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2103:4: ( orderByClause )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==KW_ORDER) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2103:4: orderByClause
					{
					pushFollow(FOLLOW_orderByClause_in_singleSelectStatement13263);
					orderByClause799=orderByClause();
					state._fsp--;

					stream_orderByClause.add(orderByClause799.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2104:4: ( clusterByClause )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==KW_CLUSTER) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2104:4: clusterByClause
					{
					pushFollow(FOLLOW_clusterByClause_in_singleSelectStatement13269);
					clusterByClause800=clusterByClause();
					state._fsp--;

					stream_clusterByClause.add(clusterByClause800.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2105:4: ( distributeByClause )?
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==KW_DISTRIBUTE) ) {
				alt216=1;
			}
			switch (alt216) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2105:4: distributeByClause
					{
					pushFollow(FOLLOW_distributeByClause_in_singleSelectStatement13275);
					distributeByClause801=distributeByClause();
					state._fsp--;

					stream_distributeByClause.add(distributeByClause801.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2106:4: ( sortByClause )?
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==KW_SORT) ) {
				alt217=1;
			}
			switch (alt217) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2106:4: sortByClause
					{
					pushFollow(FOLLOW_sortByClause_in_singleSelectStatement13281);
					sortByClause802=sortByClause();
					state._fsp--;

					stream_sortByClause.add(sortByClause802.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2107:4: ( window_clause )?
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==KW_WINDOW) ) {
				alt218=1;
			}
			switch (alt218) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2107:4: window_clause
					{
					pushFollow(FOLLOW_window_clause_in_singleSelectStatement13287);
					window_clause803=window_clause();
					state._fsp--;

					stream_window_clause.add(window_clause803.getTree());
					}
					break;

			}

			// D:\\temp\\antlr\\HiveParser.g:2108:4: ( limitClause )?
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==KW_LIMIT) ) {
				alt219=1;
			}
			switch (alt219) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2108:4: limitClause
					{
					pushFollow(FOLLOW_limitClause_in_singleSelectStatement13293);
					limitClause804=limitClause();
					state._fsp--;

					stream_limitClause.add(limitClause804.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: selectClause, window_clause, sortByClause, whereClause, havingClause, groupByClause, clusterByClause, fromClause, distributeByClause, orderByClause, limitClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2108:17: -> ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) )
			{
				// D:\\temp\\antlr\\HiveParser.g:2108:20: ^( TOK_QUERY ( fromClause )? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// D:\\temp\\antlr\\HiveParser.g:2108:32: ( fromClause )?
				if ( stream_fromClause.hasNext() ) {
					adaptor.addChild(root_1, stream_fromClause.nextTree());
				}
				stream_fromClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2108:44: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
				{
				CommonTree root_2 = (CommonTree)adaptor.nil();
				root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// D:\\temp\\antlr\\HiveParser.g:2108:57: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				CommonTree root_3 = (CommonTree)adaptor.nil();
				root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// D:\\temp\\antlr\\HiveParser.g:2108:75: ^( TOK_DIR TOK_TMP_FILE )
				{
				CommonTree root_4 = (CommonTree)adaptor.nil();
				root_4 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_2, stream_selectClause.nextTree());
				// D:\\temp\\antlr\\HiveParser.g:2109:35: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_2, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2109:48: ( groupByClause )?
				if ( stream_groupByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_groupByClause.nextTree());
				}
				stream_groupByClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2109:63: ( havingClause )?
				if ( stream_havingClause.hasNext() ) {
					adaptor.addChild(root_2, stream_havingClause.nextTree());
				}
				stream_havingClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2109:77: ( orderByClause )?
				if ( stream_orderByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_orderByClause.nextTree());
				}
				stream_orderByClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2109:92: ( clusterByClause )?
				if ( stream_clusterByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_clusterByClause.nextTree());
				}
				stream_clusterByClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2110:22: ( distributeByClause )?
				if ( stream_distributeByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_distributeByClause.nextTree());
				}
				stream_distributeByClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2110:42: ( sortByClause )?
				if ( stream_sortByClause.hasNext() ) {
					adaptor.addChild(root_2, stream_sortByClause.nextTree());
				}
				stream_sortByClause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2110:56: ( window_clause )?
				if ( stream_window_clause.hasNext() ) {
					adaptor.addChild(root_2, stream_window_clause.nextTree());
				}
				stream_window_clause.reset();

				// D:\\temp\\antlr\\HiveParser.g:2110:71: ( limitClause )?
				if ( stream_limitClause.hasNext() ) {
					adaptor.addChild(root_2, stream_limitClause.nextTree());
				}
				stream_limitClause.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "singleSelectStatement"


	public static class selectStatementWithCTE_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "selectStatementWithCTE"
	// D:\\temp\\antlr\\HiveParser.g:2113:1: selectStatementWithCTE : (w= withClause )? selectStatement[true] -> selectStatement ;
	public final HiveParser.selectStatementWithCTE_return selectStatementWithCTE() throws RecognitionException {
		HiveParser.selectStatementWithCTE_return retval = new HiveParser.selectStatementWithCTE_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope selectStatement805 =null;

		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2114:5: ( (w= withClause )? selectStatement[true] -> selectStatement )
			// D:\\temp\\antlr\\HiveParser.g:2115:5: (w= withClause )? selectStatement[true]
			{
			// D:\\temp\\antlr\\HiveParser.g:2115:5: (w= withClause )?
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==KW_WITH) ) {
				alt220=1;
			}
			switch (alt220) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2115:6: w= withClause
					{
					pushFollow(FOLLOW_withClause_in_selectStatementWithCTE13411);
					w=withClause();
					state._fsp--;

					stream_withClause.add(w.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_selectStatement_in_selectStatementWithCTE13419);
			selectStatement805=selectStatement(true);
			state._fsp--;

			stream_selectStatement.add(selectStatement805.getTree());

			      if ((w!=null?((CommonTree)w.getTree()):null) != null) {
			      adaptor.addChild((selectStatement805!=null?((CommonTree)selectStatement805.getTree()):null), (w!=null?((CommonTree)w.getTree()):null));
			      }
			    
			// AST REWRITE
			// elements: selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2121:5: -> selectStatement
			{
				adaptor.addChild(root_0, stream_selectStatement.nextTree());
			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatementWithCTE"


	public static class body_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "body"
	// D:\\temp\\antlr\\HiveParser.g:2124:1: body : ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) );
	public final HiveParser.body_return body() throws RecognitionException {
		HiveParser.body_return retval = new HiveParser.body_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope insertClause806 =null;
		ParserRuleReturnScope selectClause807 =null;
		ParserRuleReturnScope lateralView808 =null;
		ParserRuleReturnScope whereClause809 =null;
		ParserRuleReturnScope groupByClause810 =null;
		ParserRuleReturnScope havingClause811 =null;
		ParserRuleReturnScope orderByClause812 =null;
		ParserRuleReturnScope clusterByClause813 =null;
		ParserRuleReturnScope distributeByClause814 =null;
		ParserRuleReturnScope sortByClause815 =null;
		ParserRuleReturnScope window_clause816 =null;
		ParserRuleReturnScope limitClause817 =null;
		ParserRuleReturnScope selectClause818 =null;
		ParserRuleReturnScope lateralView819 =null;
		ParserRuleReturnScope whereClause820 =null;
		ParserRuleReturnScope groupByClause821 =null;
		ParserRuleReturnScope havingClause822 =null;
		ParserRuleReturnScope orderByClause823 =null;
		ParserRuleReturnScope clusterByClause824 =null;
		ParserRuleReturnScope distributeByClause825 =null;
		ParserRuleReturnScope sortByClause826 =null;
		ParserRuleReturnScope window_clause827 =null;
		ParserRuleReturnScope limitClause828 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_lateralView=new RewriteRuleSubtreeStream(adaptor,"rule lateralView");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");

		try {
			// D:\\temp\\antlr\\HiveParser.g:2125:4: ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) )
			int alt241=2;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==KW_INSERT) ) {
				alt241=1;
			}
			else if ( (LA241_0==KW_MAP||LA241_0==KW_REDUCE||LA241_0==KW_SELECT) ) {
				alt241=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 241, 0, input);
				throw nvae;
			}

			switch (alt241) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2126:4: insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )?
					{
					pushFollow(FOLLOW_insertClause_in_body13450);
					insertClause806=insertClause();
					state._fsp--;

					stream_insertClause.add(insertClause806.getTree());
					pushFollow(FOLLOW_selectClause_in_body13455);
					selectClause807=selectClause();
					state._fsp--;

					stream_selectClause.add(selectClause807.getTree());
					// D:\\temp\\antlr\\HiveParser.g:2128:4: ( lateralView )?
					int alt221=2;
					int LA221_0 = input.LA(1);
					if ( (LA221_0==KW_LATERAL) ) {
						alt221=1;
					}
					switch (alt221) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2128:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body13460);
							lateralView808=lateralView();
							state._fsp--;

							stream_lateralView.add(lateralView808.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2129:4: ( whereClause )?
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==KW_WHERE) ) {
						alt222=1;
					}
					switch (alt222) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2129:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body13466);
							whereClause809=whereClause();
							state._fsp--;

							stream_whereClause.add(whereClause809.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2130:4: ( groupByClause )?
					int alt223=2;
					int LA223_0 = input.LA(1);
					if ( (LA223_0==KW_GROUP) ) {
						alt223=1;
					}
					switch (alt223) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2130:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body13472);
							groupByClause810=groupByClause();
							state._fsp--;

							stream_groupByClause.add(groupByClause810.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2131:4: ( havingClause )?
					int alt224=2;
					int LA224_0 = input.LA(1);
					if ( (LA224_0==KW_HAVING) ) {
						alt224=1;
					}
					switch (alt224) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2131:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body13478);
							havingClause811=havingClause();
							state._fsp--;

							stream_havingClause.add(havingClause811.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2132:4: ( orderByClause )?
					int alt225=2;
					int LA225_0 = input.LA(1);
					if ( (LA225_0==KW_ORDER) ) {
						alt225=1;
					}
					switch (alt225) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2132:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body13484);
							orderByClause812=orderByClause();
							state._fsp--;

							stream_orderByClause.add(orderByClause812.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2133:4: ( clusterByClause )?
					int alt226=2;
					int LA226_0 = input.LA(1);
					if ( (LA226_0==KW_CLUSTER) ) {
						alt226=1;
					}
					switch (alt226) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2133:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body13490);
							clusterByClause813=clusterByClause();
							state._fsp--;

							stream_clusterByClause.add(clusterByClause813.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2134:4: ( distributeByClause )?
					int alt227=2;
					int LA227_0 = input.LA(1);
					if ( (LA227_0==KW_DISTRIBUTE) ) {
						alt227=1;
					}
					switch (alt227) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2134:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body13496);
							distributeByClause814=distributeByClause();
							state._fsp--;

							stream_distributeByClause.add(distributeByClause814.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2135:4: ( sortByClause )?
					int alt228=2;
					int LA228_0 = input.LA(1);
					if ( (LA228_0==KW_SORT) ) {
						alt228=1;
					}
					switch (alt228) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2135:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body13502);
							sortByClause815=sortByClause();
							state._fsp--;

							stream_sortByClause.add(sortByClause815.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2136:4: ( window_clause )?
					int alt229=2;
					int LA229_0 = input.LA(1);
					if ( (LA229_0==KW_WINDOW) ) {
						alt229=1;
					}
					switch (alt229) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2136:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body13508);
							window_clause816=window_clause();
							state._fsp--;

							stream_window_clause.add(window_clause816.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2137:4: ( limitClause )?
					int alt230=2;
					int LA230_0 = input.LA(1);
					if ( (LA230_0==KW_LIMIT) ) {
						alt230=1;
					}
					switch (alt230) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2137:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body13514);
							limitClause817=limitClause();
							state._fsp--;

							stream_limitClause.add(limitClause817.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: sortByClause, whereClause, orderByClause, limitClause, window_clause, distributeByClause, clusterByClause, selectClause, insertClause, groupByClause, lateralView, havingClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2137:17: -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:2137:20: ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						adaptor.addChild(root_1, stream_insertClause.nextTree());
						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:2138:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// D:\\temp\\antlr\\HiveParser.g:2138:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2138:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2138:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2138:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2138:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2139:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2139:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2139:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2139:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:2141:4: selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )?
					{
					pushFollow(FOLLOW_selectClause_in_body13607);
					selectClause818=selectClause();
					state._fsp--;

					stream_selectClause.add(selectClause818.getTree());
					// D:\\temp\\antlr\\HiveParser.g:2142:4: ( lateralView )?
					int alt231=2;
					int LA231_0 = input.LA(1);
					if ( (LA231_0==KW_LATERAL) ) {
						alt231=1;
					}
					switch (alt231) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2142:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body13612);
							lateralView819=lateralView();
							state._fsp--;

							stream_lateralView.add(lateralView819.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2143:4: ( whereClause )?
					int alt232=2;
					int LA232_0 = input.LA(1);
					if ( (LA232_0==KW_WHERE) ) {
						alt232=1;
					}
					switch (alt232) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2143:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body13618);
							whereClause820=whereClause();
							state._fsp--;

							stream_whereClause.add(whereClause820.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2144:4: ( groupByClause )?
					int alt233=2;
					int LA233_0 = input.LA(1);
					if ( (LA233_0==KW_GROUP) ) {
						alt233=1;
					}
					switch (alt233) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2144:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body13624);
							groupByClause821=groupByClause();
							state._fsp--;

							stream_groupByClause.add(groupByClause821.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2145:4: ( havingClause )?
					int alt234=2;
					int LA234_0 = input.LA(1);
					if ( (LA234_0==KW_HAVING) ) {
						alt234=1;
					}
					switch (alt234) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2145:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body13630);
							havingClause822=havingClause();
							state._fsp--;

							stream_havingClause.add(havingClause822.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2146:4: ( orderByClause )?
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( (LA235_0==KW_ORDER) ) {
						alt235=1;
					}
					switch (alt235) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2146:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body13636);
							orderByClause823=orderByClause();
							state._fsp--;

							stream_orderByClause.add(orderByClause823.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2147:4: ( clusterByClause )?
					int alt236=2;
					int LA236_0 = input.LA(1);
					if ( (LA236_0==KW_CLUSTER) ) {
						alt236=1;
					}
					switch (alt236) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2147:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body13642);
							clusterByClause824=clusterByClause();
							state._fsp--;

							stream_clusterByClause.add(clusterByClause824.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2148:4: ( distributeByClause )?
					int alt237=2;
					int LA237_0 = input.LA(1);
					if ( (LA237_0==KW_DISTRIBUTE) ) {
						alt237=1;
					}
					switch (alt237) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2148:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body13648);
							distributeByClause825=distributeByClause();
							state._fsp--;

							stream_distributeByClause.add(distributeByClause825.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2149:4: ( sortByClause )?
					int alt238=2;
					int LA238_0 = input.LA(1);
					if ( (LA238_0==KW_SORT) ) {
						alt238=1;
					}
					switch (alt238) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2149:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body13654);
							sortByClause826=sortByClause();
							state._fsp--;

							stream_sortByClause.add(sortByClause826.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2150:4: ( window_clause )?
					int alt239=2;
					int LA239_0 = input.LA(1);
					if ( (LA239_0==KW_WINDOW) ) {
						alt239=1;
					}
					switch (alt239) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2150:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body13660);
							window_clause827=window_clause();
							state._fsp--;

							stream_window_clause.add(window_clause827.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2151:4: ( limitClause )?
					int alt240=2;
					int LA240_0 = input.LA(1);
					if ( (LA240_0==KW_LIMIT) ) {
						alt240=1;
					}
					switch (alt240) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2151:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body13666);
							limitClause828=limitClause();
							state._fsp--;

							stream_limitClause.add(limitClause828.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: whereClause, groupByClause, distributeByClause, window_clause, havingClause, limitClause, selectClause, clusterByClause, orderByClause, lateralView, sortByClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2151:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:2151:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						// D:\\temp\\antlr\\HiveParser.g:2151:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);
						// D:\\temp\\antlr\\HiveParser.g:2151:51: ^( TOK_DIR TOK_TMP_FILE )
						{
						CommonTree root_3 = (CommonTree)adaptor.nil();
						root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_3);
						adaptor.addChild(root_3, (CommonTree)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:2152:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// D:\\temp\\antlr\\HiveParser.g:2152:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2152:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2152:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2152:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2152:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2153:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2153:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2153:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// D:\\temp\\antlr\\HiveParser.g:2153:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class insertClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "insertClause"
	// D:\\temp\\antlr\\HiveParser.g:2156:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO tableOrPartition ) );
	public final HiveParser.insertClause_return insertClause() throws RecognitionException {
		HiveParser.insertClause_return retval = new HiveParser.insertClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_INSERT829=null;
		Token KW_OVERWRITE830=null;
		Token KW_INSERT833=null;
		Token KW_INTO834=null;
		Token KW_TABLE835=null;
		ParserRuleReturnScope destination831 =null;
		ParserRuleReturnScope ifNotExists832 =null;
		ParserRuleReturnScope tableOrPartition836 =null;

		CommonTree KW_INSERT829_tree=null;
		CommonTree KW_OVERWRITE830_tree=null;
		CommonTree KW_INSERT833_tree=null;
		CommonTree KW_INTO834_tree=null;
		CommonTree KW_TABLE835_tree=null;
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");

		 pushMsg("insert clause", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:2159:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO tableOrPartition ) )
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==KW_INSERT) ) {
				int LA243_1 = input.LA(2);
				if ( (LA243_1==KW_OVERWRITE) ) {
					alt243=1;
				}
				else if ( (LA243_1==KW_INTO) ) {
					alt243=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 243, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 243, 0, input);
				throw nvae;
			}

			switch (alt243) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2160:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
					{
					KW_INSERT829=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause13787);  
					stream_KW_INSERT.add(KW_INSERT829);

					KW_OVERWRITE830=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause13789);  
					stream_KW_OVERWRITE.add(KW_OVERWRITE830);

					pushFollow(FOLLOW_destination_in_insertClause13791);
					destination831=destination();
					state._fsp--;

					stream_destination.add(destination831.getTree());
					// D:\\temp\\antlr\\HiveParser.g:2160:41: ( ifNotExists )?
					int alt242=2;
					int LA242_0 = input.LA(1);
					if ( (LA242_0==KW_IF) ) {
						alt242=1;
					}
					switch (alt242) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2160:41: ifNotExists
							{
							pushFollow(FOLLOW_ifNotExists_in_insertClause13793);
							ifNotExists832=ifNotExists();
							state._fsp--;

							stream_ifNotExists.add(ifNotExists832.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: destination, ifNotExists
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2160:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:2160:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);
						adaptor.addChild(root_1, stream_destination.nextTree());
						// D:\\temp\\antlr\\HiveParser.g:2160:87: ( ifNotExists )?
						if ( stream_ifNotExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifNotExists.nextTree());
						}
						stream_ifNotExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:2161:6: KW_INSERT KW_INTO KW_TABLE tableOrPartition
					{
					KW_INSERT833=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause13812);  
					stream_KW_INSERT.add(KW_INSERT833);

					KW_INTO834=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause13814);  
					stream_KW_INTO.add(KW_INTO834);

					KW_TABLE835=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause13816);  
					stream_KW_TABLE.add(KW_TABLE835);

					pushFollow(FOLLOW_tableOrPartition_in_insertClause13818);
					tableOrPartition836=tableOrPartition();
					state._fsp--;

					stream_tableOrPartition.add(tableOrPartition836.getTree());
					// AST REWRITE
					// elements: tableOrPartition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2162:8: -> ^( TOK_INSERT_INTO tableOrPartition )
					{
						// D:\\temp\\antlr\\HiveParser.g:2162:11: ^( TOK_INSERT_INTO tableOrPartition )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO"), root_1);
						adaptor.addChild(root_1, stream_tableOrPartition.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insertClause"


	public static class destination_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "destination"
	// D:\\temp\\antlr\\HiveParser.g:2165:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_LOCAL_DIR StringLiteral ( tableRowFormat )? ( tableFileFormat )? ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> tableOrPartition );
	public final HiveParser.destination_return destination() throws RecognitionException {
		HiveParser.destination_return retval = new HiveParser.destination_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token KW_LOCAL837=null;
		Token KW_DIRECTORY838=null;
		Token StringLiteral839=null;
		Token KW_DIRECTORY842=null;
		Token StringLiteral843=null;
		Token KW_TABLE844=null;
		ParserRuleReturnScope tableRowFormat840 =null;
		ParserRuleReturnScope tableFileFormat841 =null;
		ParserRuleReturnScope tableOrPartition845 =null;

		CommonTree KW_LOCAL837_tree=null;
		CommonTree KW_DIRECTORY838_tree=null;
		CommonTree StringLiteral839_tree=null;
		CommonTree KW_DIRECTORY842_tree=null;
		CommonTree StringLiteral843_tree=null;
		CommonTree KW_TABLE844_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");

		 pushMsg("destination specification", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:2168:4: ( KW_LOCAL KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_LOCAL_DIR StringLiteral ( tableRowFormat )? ( tableFileFormat )? ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> tableOrPartition )
			int alt246=3;
			switch ( input.LA(1) ) {
			case KW_LOCAL:
				{
				alt246=1;
				}
				break;
			case KW_DIRECTORY:
				{
				alt246=2;
				}
				break;
			case KW_TABLE:
				{
				alt246=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 246, 0, input);
				throw nvae;
			}
			switch (alt246) {
				case 1 :
					// D:\\temp\\antlr\\HiveParser.g:2169:6: KW_LOCAL KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )?
					{
					KW_LOCAL837=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination13863);  
					stream_KW_LOCAL.add(KW_LOCAL837);

					KW_DIRECTORY838=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination13865);  
					stream_KW_DIRECTORY.add(KW_DIRECTORY838);

					StringLiteral839=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination13867);  
					stream_StringLiteral.add(StringLiteral839);

					// D:\\temp\\antlr\\HiveParser.g:2169:42: ( tableRowFormat )?
					int alt244=2;
					int LA244_0 = input.LA(1);
					if ( (LA244_0==KW_ROW) ) {
						alt244=1;
					}
					switch (alt244) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2169:42: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_destination13869);
							tableRowFormat840=tableRowFormat();
							state._fsp--;

							stream_tableRowFormat.add(tableRowFormat840.getTree());
							}
							break;

					}

					// D:\\temp\\antlr\\HiveParser.g:2169:58: ( tableFileFormat )?
					int alt245=2;
					int LA245_0 = input.LA(1);
					if ( (LA245_0==KW_STORED) ) {
						alt245=1;
					}
					switch (alt245) {
						case 1 :
							// D:\\temp\\antlr\\HiveParser.g:2169:58: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_destination13872);
							tableFileFormat841=tableFileFormat();
							state._fsp--;

							stream_tableFileFormat.add(tableFileFormat841.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tableFileFormat, StringLiteral, tableRowFormat
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2169:75: -> ^( TOK_LOCAL_DIR StringLiteral ( tableRowFormat )? ( tableFileFormat )? )
					{
						// D:\\temp\\antlr\\HiveParser.g:2169:78: ^( TOK_LOCAL_DIR StringLiteral ( tableRowFormat )? ( tableFileFormat )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LOCAL_DIR, "TOK_LOCAL_DIR"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						// D:\\temp\\antlr\\HiveParser.g:2169:108: ( tableRowFormat )?
						if ( stream_tableRowFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
						}
						stream_tableRowFormat.reset();

						// D:\\temp\\antlr\\HiveParser.g:2169:124: ( tableFileFormat )?
						if ( stream_tableFileFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
						}
						stream_tableFileFormat.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 2 :
					// D:\\temp\\antlr\\HiveParser.g:2170:6: KW_DIRECTORY StringLiteral
					{
					KW_DIRECTORY842=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination13894);  
					stream_KW_DIRECTORY.add(KW_DIRECTORY842);

					StringLiteral843=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination13896);  
					stream_StringLiteral.add(StringLiteral843);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2170:33: -> ^( TOK_DIR StringLiteral )
					{
						// D:\\temp\\antlr\\HiveParser.g:2170:36: ^( TOK_DIR StringLiteral )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_DIR, "TOK_DIR"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;

					}
					break;
				case 3 :
					// D:\\temp\\antlr\\HiveParser.g:2171:6: KW_TABLE tableOrPartition
					{
					KW_TABLE844=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination13911);  
					stream_KW_TABLE.add(KW_TABLE844);

					pushFollow(FOLLOW_tableOrPartition_in_destination13913);
					tableOrPartition845=tableOrPartition();
					state._fsp--;

					stream_tableOrPartition.add(tableOrPartition845.getTree());
					// AST REWRITE
					// elements: tableOrPartition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 2171:32: -> tableOrPartition
					{
						adaptor.addChild(root_0, stream_tableOrPartition.nextTree());
					}


					retval.tree = root_0;

					}
					break;

			}
			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "destination"


	public static class limitClause_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "limitClause"
	// D:\\temp\\antlr\\HiveParser.g:2174:1: limitClause : KW_LIMIT num= Number -> ^( TOK_LIMIT $num) ;
	public final HiveParser.limitClause_return limitClause() throws RecognitionException {
		HiveParser.limitClause_return retval = new HiveParser.limitClause_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token num=null;
		Token KW_LIMIT846=null;

		CommonTree num_tree=null;
		CommonTree KW_LIMIT846_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");

		 pushMsg("limit clause", state); 
		try {
			// D:\\temp\\antlr\\HiveParser.g:2177:4: ( KW_LIMIT num= Number -> ^( TOK_LIMIT $num) )
			// D:\\temp\\antlr\\HiveParser.g:2178:4: KW_LIMIT num= Number
			{
			KW_LIMIT846=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause13945);  
			stream_KW_LIMIT.add(KW_LIMIT846);

			num=(Token)match(input,Number,FOLLOW_Number_in_limitClause13949);  
			stream_Number.add(num);

			// AST REWRITE
			// elements: num
			// token labels: num
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 2178:24: -> ^( TOK_LIMIT $num)
			{
				// D:\\temp\\antlr\\HiveParser.g:2178:27: ^( TOK_LIMIT $num)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;

			}

			retval.stop = input.LT(-1);

			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

			 popMsg(state); 
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limitClause"

	// Delegated rules
	public HiveParser_SelectClauseParser.window_defn_return window_defn() throws RecognitionException { return gSelectClauseParser.window_defn(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorOperator(); }

	public HiveParser_IdentifiersParser.descFuncNames_return descFuncNames() throws RecognitionException { return gIdentifiersParser.descFuncNames(); }

	public HiveParser_FromClauseParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException { return gFromClauseParser.uniqueJoinToken(); }

	public HiveParser_IdentifiersParser.nullCondition_return nullCondition() throws RecognitionException { return gIdentifiersParser.nullCondition(); }

	public HiveParser_FromClauseParser.tableSource_return tableSource() throws RecognitionException { return gFromClauseParser.tableSource(); }

	public HiveParser_SelectClauseParser.hintArgs_return hintArgs() throws RecognitionException { return gSelectClauseParser.hintArgs(); }

	public HiveParser_FromClauseParser.tableOrColumn_return tableOrColumn() throws RecognitionException { return gFromClauseParser.tableOrColumn(); }

	public HiveParser_IdentifiersParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualOperator(); }

	public HiveParser_IdentifiersParser.sysFuncNames_return sysFuncNames() throws RecognitionException { return gIdentifiersParser.sysFuncNames(); }

	public HiveParser_IdentifiersParser.expression_return expression() throws RecognitionException { return gIdentifiersParser.expression(); }

	public HiveParser_IdentifiersParser.partitionVal_return partitionVal() throws RecognitionException { return gIdentifiersParser.partitionVal(); }

	public HiveParser_SelectClauseParser.selectExpressionList_return selectExpressionList() throws RecognitionException { return gSelectClauseParser.selectExpressionList(); }

	public HiveParser_FromClauseParser.subQuerySource_return subQuerySource() throws RecognitionException { return gFromClauseParser.subQuerySource(); }

	public HiveParser_IdentifiersParser.groupByExpression_return groupByExpression() throws RecognitionException { return gIdentifiersParser.groupByExpression(); }

	public HiveParser_IdentifiersParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException { return gIdentifiersParser.stringLiteralSequence(); }

	public HiveParser_SelectClauseParser.window_frame_start_boundary_return window_frame_start_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_start_boundary(); }

	public HiveParser_IdentifiersParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException { return gIdentifiersParser.precedenceStarExpression(); }

	public HiveParser_IdentifiersParser.dateLiteral_return dateLiteral() throws RecognitionException { return gIdentifiersParser.dateLiteral(); }

	public HiveParser_SelectClauseParser.hintItem_return hintItem() throws RecognitionException { return gSelectClauseParser.hintItem(); }

	public HiveParser_IdentifiersParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnaryPrefixExpression(); }

	public HiveParser_SelectClauseParser.window_specification_return window_specification() throws RecognitionException { return gSelectClauseParser.window_specification(); }

	public HiveParser_SelectClauseParser.hintClause_return hintClause() throws RecognitionException { return gSelectClauseParser.hintClause(); }

	public HiveParser_FromClauseParser.tableBucketSample_return tableBucketSample() throws RecognitionException { return gFromClauseParser.tableBucketSample(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseXorExpression(); }

	public HiveParser_IdentifiersParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException { return gIdentifiersParser.precedenceAndOperator(); }

	public HiveParser_SelectClauseParser.window_range_expression_return window_range_expression() throws RecognitionException { return gSelectClauseParser.window_range_expression(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrExpression(); }

	public HiveParser_IdentifiersParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException { return gIdentifiersParser.precedenceNotExpression(); }

	public HiveParser_IdentifiersParser.partitionSpec_return partitionSpec() throws RecognitionException { return gIdentifiersParser.partitionSpec(); }

	public HiveParser_FromClauseParser.tableSample_return tableSample() throws RecognitionException { return gFromClauseParser.tableSample(); }

	public HiveParser_IdentifiersParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException { return gIdentifiersParser.precedenceOrExpression(); }

	public HiveParser_FromClauseParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException { return gFromClauseParser.uniqueJoinSource(); }

	public HiveParser_IdentifiersParser.precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator() throws RecognitionException { return gIdentifiersParser.precedenceEqualNegatableOperator(); }

	public HiveParser_SelectClauseParser.window_frame_return window_frame() throws RecognitionException { return gSelectClauseParser.window_frame(); }

	public HiveParser_FromClauseParser.lateralView_return lateralView() throws RecognitionException { return gFromClauseParser.lateralView(); }

	public HiveParser_IdentifiersParser.subQueryExpression_return subQueryExpression() throws RecognitionException { return gIdentifiersParser.subQueryExpression(); }

	public HiveParser_IdentifiersParser.sortByClause_return sortByClause() throws RecognitionException { return gIdentifiersParser.sortByClause(); }

	public HiveParser_SelectClauseParser.hintName_return hintName() throws RecognitionException { return gSelectClauseParser.hintName(); }

	public HiveParser_IdentifiersParser.orderByClause_return orderByClause() throws RecognitionException { return gIdentifiersParser.orderByClause(); }

	public HiveParser_FromClauseParser.joinSource_return joinSource() throws RecognitionException { return gFromClauseParser.joinSource(); }

	public HiveParser_IdentifiersParser.groupByClause_return groupByClause() throws RecognitionException { return gIdentifiersParser.groupByClause(); }

	public HiveParser_FromClauseParser.searchCondition_return searchCondition() throws RecognitionException { return gFromClauseParser.searchCondition(); }

	public HiveParser_SelectClauseParser.window_frame_boundary_return window_frame_boundary() throws RecognitionException { return gSelectClauseParser.window_frame_boundary(); }

	public HiveParser_IdentifiersParser.caseExpression_return caseExpression() throws RecognitionException { return gIdentifiersParser.caseExpression(); }

	public HiveParser_IdentifiersParser.nonReserved_return nonReserved() throws RecognitionException { return gIdentifiersParser.nonReserved(); }

	public HiveParser_IdentifiersParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandExpression(); }

	public HiveParser_IdentifiersParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException { return gIdentifiersParser.precedenceFieldExpression(); }

	public HiveParser_IdentifiersParser.groupingSetExpression_return groupingSetExpression() throws RecognitionException { return gIdentifiersParser.groupingSetExpression(); }

	public HiveParser_IdentifiersParser.constant_return constant() throws RecognitionException { return gIdentifiersParser.constant(); }

	public HiveParser_IdentifiersParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException { return gIdentifiersParser.precedencePlusExpression(); }

	public HiveParser_IdentifiersParser.tableOrPartition_return tableOrPartition() throws RecognitionException { return gIdentifiersParser.tableOrPartition(); }

	public HiveParser_IdentifiersParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceBitwiseOrOperator(); }

	public HiveParser_SelectClauseParser.hintList_return hintList() throws RecognitionException { return gSelectClauseParser.hintList(); }

	public HiveParser_IdentifiersParser.atomExpression_return atomExpression() throws RecognitionException { return gIdentifiersParser.atomExpression(); }

	public HiveParser_IdentifiersParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException { return gIdentifiersParser.precedenceAndExpression(); }

	public HiveParser_IdentifiersParser.dropPartitionVal_return dropPartitionVal() throws RecognitionException { return gIdentifiersParser.dropPartitionVal(); }

	public HiveParser_IdentifiersParser.expressions_return expressions() throws RecognitionException { return gIdentifiersParser.expressions(); }

	public HiveParser_IdentifiersParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException { return gIdentifiersParser.precedenceNotOperator(); }

	public HiveParser_IdentifiersParser.functionIdentifier_return functionIdentifier() throws RecognitionException { return gIdentifiersParser.functionIdentifier(); }

	public HiveParser_FromClauseParser.splitSample_return splitSample() throws RecognitionException { return gFromClauseParser.splitSample(); }

	public HiveParser_IdentifiersParser.dropPartitionOperator_return dropPartitionOperator() throws RecognitionException { return gIdentifiersParser.dropPartitionOperator(); }

	public HiveParser_SelectClauseParser.trfmClause_return trfmClause() throws RecognitionException { return gSelectClauseParser.trfmClause(); }

	public HiveParser_IdentifiersParser.identifier_return identifier() throws RecognitionException { return gIdentifiersParser.identifier(); }

	public HiveParser_IdentifiersParser.whenExpression_return whenExpression() throws RecognitionException { return gIdentifiersParser.whenExpression(); }

	public HiveParser_IdentifiersParser.dropPartitionSpec_return dropPartitionSpec() throws RecognitionException { return gIdentifiersParser.dropPartitionSpec(); }

	public HiveParser_IdentifiersParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException { return gIdentifiersParser.charSetStringLiteral(); }

	public HiveParser_IdentifiersParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException { return gIdentifiersParser.precedenceOrOperator(); }

	public HiveParser_FromClauseParser.partitionTableFunctionSource_return partitionTableFunctionSource() throws RecognitionException { return gFromClauseParser.partitionTableFunctionSource(); }

	public HiveParser_SelectClauseParser.window_clause_return window_clause() throws RecognitionException { return gSelectClauseParser.window_clause(); }

	public HiveParser_FromClauseParser.tableName_return tableName() throws RecognitionException { return gFromClauseParser.tableName(); }

	public HiveParser_SelectClauseParser.selectList_return selectList() throws RecognitionException { return gSelectClauseParser.selectList(); }

	public HiveParser_FromClauseParser.whereClause_return whereClause() throws RecognitionException { return gFromClauseParser.whereClause(); }

	public HiveParser_IdentifiersParser.function_return function() throws RecognitionException { return gIdentifiersParser.function(); }

	public HiveParser_IdentifiersParser.functionName_return functionName() throws RecognitionException { return gIdentifiersParser.functionName(); }

	public HiveParser_IdentifiersParser.havingCondition_return havingCondition() throws RecognitionException { return gIdentifiersParser.havingCondition(); }

	public HiveParser_IdentifiersParser.booleanValue_return booleanValue() throws RecognitionException { return gIdentifiersParser.booleanValue(); }

	public HiveParser_FromClauseParser.tableAllColumns_return tableAllColumns() throws RecognitionException { return gFromClauseParser.tableAllColumns(); }

	public HiveParser_SelectClauseParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException { return gSelectClauseParser.selectTrfmClause(); }

	public HiveParser_FromClauseParser.tableAlias_return tableAlias() throws RecognitionException { return gFromClauseParser.tableAlias(); }

	public HiveParser_FromClauseParser.fromClause_return fromClause() throws RecognitionException { return gFromClauseParser.fromClause(); }

	public HiveParser_IdentifiersParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException { return gIdentifiersParser.precedencePlusOperator(); }

	public HiveParser_IdentifiersParser.havingClause_return havingClause() throws RecognitionException { return gIdentifiersParser.havingClause(); }

	public HiveParser_FromClauseParser.expressionList_return expressionList() throws RecognitionException { return gFromClauseParser.expressionList(); }

	public HiveParser_SelectClauseParser.selectItem_return selectItem() throws RecognitionException { return gSelectClauseParser.selectItem(); }

	public HiveParser_IdentifiersParser.castExpression_return castExpression() throws RecognitionException { return gIdentifiersParser.castExpression(); }

	public HiveParser_IdentifiersParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException { return gIdentifiersParser.precedenceAmpersandOperator(); }

	public HiveParser_FromClauseParser.partitioningSpec_return partitioningSpec() throws RecognitionException { return gFromClauseParser.partitioningSpec(); }

	public HiveParser_FromClauseParser.viewName_return viewName() throws RecognitionException { return gFromClauseParser.viewName(); }

	public HiveParser_SelectClauseParser.selectClause_return selectClause() throws RecognitionException { return gSelectClauseParser.selectClause(); }

	public HiveParser_IdentifiersParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException { return gIdentifiersParser.precedenceEqualExpression(); }

	public HiveParser_IdentifiersParser.clusterByClause_return clusterByClause() throws RecognitionException { return gIdentifiersParser.clusterByClause(); }

	public HiveParser_FromClauseParser.joinToken_return joinToken() throws RecognitionException { return gFromClauseParser.joinToken(); }

	public HiveParser_FromClauseParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException { return gFromClauseParser.uniqueJoinExpr(); }

	public HiveParser_SelectClauseParser.hintArgName_return hintArgName() throws RecognitionException { return gSelectClauseParser.hintArgName(); }

	public HiveParser_FromClauseParser.fromSource_return fromSource() throws RecognitionException { return gFromClauseParser.fromSource(); }

	public HiveParser_FromClauseParser.aliasList_return aliasList() throws RecognitionException { return gFromClauseParser.aliasList(); }

	public HiveParser_SelectClauseParser.window_value_expression_return window_value_expression() throws RecognitionException { return gSelectClauseParser.window_value_expression(); }

	public HiveParser_FromClauseParser.partitionedTableFunction_return partitionedTableFunction() throws RecognitionException { return gFromClauseParser.partitionedTableFunction(); }

	public HiveParser_IdentifiersParser.distributeByClause_return distributeByClause() throws RecognitionException { return gIdentifiersParser.distributeByClause(); }

	public HiveParser_IdentifiersParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException { return gIdentifiersParser.precedenceUnaryOperator(); }

	public HiveParser_IdentifiersParser.partitionByClause_return partitionByClause() throws RecognitionException { return gIdentifiersParser.partitionByClause(); }

	public HiveParser_SelectClauseParser.selectExpression_return selectExpression() throws RecognitionException { return gSelectClauseParser.selectExpression(); }

	public HiveParser_IdentifiersParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException { return gIdentifiersParser.precedenceUnarySuffixExpression(); }

	public HiveParser_IdentifiersParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException { return gIdentifiersParser.precedenceStarOperator(); }


	protected DFA9 dfa9 = new DFA9(this);
	protected DFA48 dfa48 = new DFA48(this);
	protected DFA173 dfa173 = new DFA173(this);
	static final String DFA9_eotS =
		"\u00aa\uffff";
	static final String DFA9_eofS =
		"\u00aa\uffff";
	static final String DFA9_minS =
		"\1\37\1\106\1\uffff\1\106\4\uffff\1\71\2\uffff\2\106\2\32\1\uffff\1\164"+
		"\14\uffff\1\164\34\uffff\7\12\1\uffff\3\12\3\uffff\7\12\1\uffff\3\12\127"+
		"\uffff";
	static final String DFA9_maxS =
		"\1\u010c\1\u0113\1\uffff\1\u0113\4\uffff\1\u00fd\2\uffff\2\u00f1\2\u0118"+
		"\1\uffff\1\u009d\14\uffff\1\u009d\34\uffff\7\u011c\1\uffff\3\u011c\3\uffff"+
		"\7\u011c\1\uffff\3\u011c\127\uffff";
	static final String DFA9_acceptS =
		"\2\uffff\1\2\1\uffff\1\6\1\7\1\10\2\uffff\1\12\1\23\4\uffff\1\42\1\uffff"+
		"\1\17\1\30\1\1\1\uffff\1\4\1\uffff\1\13\1\uffff\1\15\1\5\1\14\1\20\1\uffff"+
		"\1\31\1\3\1\uffff\1\21\1\11\11\uffff\1\34\1\35\1\36\1\37\1\43\5\uffff"+
		"\1\24\1\26\1\25\1\27\7\uffff\1\32\3\uffff\1\40\11\uffff\1\33\3\uffff\1"+
		"\41\2\uffff\1\16\1\uffff\1\22\2\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1"+
		"\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff"+
		"\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32"+
		"\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff\1\32\1\uffff"+
		"\1\32\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33"+
		"\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff"+
		"\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33"+
		"\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\1\33";
	static final String DFA9_specialS =
		"\u00aa\uffff}>";
	static final String[] DFA9_transitionS = {
			"\1\5\1\12\37\uffff\1\1\21\uffff\2\6\6\uffff\1\3\33\uffff\1\15\42\uffff"+
			"\1\13\11\uffff\1\11\57\uffff\1\16\16\uffff\1\17\2\uffff\1\10\33\uffff"+
			"\1\4\6\uffff\1\14\3\uffff\1\2",
			"\1\23\37\uffff\1\25\15\uffff\1\31\13\uffff\1\21\54\uffff\1\27\50\uffff"+
			"\1\22\4\uffff\1\23\25\uffff\1\25\3\uffff\1\20\35\uffff\1\27",
			"",
			"\1\37\55\uffff\1\41\13\uffff\1\34\125\uffff\1\36\4\uffff\1\37\25\uffff"+
			"\1\32\3\uffff\1\35\35\uffff\1\33",
			"",
			"",
			"",
			"",
			"\1\42\2\uffff\1\42\3\uffff\1\42\2\uffff\1\60\3\uffff\1\42\51\uffff\1"+
			"\42\3\uffff\1\42\1\54\11\uffff\2\42\30\uffff\1\42\40\uffff\1\42\5\uffff"+
			"\1\56\24\uffff\1\55\1\57\4\uffff\1\42\24\uffff\2\42\1\uffff\1\42\10\uffff"+
			"\1\42",
			"",
			"",
			"\1\67\u00aa\uffff\1\66",
			"\1\71\u00aa\uffff\1\70",
			"\4\105\1\72\1\73\1\105\1\uffff\16\105\2\uffff\1\105\1\uffff\4\105\1"+
			"\uffff\7\105\1\75\1\uffff\1\105\1\uffff\2\105\1\uffff\10\105\1\104\7"+
			"\105\1\uffff\2\105\1\76\1\105\1\uffff\1\105\1\uffff\1\105\1\uffff\4\105"+
			"\1\uffff\10\105\1\uffff\3\105\1\uffff\1\105\1\uffff\4\105\1\uffff\2\105"+
			"\1\uffff\3\105\1\77\5\105\1\103\6\105\1\uffff\4\105\1\uffff\6\105\1\100"+
			"\3\105\2\uffff\3\105\1\uffff\3\105\1\uffff\4\105\1\uffff\1\105\1\uffff"+
			"\6\105\1\uffff\3\105\1\uffff\5\105\2\uffff\15\105\1\uffff\17\105\1\101"+
			"\10\105\1\102\14\105\1\uffff\4\105\1\uffff\5\105\1\uffff\4\105\1\uffff"+
			"\3\105\1\uffff\3\105\1\74\6\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1"+
			"\105",
			"\4\123\1\110\1\111\1\123\1\uffff\16\123\2\uffff\1\123\1\uffff\4\123"+
			"\1\uffff\7\123\1\113\1\uffff\1\123\1\uffff\2\123\1\uffff\10\123\1\122"+
			"\7\123\1\uffff\2\123\1\114\1\123\1\uffff\1\123\1\uffff\1\123\1\uffff"+
			"\4\123\1\uffff\10\123\1\uffff\3\123\1\uffff\1\123\1\uffff\4\123\1\uffff"+
			"\2\123\1\uffff\3\123\1\115\5\123\1\121\6\123\1\uffff\4\123\1\uffff\6"+
			"\123\1\116\3\123\2\uffff\3\123\1\uffff\3\123\1\uffff\4\123\1\uffff\1"+
			"\123\1\uffff\6\123\1\uffff\3\123\1\uffff\5\123\2\uffff\15\123\1\uffff"+
			"\17\123\1\117\10\123\1\120\14\123\1\uffff\4\123\1\uffff\5\123\1\uffff"+
			"\4\123\1\uffff\3\123\1\uffff\3\123\1\112\6\123\1\uffff\1\123\2\uffff"+
			"\1\123\1\uffff\1\123",
			"",
			"\1\31\50\uffff\1\126",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\41\50\uffff\1\130",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\133\u00a0\uffff\1\101\117\uffff\1\135\40\uffff\1\101",
			"\1\137\u00a0\uffff\1\101\117\uffff\1\141\40\uffff\1\101",
			"\1\143\u00a0\uffff\1\101\117\uffff\1\145\40\uffff\1\101",
			"\1\147\u00a0\uffff\1\101\117\uffff\1\151\40\uffff\1\101",
			"\1\153\u00a0\uffff\1\101\117\uffff\1\155\40\uffff\1\101",
			"\1\157\u00a0\uffff\1\101\117\uffff\1\161\40\uffff\1\101",
			"\1\163\u00a0\uffff\1\101\117\uffff\1\165\40\uffff\1\101",
			"",
			"\1\167\u00a0\uffff\1\101\117\uffff\1\171\40\uffff\1\101",
			"\1\173\u00a0\uffff\1\101\117\uffff\1\175\40\uffff\1\101",
			"\1\177\u00a0\uffff\1\101\117\uffff\1\u0081\40\uffff\1\101",
			"",
			"",
			"",
			"\1\u0083\147\uffff\1\u0085\70\uffff\1\117\160\uffff\1\117",
			"\1\u0087\147\uffff\1\u0089\70\uffff\1\117\160\uffff\1\117",
			"\1\u008b\147\uffff\1\u008d\70\uffff\1\117\160\uffff\1\117",
			"\1\u008f\147\uffff\1\u0091\70\uffff\1\117\160\uffff\1\117",
			"\1\u0093\147\uffff\1\u0095\70\uffff\1\117\160\uffff\1\117",
			"\1\u0097\147\uffff\1\u0099\70\uffff\1\117\160\uffff\1\117",
			"\1\u009b\147\uffff\1\u009d\70\uffff\1\117\160\uffff\1\117",
			"",
			"\1\u009f\147\uffff\1\u00a1\70\uffff\1\117\160\uffff\1\117",
			"\1\u00a3\147\uffff\1\u00a5\70\uffff\1\117\160\uffff\1\117",
			"\1\u00a7\147\uffff\1\u00a9\70\uffff\1\117\160\uffff\1\117",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
	static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
	static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
	static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
	static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
	static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
	static final short[][] DFA9_transition;

	static {
		int numStates = DFA9_transitionS.length;
		DFA9_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
		}
	}

	protected class DFA9 extends DFA {

		public DFA9(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}
		@Override
		public String getDescription() {
			return "654:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole );";
		}
	}

	static final String DFA48_eotS =
		"\115\uffff";
	static final String DFA48_eofS =
		"\115\uffff";
	static final String DFA48_minS =
		"\1\32\2\21\1\u00fb\1\71\6\uffff\1\153\1\uffff\1\70\4\uffff\1\65\5\uffff"+
		"\1\u00fb\1\71\6\uffff\1\153\1\uffff\1\70\4\uffff\1\65\45\uffff";
	static final String DFA48_maxS =
		"\1\u0118\2\u0109\1\u00fb\1\u00b9\6\uffff\1\u00f4\1\uffff\1\u011c\4\uffff"+
		"\1\u00ed\5\uffff\1\u00fb\1\u00b9\6\uffff\1\u00f4\1\uffff\1\u011c\4\uffff"+
		"\1\u00ed\45\uffff";
	static final String DFA48_acceptS =
		"\5\uffff\1\2\1\3\1\4\1\6\1\7\1\10\1\uffff\1\11\1\uffff\1\12\6\uffff\1"+
		"\13\1\14\26\uffff\1\1\1\uffff\1\5\10\uffff\1\15\4\uffff\1\1\17\uffff";
	static final String DFA48_specialS =
		"\115\uffff}>";
	static final String[] DFA48_transitionS = {
			"\1\1\6\2\1\uffff\16\2\2\uffff\1\2\1\uffff\4\2\1\uffff\10\2\1\uffff\1"+
			"\2\1\uffff\2\2\1\uffff\20\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\10\2\1\uffff\3\2\1\uffff\1\2\1\uffff\4\2\1\uffff\2\2\1\uffff"+
			"\20\2\1\uffff\4\2\1\uffff\12\2\2\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1"+
			"\uffff\1\2\1\uffff\6\2\1\uffff\3\2\1\uffff\5\2\2\uffff\15\2\1\uffff\17"+
			"\2\1\uffff\25\2\1\uffff\4\2\1\uffff\5\2\1\uffff\4\2\1\uffff\3\2\1\uffff"+
			"\12\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2",
			"\1\26\11\uffff\1\4\6\uffff\1\11\17\uffff\1\6\2\uffff\1\16\5\uffff\1"+
			"\16\2\uffff\1\16\27\uffff\1\16\3\uffff\1\7\2\uffff\1\16\2\uffff\1\26"+
			"\50\uffff\1\16\34\uffff\1\22\22\uffff\1\15\25\uffff\1\3\1\uffff\1\5\20"+
			"\uffff\1\13\4\uffff\1\25\24\uffff\1\10\5\uffff\1\12\6\uffff\1\14",
			"\1\26\11\uffff\1\31\6\uffff\1\11\17\uffff\1\6\2\uffff\1\16\5\uffff\1"+
			"\16\2\uffff\1\16\27\uffff\1\16\3\uffff\1\7\2\uffff\1\16\2\uffff\1\26"+
			"\50\uffff\1\16\34\uffff\1\47\22\uffff\1\42\25\uffff\1\30\1\uffff\1\5"+
			"\20\uffff\1\40\4\uffff\1\25\24\uffff\1\10\5\uffff\1\12\6\uffff\1\14",
			"\1\55",
			"\1\5\102\uffff\1\57\74\uffff\1\57",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\16\54\uffff\1\16\107\uffff\2\16\5\uffff\1\16\14\uffff\1\14",
			"",
			"\1\70\u00e3\uffff\1\16",
			"",
			"",
			"",
			"",
			"\1\16\u00b1\uffff\1\25\2\uffff\1\16\2\uffff\1\25",
			"",
			"",
			"",
			"",
			"",
			"\1\75",
			"\1\5\102\uffff\1\57\74\uffff\1\57",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\16\54\uffff\1\16\107\uffff\2\16\5\uffff\1\16\14\uffff\1\14",
			"",
			"\1\70\u00e3\uffff\1\16",
			"",
			"",
			"",
			"",
			"\1\16\u00b1\uffff\1\25\2\uffff\1\16\2\uffff\1\25",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
	static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
	static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
	static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
	static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
	static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
	static final short[][] DFA48_transition;

	static {
		int numStates = DFA48_transitionS.length;
		DFA48_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
		}
	}

	protected class DFA48 extends DFA {

		public DFA48(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}
		@Override
		public String getDescription() {
			return "926:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType );";
		}
	}

	static final String DFA173_eotS =
		"\124\uffff";
	static final String DFA173_eofS =
		"\1\2\123\uffff";
	static final String DFA173_minS =
		"\1\44\1\7\34\uffff\1\4\65\uffff";
	static final String DFA173_maxS =
		"\1\u0127\1\u012f\34\uffff\1\u012b\65\uffff";
	static final String DFA173_acceptS =
		"\2\uffff\1\2\65\uffff\1\1\33\uffff";
	static final String DFA173_specialS =
		"\124\uffff}>";
	static final String[] DFA173_transitionS = {
			"\1\2\17\uffff\1\2\5\uffff\1\2\35\uffff\1\2\31\uffff\1\2\4\uffff\1\2\1"+
			"\uffff\1\2\2\uffff\1\2\11\uffff\1\2\11\uffff\1\2\3\uffff\2\2\2\uffff"+
			"\1\2\5\uffff\1\1\11\uffff\1\2\6\uffff\1\2\33\uffff\3\2\17\uffff\1\2\13"+
			"\uffff\1\2\3\uffff\1\2\6\uffff\1\2\20\uffff\1\2\10\uffff\1\2\6\uffff"+
			"\1\2\1\uffff\1\2\17\uffff\1\2",
			"\1\2\5\uffff\1\2\4\uffff\1\2\7\uffff\7\2\1\uffff\21\2\1\uffff\4\2\1"+
			"\uffff\10\2\1\uffff\1\2\1\uffff\2\2\1\uffff\20\2\1\uffff\4\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\10\2\1\uffff\3\2\1\uffff\1\2\1\uffff"+
			"\4\2\1\uffff\23\2\1\uffff\1\36\3\2\1\uffff\12\2\1\uffff\4\2\1\uffff\10"+
			"\2\1\uffff\1\2\1\uffff\6\2\1\uffff\3\2\1\uffff\5\2\2\uffff\15\2\1\uffff"+
			"\17\2\1\uffff\25\2\1\uffff\4\2\1\uffff\5\2\1\uffff\4\2\1\uffff\3\2\1"+
			"\uffff\12\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1"+
			"\2\2\uffff\2\2\7\uffff\5\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\3\2\3\uffff\1\2\3\uffff\2\2\1\uffff\1\2\2\uffff\2\2\1\uffff\2\2\10"+
			"\uffff\1\2\5\uffff\1\2\127\uffff\1\2\12\uffff\1\2\10\uffff\1\2\22\uffff"+
			"\1\2\6\uffff\1\2\36\uffff\1\2\1\uffff\1\2\6\uffff\1\2\3\uffff\1\2\34"+
			"\uffff\1\70\27\uffff\1\2\13\uffff\4\2\1\uffff\3\2\1\uffff\1\2\7\uffff"+
			"\1\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
	static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
	static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
	static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
	static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
	static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
	static final short[][] DFA173_transition;

	static {
		int numStates = DFA173_transitionS.length;
		DFA173_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
		}
	}

	protected class DFA173 extends DFA {

		public DFA173(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 173;
			this.eot = DFA173_eot;
			this.eof = DFA173_eof;
			this.min = DFA173_min;
			this.max = DFA173_max;
			this.accept = DFA173_accept;
			this.special = DFA173_special;
			this.transition = DFA173_transition;
		}
		@Override
		public String getDescription() {
			return "1704:103: ( tableRowFormatMapKeysIdentifier )?";
		}
	}

	public static final BitSet FOLLOW_explainStatement_in_statement995 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_execStatement_in_statement1002 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement1004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement1025 = new BitSet(new long[]{0x0000000180000000L,0x40460030040E0001L,0x000000084A400040L,0x0000002420082000L,0x0000000001001102L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_explainStatement1030 = new BitSet(new long[]{0x0000000180000000L,0x40440010040C0001L,0x0000000842400040L,0x0000002420082000L,0x0000000001001102L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_explainStatement1034 = new BitSet(new long[]{0x0000000180000000L,0x40440010040C0001L,0x0000000842400040L,0x0000002420082000L,0x0000000001001102L});
	public static final BitSet FOLLOW_KW_DEPENDENCY_in_explainStatement1038 = new BitSet(new long[]{0x0000000180000000L,0x40440010040C0001L,0x0000000842400040L,0x0000002420082000L,0x0000000001001102L});
	public static final BitSet FOLLOW_KW_LOGICAL_in_explainStatement1042 = new BitSet(new long[]{0x0000000180000000L,0x40440010040C0001L,0x0000000842400040L,0x0000002420082000L,0x0000000001001102L});
	public static final BitSet FOLLOW_execStatement_in_explainStatement1046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryStatementExpression_in_execStatement1088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loadStatement_in_execStatement1097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportStatement_in_execStatement1105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importStatement_in_execStatement1113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ddlStatement_in_execStatement1121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOAD_in_loadStatement1148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_DATA_in_loadStatement1150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800008L});
	public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement1155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_INPATH_in_loadStatement1159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_loadStatement1164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000200L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement1170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_INTO_in_loadStatement1174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_loadStatement1176 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableOrPartition_in_loadStatement1181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement1233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1235 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_exportStatement1243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_exportStatement1248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1289 = new BitSet(new long[]{0x0000000000000000L,0x0004004000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_importStatement1299 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableOrPartition_in_importStatement1304 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_importStatement1309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_importStatement1314 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_tableLocation_in_importStatement1317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement1369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement1377 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement1385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createTableStatement_in_ddlStatement1393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement1401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncateTableStatement_in_ddlStatement1409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatement_in_ddlStatement1417 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_descStatement_in_ddlStatement1425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStatement_in_ddlStatement1433 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement1441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createViewStatement_in_ddlStatement1449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement1457 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement1465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createMacroStatement_in_ddlStatement1473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement1481 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement1489 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement1497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropMacroStatement_in_ddlStatement1505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement1513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockStatement_in_ddlStatement1521 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockStatement_in_ddlStatement1529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockDatabase_in_ddlStatement1537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockDatabase_in_ddlStatement1545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement1553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement1561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement1569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement1577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showGrants_in_ddlStatement1585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement1593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRolePrincipals_in_ddlStatement1601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoles_in_ddlStatement1609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantRole_in_ddlStatement1617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokeRole_in_ddlStatement1625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setRole_in_ddlStatement1633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showCurrentRole_in_ddlStatement1641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifExists1668 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifExists1670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade1707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade1725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifNotExists1762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_NOT_in_ifNotExists1764 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists1766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs1803 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_storedAsDirs1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs1807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OR_in_orReplace1844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_orReplace1846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IGNORE_in_ignoreProtection1887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_PROTECTION_in_ignoreProtection1889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement1934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement1937 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement1939 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement1950 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_createDatabaseStatement1963 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement1973 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement1984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement1996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement2002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation2063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_dbLocation2067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_dbProperties2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties2111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_dbProperties2113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList2154 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_dbPropertiesList2157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList2159 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement2198 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_switchDatabaseStatement2200 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement2239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement2242 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2244 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement2247 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_dropDatabaseStatement2250 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement2252 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_databaseComment2302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement2342 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement2347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement2351 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifNotExists_in_createTableStatement2353 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement2358 = new BitSet(new long[]{0x0420001000000002L,0x0000000000000000L,0x0400000001080000L,0x0010208002000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement2371 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement2375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement2386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_createTableStatement2411 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameTypeList_in_createTableStatement2413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createTableStatement2415 = new BitSet(new long[]{0x0420001000000002L,0x0000000000000000L,0x0400000001000000L,0x0010208002000000L});
	public static final BitSet FOLLOW_tableComment_in_createTableStatement2428 = new BitSet(new long[]{0x0020001000000002L,0x0000000000000000L,0x0400000001000000L,0x0010208002000000L});
	public static final BitSet FOLLOW_tablePartition_in_createTableStatement2440 = new BitSet(new long[]{0x0020001000000002L,0x0000000000000000L,0x0000000001000000L,0x0010208002000000L});
	public static final BitSet FOLLOW_tableBuckets_in_createTableStatement2452 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000001000000L,0x0010208002000000L});
	public static final BitSet FOLLOW_tableSkewed_in_createTableStatement2464 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000001000000L,0x0010200002000000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2476 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000001000000L,0x0010200000000000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2488 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000001000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement2500 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2512 = new BitSet(new long[]{0x0000001000000002L});
	public static final BitSet FOLLOW_KW_AS_in_createTableStatement2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000020002000L,0x0000000001000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createTableStatement2527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TRUNCATE_in_truncateTableStatement2730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_truncateTableStatement2732 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tablePartitionPrefix_in_truncateTableStatement2734 = new BitSet(new long[]{0x0200000000000002L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_truncateTableStatement2737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_truncateTableStatement2739 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_truncateTableStatement2741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_truncateTableStatement2743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement2778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement2780 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_createIndexStatement2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ON_in_createIndexStatement2792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement2794 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_createIndexStatement2798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_createIndexStatement2800 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_createIndexStatement2804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createIndexStatement2806 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createIndexStatement2814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement2818 = new BitSet(new long[]{0x0400000000000002L,0x8800000000000000L,0x0000000001000000L,0x0010200002000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement2826 = new BitSet(new long[]{0x0400000000000002L,0x8800000000000000L,0x0000000001000000L,0x0010200002000000L});
	public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2835 = new BitSet(new long[]{0x0400000000000002L,0x8000000000000000L,0x0000000001000000L,0x0010200002000000L});
	public static final BitSet FOLLOW_indexTblName_in_createIndexStatement2844 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0000000001000000L,0x0010200002000000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement2853 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0000000001000000L,0x0010200000000000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement2862 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0000000001000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableLocation_in_createIndexStatement2871 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2880 = new BitSet(new long[]{0x0400000000000002L});
	public static final BitSet FOLLOW_indexComment_in_createIndexStatement2889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_indexComment3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_indexComment3050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_autoRebuild3091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild3093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild3095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IN_in_indexTblName3131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_indexTblName3133 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_indexTblName3137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed3184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed3187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_indexProperties3220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties3222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_indexProperties3224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3265 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_indexPropertiesList3268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3270 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement3308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement3310 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifExists_in_dropIndexStatement3312 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_dropIndexStatement3317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement3319 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_dropIndexStatement3323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement3368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement3370 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifExists_in_dropTableStatement3372 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_dropTableStatement3375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000000001L,0x0002000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatement3438 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement3441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VIEW_in_alterStatement3465 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement3468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INDEX_in_alterStatement3492 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement3495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement3519 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3583 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3631 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix3647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix3655 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementPartitionKeyType3679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType3681 = new BitSet(new long[]{0x0100000000000000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType3683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementPartitionKeyType3685 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameType_in_alterStatementPartitionKeyType3687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementPartitionKeyType3689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_alterViewStatementSuffix3806 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_alterViewStatementSuffix3808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000020002000L,0x0000000001000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix3810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterIndexStatementSuffix3858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix3867 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_alterIndexStatementSuffix3871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000400000400L});
	public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix3880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000400L});
	public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix3929 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix3939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3991 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix3999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixProperties4028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties4030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties4032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties4034 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixSetOwner4078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner4080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner4082 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalName_in_alterDatabaseSuffixSetOwner4084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRename4128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename4130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename4132 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRename4136 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixAddCol4179 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol4184 = new BitSet(new long[]{0x0200000000000000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol4190 = new BitSet(new long[]{0x0200000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol4193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol4195 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol4197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol4199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol4272 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol4274 = new BitSet(new long[]{0xFFF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol4276 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol4281 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol4285 = new BitSet(new long[]{0x0008070800000000L,0x0000200002000B00L,0x0000000040000080L,0x0601810000000000L,0x0000000000040040L});
	public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol4287 = new BitSet(new long[]{0x0400000020000002L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol4290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol4294 = new BitSet(new long[]{0x0000000020000002L,0x0000100000000000L});
	public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol4298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition4344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition4346 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_alterStatementChangeColPosition4350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixAddPartitions4402 = new BitSet(new long[]{0x0000000008000000L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4404 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions4409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement4445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement4447 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixTouch4475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch4477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch4480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixArchive4526 = new BitSet(new long[]{0x0000000400000000L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive4531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixUnArchive4577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation4634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_partitionLocation4638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixDropPartitions4674 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4676 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4681 = new BitSet(new long[]{0x0000000000000402L,0x2000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4686 = new BitSet(new long[]{0x0000000000000402L,0x2000000000000000L});
	public static final BitSet FOLLOW_ignoreProtection_in_alterStatementSuffixDropPartitions4690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixProperties4741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties4743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties4747 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixProperties4772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterStatementSuffixProperties4774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4776 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixProperties4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties4781 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterViewSuffixProperties4828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties4830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties4834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterViewSuffixProperties4859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterViewSuffixProperties4861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4863 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_ifExists_in_alterViewSuffixProperties4865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties4868 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_tablePartitionPrefix4994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix4996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement5033 = new BitSet(new long[]{0x4820000000000000L,0x0000000020400000L,0x0000004000000200L,0x0000000400008000L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement5035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix5070 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix5076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix5082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix5088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix5094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix5100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix5106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix5112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix5118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix5124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat5146 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat5148 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat5150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5181 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby5199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation5244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation5246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation5248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation5250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_skewedLocations5293 = new BitSet(new long[]{0x0000000000042080L,0x0000008000000100L,0x0000000000000000L,0x0000000000000000L,0x0000B00410000001L});
	public static final BitSet FOLLOW_skewedLocationsList_in_skewedLocations5295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_skewedLocations5297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList5338 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_skewedLocationsList5341 = new BitSet(new long[]{0x0000000000042080L,0x0000008000000100L,0x0000000000000000L,0x0000000000000000L,0x0000B00410000001L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList5343 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_skewedValueLocationElement_in_skewedLocationMap5389 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_skewedLocationMap5391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_skewedLocationMap5395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation5432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation5438 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixSkewedby5473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixSkewedby5494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixSkewedby5515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby5519 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixExchangePartition5555 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition5557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition5559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition5561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition5563 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixExchangePartition5567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode5612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart5651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart5653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart5655 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles5693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENABLE_in_alterProtectMode5730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000048000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode5732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DISABLE_in_alterProtectMode5749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000048000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode5751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OFFLINE_in_alterProtectModeMode5787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NO_DROP_in_alterProtectModeMode5802 = new BitSet(new long[]{0x0000800000000002L});
	public static final BitSet FOLLOW_KW_CASCADE_in_alterProtectModeMode5804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READONLY_in_alterProtectModeMode5822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum5856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_Number_in_alterStatementSuffixBucketNum5860 = new BitSet(new long[]{0x0000200000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum5862 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact5902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixCompact5906 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_fileFormat5947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TEXTFILE_in_fileFormat5962 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RCFILE_in_fileFormat5977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ORCFILE_in_fileFormat5992 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARQUETFILE_in_fileFormat6006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat6020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat6026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat6033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat6039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat6043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_fileFormat6081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr6117 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr6120 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr6124 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_tabTypeExpr6128 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr6132 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr6136 = new BitSet(new long[]{0x0000000000020002L});
	public static final BitSet FOLLOW_identifier_in_descTabTypeExpr6165 = new BitSet(new long[]{0xFEF4FFFDFC020002L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_DOT_in_descTabTypeExpr6168 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_descTabTypeExpr6172 = new BitSet(new long[]{0xFEF4FFFDFC020002L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_descTabTypeExpr6176 = new BitSet(new long[]{0xFEF4FFFDFC020002L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_descTabTypeExpr6180 = new BitSet(new long[]{0xFEF4FFFDFC020002L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_descTabTypeExpr6184 = new BitSet(new long[]{0xFEF4FFFDFC020002L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_descTabTypeExpr6189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr6217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr6219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_descTabTypeExpr_in_descPartTypeExpr6259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_descPartTypeExpr6261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement6301 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFFEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement6303 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFFEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement6309 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6313 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_PRETTY_in_descStatement6317 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_descPartTypeExpr_in_descStatement6324 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement6347 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement6349 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement6352 = new BitSet(new long[]{0xFEF5FFFFFDB0C070L,0xFDEBBFFEAF7FFFB5L,0x3EEFF7FBDFFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x0000680B8D5BFF77L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6354 = new BitSet(new long[]{0xFEF5FFFFFDB0C070L,0xFDEBBFDEAF7FFFB5L,0x3EEFF7FBDFFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x0000680B8D5BFF77L});
	public static final BitSet FOLLOW_descFuncNames_in_descStatement6360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement6382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement6384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_DATABASE_in_descStatement6387 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFFEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement6389 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_descStatement6395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement6435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement6437 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement6442 = new BitSet(new long[]{0x2000000000000000L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement6445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement6447 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L,0x0100002000000000L});
	public static final BitSet FOLLOW_KW_NOSCAN_in_analyzeStatement6453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTIALSCAN_in_analyzeStatement6461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement6467 = new BitSet(new long[]{0x0200000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement6469 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_analyzeStatement6473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_DATABASES_in_showStatement6527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement6529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement6533 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00002000014BFF77L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_TABLES_in_showStatement6556 = new BitSet(new long[]{0xFEF4FFFDFC000002L,0xEDEFBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00002000014BFF77L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement6560 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement6562 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_showStatement6567 = new BitSet(new long[]{0xFEF4FFFDFC000002L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00002000014BFF77L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement6572 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00002000014BFF77L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6576 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6604 = new BitSet(new long[]{0x0200000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement6606 = new BitSet(new long[]{0x0000000000000000L,0x8004000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement6609 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement6611 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_showStatement6616 = new BitSet(new long[]{0x0000000000000002L,0x8004000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement6620 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement6622 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_showStatement6627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6655 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement6657 = new BitSet(new long[]{0xFEF4FFFDFC000002L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00002000014BFF77L});
	public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement6659 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement6680 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_showStatement6684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement6686 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_CREATE_in_showStatement6710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement6712 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_showStatement6716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement6735 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement6737 = new BitSet(new long[]{0x0000000000000000L,0x8004000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement6741 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement6743 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_showStatement6748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement6752 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00002000014BFF77L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement6756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement6786 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_showStatement6790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_showStatement6793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_showStatement6797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_showStatement6799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_LOCKS_in_showStatement6824 = new BitSet(new long[]{0xFEF4FFFDFC000002L,0xEDEBBFFEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_partTypeExpr_in_showStatement6829 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement6836 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_LOCKS_in_showStatement6862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_DATABASE_in_showStatement6864 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_showStatement6869 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement6875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6898 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000000000000003L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement6903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
	public static final BitSet FOLLOW_KW_INDEX_in_showStatement6908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_INDEXES_in_showStatement6910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ON_in_showStatement6913 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00002000014BFF77L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6915 = new BitSet(new long[]{0x0000000000000002L,0x8004000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement6919 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement6921 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_showStatement6926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6956 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_KW_COMPACTIONS_in_showStatement6958 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement6972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_TRANSACTIONS_in_showStatement6974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockStatement7007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_lockStatement7009 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_lockStatement7011 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0200000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_lockStatement7013 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_lockMode_in_lockStatement7016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockDatabase7056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_DATABASE_in_lockDatabase7058 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_lockDatabase7063 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_lockMode_in_lockDatabase7066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement7135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement7137 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_unlockStatement7139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_unlockStatement7141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockDatabase7181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_DATABASE_in_unlockDatabase7183 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_unlockDatabase7188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement7225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ROLE_in_createRoleStatement7227 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_createRoleStatement7231 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement7271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ROLE_in_dropRoleStatement7273 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_dropRoleStatement7277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges7317 = new BitSet(new long[]{0x00000000C0000000L,0x0000000004008001L,0x0000000002000041L,0x0000004020000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_privilegeList_in_grantPrivileges7321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges7329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_grantPrivileges7338 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges7340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_withGrantOption_in_grantPrivileges7348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges7397 = new BitSet(new long[]{0x00000000C0000000L,0x0000000004008001L,0x0000000002000041L,0x0000004020000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_privilegeList_in_revokePrivileges7399 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges7401 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges7404 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges7406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantRole7450 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_ROLE_in_grantRole7452 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_grantRole7455 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_COMMA_in_grantRole7458 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_grantRole7460 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_TO_in_grantRole7464 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantRole7466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_withAdminOption_in_grantRole7468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole7514 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_KW_ROLE_in_revokeRole7516 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_revokeRole7519 = new BitSet(new long[]{0x0000000000000400L,0x0004000000000000L});
	public static final BitSet FOLLOW_COMMA_in_revokeRole7522 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_revokeRole7524 = new BitSet(new long[]{0x0000000000000400L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_FROM_in_revokeRole7528 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokeRole7530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_withAdminOption_in_revokeRole7532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants7578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ROLE_in_showRoleGrants7580 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants7582 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalName_in_showRoleGrants7584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoles7624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showRoles7626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showCurrentRole7663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_CURRENT_in_showCurrentRole7665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showCurrentRole7667 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setRole7704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_ROLE_in_setRole7706 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_setRole7710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showGrants7750 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_GRANT_in_showGrants7752 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000080000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalName_in_showGrants7754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ON_in_showGrants7758 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFF5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants7760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRolePrincipals7805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PRINCIPALS_in_showRolePrincipals7807 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_showRolePrincipals7811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeIncludeColObject7852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privObjectType_in_privilegeIncludeColObject7866 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_privilegeIncludeColObject7868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_privilegeIncludeColObject7871 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_privilegeIncludeColObject7875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_privilegeIncludeColObject7877 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_privilegeIncludeColObject7881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ON_in_privilegeObject7930 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFF5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_privObjectType_in_privilegeObject7932 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_privilegeObject7934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_privilegeObject7936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privObjectType7983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_privObjectType7997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList8032 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_privilegeList8035 = new BitSet(new long[]{0x00000000C0000000L,0x0000000004008001L,0x0000000002000041L,0x0000004020000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList8037 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_privilegeType_in_privlegeDef8079 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_privlegeDef8082 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_privlegeDef8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_privlegeDef8088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeType8133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_privilegeType8147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType8161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_privilegeType8175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_privilegeType8189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INDEX_in_privilegeType8203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_privilegeType8217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SELECT_in_privilegeType8231 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType8245 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_privilegeType8259 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_privilegeType8273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification8306 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_principalSpecification8309 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000002000L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification8311 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_KW_USER_in_principalName8349 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_principalName8351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GROUP_in_principalName8367 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_principalName8369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROLE_in_principalName8385 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_principalName8387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withGrantOption8422 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_GRANT_in_withGrantOption8424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_OPTION_in_withGrantOption8426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withAdminOption8463 = new BitSet(new long[]{0x0000000010000000L});
	public static final BitSet FOLLOW_KW_ADMIN_in_withAdminOption8465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_OPTION_in_withAdminOption8467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck8504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0002000000010000L});
	public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck8509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck8514 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_metastoreCheck8518 = new BitSet(new long[]{0x0000000000000402L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck8520 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_metastoreCheck8524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck8526 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_resource_in_resourceList8580 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_resourceList8583 = new BitSet(new long[]{0x0000000400000000L,0x0000040000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_resource_in_resourceList8585 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_resourceType_in_resource8623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_resource8627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_JAR_in_resourceType8664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FILE_in_resourceType8678 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_resourceType8692 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement8723 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement8728 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement8732 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_functionIdentifier_in_createFunctionStatement8734 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement8736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement8738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_USING_in_createFunctionStatement8747 = new BitSet(new long[]{0x0000000400000000L,0x0000040000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_resourceList_in_createFunctionStatement8751 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement8837 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement8842 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement8846 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement8848 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_functionIdentifier_in_dropFunctionStatement8851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createMacroStatement8929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createMacroStatement8931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_createMacroStatement8933 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_createMacroStatement8935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_createMacroStatement8943 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000080014BFF77L});
	public static final BitSet FOLLOW_columnNameTypeList_in_createMacroStatement8945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createMacroStatement8948 = new BitSet(new long[]{0xFEF7FFFDFC042080L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7FBDFFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x0000F00C914BFF77L});
	public static final BitSet FOLLOW_expression_in_createMacroStatement8950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropMacroStatement8994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropMacroStatement8996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_dropMacroStatement8998 = new BitSet(new long[]{0x0000000004000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_ifExists_in_dropMacroStatement9000 = new BitSet(new long[]{0x0000000004000000L});
	public static final BitSet FOLLOW_Identifier_in_dropMacroStatement9003 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement9045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_orReplace_in_createViewStatement9048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement9052 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifNotExists_in_createViewStatement9055 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableName_in_createViewStatement9061 = new BitSet(new long[]{0x0400001000000000L,0x0000000000000000L,0x0400000000000000L,0x0010000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_createViewStatement9072 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement9074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_createViewStatement9076 = new BitSet(new long[]{0x0400001000000000L,0x0000000000000000L,0x0400000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tableComment_in_createViewStatement9080 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0400000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_viewPartition_in_createViewStatement9083 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement9094 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createViewStatement9105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000020002000L,0x0000000001000000L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createViewStatement9115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition9238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ON_in_viewPartition9240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_viewPartition9242 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_viewPartition9244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_viewPartition9246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement9285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement9287 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xFDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_ifExists_in_dropViewStatement9289 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_viewName_in_dropViewStatement9292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionIdentifier_in_showFunctionIdentifier9330 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showFunctionIdentifier9338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_showStmtIdentifier9365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showStmtIdentifier9373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_tableComment9406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableComment9410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition9447 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tablePartition9449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_tablePartition9451 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition9453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tablePartition9455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets9500 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets9502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets9504 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_tableBuckets9508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets9510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000040000000000L});
	public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets9513 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets9515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets9517 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets9521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets9523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_INTO_in_tableBuckets9527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_Number_in_tableBuckets9531 = new BitSet(new long[]{0x0000200000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets9533 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed9585 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableSkewed9587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed9589 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameList_in_tableSkewed9593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed9595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_KW_ON_in_tableSkewed9597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed9599 = new BitSet(new long[]{0x0000000000042080L,0x0000008000000100L,0x0000000000000000L,0x0000000000000000L,0x0000B00410000001L});
	public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed9604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed9607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed9610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat9658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat9674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader9723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordReader9725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter9774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordWriter9776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde9825 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde9827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde9829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde9833 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde9836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde9838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde9842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited9894 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited9896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited9898 = new BitSet(new long[]{0x0080000000000002L,0x0000020000000000L,0x0000010040200000L});
	public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited9900 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x0000010040200000L});
	public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited9903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010040200000L});
	public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited9906 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000200000L});
	public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited9909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_tableRowNullFormat_in_rowFormatDelimited9912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat9971 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat9991 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed10038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed10041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_tableProperties10074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties10076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableProperties10078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList10119 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList10122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList10124 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList10149 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList10152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList10154 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty10200 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_EQUAL_in_keyValueProperty10202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty10206 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_keyProperty10253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier10297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier10299 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10305 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier10308 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier10310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier10314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier10366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier10368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier10370 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier10372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier10376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier10422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier10424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier10426 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier10428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier10432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier10478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier10480 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier10482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier10486 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULL_in_tableRowNullFormat10532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_DEFINED_in_tableRowNullFormat10534 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableRowNullFormat10536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowNullFormat10540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10585 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat10587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat10589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10604 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat10606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_TEXTFILE_in_tableFileFormat10608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10623 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat10625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_RCFILE_in_tableFileFormat10627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10642 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat10644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_ORCFILE_in_tableFileFormat10646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10660 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat10662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_PARQUETFILE_in_tableFileFormat10664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10678 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat10680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat10682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat10686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat10688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat10692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat10695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat10699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat10701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat10705 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10743 = new BitSet(new long[]{0x0000400000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableFileFormat10745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat10749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat10761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat10763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableProperties_in_tableFileFormat10767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat10798 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat10800 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_identifier_in_tableFileFormat10804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation10852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableLocation10856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList10892 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeList10895 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList10897 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList10935 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList10938 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList10940 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_columnName_in_columnNameList10978 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameList10981 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnName_in_columnNameList10983 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_identifier_in_columnName11027 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList11054 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameOrderList11057 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList11059 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement11104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement11113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11140 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList11143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList11145 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair11190 = new BitSet(new long[]{0x0000000000042080L,0x0000008000000100L,0x0000000000000000L,0x0000000000000000L,0x0000B00400000001L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair11194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair11196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues11239 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValues11242 = new BitSet(new long[]{0x0000000000042080L,0x0000008000000100L,0x0000000000000000L,0x0000000000000000L,0x0000B00400000001L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues11244 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_constant_in_skewedColumnValue11288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement11322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement11331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameOrder11362 = new BitSet(new long[]{0x0000002000000002L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_ASC_in_columnNameOrder11367 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESC_in_columnNameOrder11373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList11445 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_columnNameCommentList11448 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList11450 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_identifier_in_columnNameComment11490 = new BitSet(new long[]{0x0400000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment11493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameComment11497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_columnRefOrder11545 = new BitSet(new long[]{0x0000002000000002L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_ASC_in_columnRefOrder11550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESC_in_columnRefOrder11556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameType11630 = new BitSet(new long[]{0x0008070800000000L,0x0000200002000B00L,0x0000000040000080L,0x0601810000000000L,0x0000000000040040L});
	public static final BitSet FOLLOW_colType_in_columnNameType11632 = new BitSet(new long[]{0x0400000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType11635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameType11639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameColonType11725 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COLON_in_columnNameColonType11727 = new BitSet(new long[]{0x0008070800000000L,0x0000200002000B00L,0x0000000040000080L,0x0601810000000000L,0x0000000000040040L});
	public static final BitSet FOLLOW_colType_in_columnNameColonType11729 = new BitSet(new long[]{0x0400000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType11732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType11736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_colType11820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_colType_in_colTypeList11847 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_colTypeList11850 = new BitSet(new long[]{0x0008070800000000L,0x0000200002000B00L,0x0000000040000080L,0x0601810000000000L,0x0000000000040040L});
	public static final BitSet FOLLOW_colType_in_colTypeList11852 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_primitiveType_in_type11880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_listType_in_type11888 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_structType_in_type11896 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mapType_in_type11904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unionType_in_type11912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType11934 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType11955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INT_in_primitiveType11975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType12000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType12022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType12043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType12066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATE_in_primitiveType12088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType12112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType12132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRING_in_primitiveType12151 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BINARY_in_primitiveType12173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DECIMAL_in_primitiveType12195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType12198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType12202 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_COMMA_in_primitiveType12205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType12209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType12213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VARCHAR_in_primitiveType12237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType12239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType12243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType12245 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHAR_in_primitiveType12270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType12272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_Number_in_primitiveType12276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType12278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARRAY_in_listType12322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_listType12324 = new BitSet(new long[]{0x0008070800000000L,0x0000200002000B00L,0x0000000040000080L,0x0601810000000000L,0x0000000000040040L});
	public static final BitSet FOLLOW_type_in_listType12326 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_listType12328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRUCT_in_structType12365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_structType12367 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_columnNameColonTypeList_in_structType12369 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_structType12371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_mapType12406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_mapType12408 = new BitSet(new long[]{0x0008070000000000L,0x0000200002000B00L,0x0000000000000080L,0x0600810000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_primitiveType_in_mapType12412 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_COMMA_in_mapType12414 = new BitSet(new long[]{0x0008070800000000L,0x0000200002000B00L,0x0000000040000080L,0x0601810000000000L,0x0000000000040040L});
	public static final BitSet FOLLOW_type_in_mapType12418 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_mapType12420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType12463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_LESSTHAN_in_unionType12465 = new BitSet(new long[]{0x0008070800000000L,0x0000200002000B00L,0x0000000040000080L,0x0601810000000000L,0x0000000000040040L});
	public static final BitSet FOLLOW_colTypeList_in_unionType12467 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_unionType12469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_setOperator12504 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator12506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withClause_in_queryStatementExpression12543 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000040000040L,0x0000000020002000L});
	public static final BitSet FOLLOW_queryStatementExpressionBody_in_queryStatementExpression12553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fromStatement_in_queryStatementExpressionBody12587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_regularBody_in_queryStatementExpressionBody12596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withClause12614 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_cteStatement_in_withClause12616 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_COMMA_in_withClause12619 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_cteStatement_in_withClause12621 = new BitSet(new long[]{0x0000000000000402L});
	public static final BitSet FOLLOW_identifier_in_cteStatement12647 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_cteStatement12649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LPAREN_in_cteStatement12651 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000040000040L,0x0000000020002000L,0x0000000001000000L});
	public static final BitSet FOLLOW_queryStatementExpression_in_cteStatement12653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cteStatement12656 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement12680 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_setOperator_in_fromStatement12692 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement12696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_fromClause_in_singleFromStatement12903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000040L,0x0000000020002000L});
	public static final BitSet FOLLOW_body_in_singleFromStatement12913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000040000040L,0x0000000020002000L});
	public static final BitSet FOLLOW_insertClause_in_regularBody12949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000020002000L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody12956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody12978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_singleSelectStatement_in_selectStatement12995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_setOperator_in_selectStatement13008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000020002000L});
	public static final BitSet FOLLOW_singleSelectStatement_in_selectStatement13012 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_selectClause_in_singleSelectStatement13234 = new BitSet(new long[]{0x0010000000000002L,0x0284000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000A00000L});
	public static final BitSet FOLLOW_fromClause_in_singleSelectStatement13239 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000A00000L});
	public static final BitSet FOLLOW_whereClause_in_singleSelectStatement13245 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_groupByClause_in_singleSelectStatement13251 = new BitSet(new long[]{0x0010000000000002L,0x0200000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_havingClause_in_singleSelectStatement13257 = new BitSet(new long[]{0x0010000000000002L,0x0000000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_orderByClause_in_singleSelectStatement13263 = new BitSet(new long[]{0x0010000000000002L,0x0000000001000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_clusterByClause_in_singleSelectStatement13269 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_distributeByClause_in_singleSelectStatement13275 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_sortByClause_in_singleSelectStatement13281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_window_clause_in_singleSelectStatement13287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_limitClause_in_singleSelectStatement13293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withClause_in_selectStatementWithCTE13411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000020002000L});
	public static final BitSet FOLLOW_selectStatement_in_selectStatementWithCTE13419 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insertClause_in_body13450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000020002000L});
	public static final BitSet FOLLOW_selectClause_in_body13455 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000110000L,0x0000020000000000L,0x0000000000A00000L});
	public static final BitSet FOLLOW_lateralView_in_body13460 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000A00000L});
	public static final BitSet FOLLOW_whereClause_in_body13466 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_groupByClause_in_body13472 = new BitSet(new long[]{0x0010000000000002L,0x0200000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_havingClause_in_body13478 = new BitSet(new long[]{0x0010000000000002L,0x0000000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_orderByClause_in_body13484 = new BitSet(new long[]{0x0010000000000002L,0x0000000001000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_clusterByClause_in_body13490 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_distributeByClause_in_body13496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_sortByClause_in_body13502 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_window_clause_in_body13508 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_limitClause_in_body13514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_body13607 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000110000L,0x0000020000000000L,0x0000000000A00000L});
	public static final BitSet FOLLOW_lateralView_in_body13612 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000A00000L});
	public static final BitSet FOLLOW_whereClause_in_body13618 = new BitSet(new long[]{0x0010000000000002L,0x0280000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_groupByClause_in_body13624 = new BitSet(new long[]{0x0010000000000002L,0x0200000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_havingClause_in_body13630 = new BitSet(new long[]{0x0010000000000002L,0x0000000001000000L,0x0000800000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_orderByClause_in_body13636 = new BitSet(new long[]{0x0010000000000002L,0x0000000001000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_clusterByClause_in_body13642 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_distributeByClause_in_body13648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L,0x0000020000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_sortByClause_in_body13654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_window_clause_in_body13660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_limitClause_in_body13666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause13787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause13789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000800000L,0x0002000000000000L});
	public static final BitSet FOLLOW_destination_in_insertClause13791 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
	public static final BitSet FOLLOW_ifNotExists_in_insertClause13793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause13812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_INTO_in_insertClause13814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_insertClause13816 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableOrPartition_in_insertClause13818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCAL_in_destination13863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_DIRECTORY_in_destination13865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_destination13867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200002000000L});
	public static final BitSet FOLLOW_tableRowFormat_in_destination13869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_tableFileFormat_in_destination13872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DIRECTORY_in_destination13894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_StringLiteral_in_destination13896 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_destination13911 = new BitSet(new long[]{0xFEF4FFFDFC000000L,0xEDEBBFDEAF7FFFB5L,0x3EEFD7BB9FFBDFFFL,0xBEF7FFFFDFFFDFFFL,0x00000000014BFF77L});
	public static final BitSet FOLLOW_tableOrPartition_in_destination13913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause13945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_Number_in_limitClause13949 = new BitSet(new long[]{0x0000000000000002L});
}
